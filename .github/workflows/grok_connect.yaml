name: Grok Connect
on:
  workflow_dispatch: { }
  push:
    paths:
      - 'connectors/**'
jobs:
  build:
    name: Build maven
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      image_exists: ${{ steps.get_version.outputs.image_exists }}
      latest: ${{ steps.get_version.outputs.latest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: maven
      - name: Build with Maven
        working-directory: ./connectors
        run: mvn --batch-mode -DskipTests package
      - name: Test
        working-directory: ./connectors
        run: mvn -DtestFailureIgnore=true test
      - name: Get version
        id: get_version
        working-directory: ./connectors
        run: |
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=${current_version}" >> $GITHUB_OUTPUT
          token=$(curl -sSL "https://auth.docker.io/token?service=registry.docker.io&scope=repository:datagrok/grok_connect:pull" | jq --raw-output .token)
          image_status=$(curl -LIs -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${token}" "https://registry.hub.docker.com/v2/datagrok/grok_connect/manifests/${current_version}")
          echo "${image_status}"
          if [[ "${image_status}" == "404" ]] ; then
            echo "image_exists=false" >> $GITHUB_OUTPUT
          else
            echo "image_exists=true" >> $GITHUB_OUTPUT
          fi
          latest_pushed=$(curl --retry 5 -LsS "https://registry.hub.docker.com/v2/repositories/datagrok/grok_connect/tags?page_size=20" | jq -r '[.results[] | select(.name | test("[0-9]+\\.[0-9]+\\.[0-9]+"))] | sort_by(.tag_last_pushed) | reverse[0].name')
          newest_version=$(echo -e "$latest_pushed\n$current_version" | sort -V | tail -n1)
          if [[ "${newest_version}" == "${current_version}" ]] ; then
            echo "latest=true" >> $GITHUB_OUTPUT
          else
            echo "latest=false" >> $GITHUB_OUTPUT
          fi

  docker:
    name: Build Docker
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set buildx parameters
        id: param
        run: |
          commit_sha=$(echo ${{ github.sha }} | cut -c1-8)
          branch=$(echo ${GITHUB_REF#refs/heads/})
          echo "commit_sha=${commit_sha}" >> $GITHUB_OUTPUT
          echo "branch=${branch}" >> $GITHUB_OUTPUT
          if [[ ${{ needs.build.outputs.image_exists }} == 'true' ]]; then
            platform='linux/amd64'
            echo "platform=${platform}" >> $GITHUB_OUTPUT
            tar="grok_connect_${{ needs.build.outputs.version }}-$(echo ${platform#linux/})-${commit_sha}-${{ github.run_id }}-${{ github.run_attempt }}.tar"
            echo "tar=${tar}" >> $GITHUB_OUTPUT
            echo "dest=type=docker,dest=/tmp/${tar}" >> $GITHUB_OUTPUT

            platform_add='linux/arm64'
            echo "platform_add=${platform_add}" >> $GITHUB_OUTPUT
            tar_add="grok_connect_${{ needs.build.outputs.version }}-$(echo ${platform_add#linux/})-${commit_sha}-${{ github.run_id }}-${{ github.run_attempt }}.tar"
            echo "tar_add=${tar_add}" >> $GITHUB_OUTPUT
            echo "dest_add=type=docker,dest=/tmp/${tar_add}" >> $GITHUB_OUTPUT
            echo "tags=datagrok/grok_connect:${{ needs.build.outputs.version }}-${commit_sha}" >> $GITHUB_OUTPUT
          else
            echo "platform=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
            if [[ ${{ needs.build.outputs.latest }} == 'true' ]]; then
              echo "cache_to=type=registry,ref=datagrok/grok_connect:cache,mode=max" >> $GITHUB_OUTPUT
              echo "tags=datagrok/grok_connect:latest,datagrok/grok_connect:${{ needs.build.outputs.version }}" >> $GITHUB_OUTPUT
            else
              echo "tags=datagrok/grok_connect:${{ needs.build.outputs.version }}" >> $GITHUB_OUTPUT
            fi
          fi

      - uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: ./connectors/Dockerfile
          failure-threshold: error

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./connectors
          platforms: ${{ steps.param.outputs.platform }}
          push: ${{ (needs.build.outputs.image_exists == 'false') && (github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/release/') == true) }}
          tags: ${{ steps.param.outputs.tags }}
          cache-from: type=registry,ref=datagrok/grok_connect:cache
          cache-to: ${{ steps.param.outputs.cache_to }}
          outputs: ${{ steps.param.outputs.dest }}
          build-args: |
            BRANCH=${{ steps.param.outputs.branch }}
            COMMIT_PUBLIC=${{ github.sha }}
          labels: |
            BRANCH=${{ steps.param.outputs.branch }}
            COMMIT_PUBLIC=${{ github.sha }}

      - name: Build and push bleeding-edge
        if: startsWith(github.ref, 'refs/heads/release/') == true
        uses: docker/build-push-action@v3
        with:
          context: ./connectors
          platforms: ${{ steps.param.outputs.platform }}
          push: true
          tags: "datagrok/grok_connect:bleeding-edge"
          cache-from: type=registry,ref=datagrok/grok_connect:cache
          cache-to: ${{ steps.param.outputs.cache_to }}
          build-args: |
            BRANCH=${{ steps.param.outputs.branch }}
            COMMIT_PUBLIC=${{ github.sha }}
          labels: |
            BRANCH=${{ steps.param.outputs.branch }}
            COMMIT_PUBLIC=${{ github.sha }}

      - name: Upload Artifact
        if: github.ref != 'refs/heads/master' && startsWith(github.ref,'refs/heads/release/') != true
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.param.outputs.tar }}
          path: /tmp/${{ steps.param.outputs.tar }}
          retention-days: 7

      - name: Build and push additional platform
        uses: docker/build-push-action@v3
        if: steps.param.outputs.platform_add != '' && steps.param.outputs.dest_add != ''
        with:
          context: ./connectors
          platforms: ${{ steps.param.outputs.platform_add }}
          push: false
          tags: datagrok/grok_connect:latest,datagrok/grok_connect:${{ needs.build.outputs.version }}
          cache-from: type=registry,ref=datagrok/grok_connect:cache
          cache-to: ${{ steps.param.outputs.cache_to }}
          outputs: ${{ steps.param.outputs.dest_add }}
          build-args: |
            BRANCH=${{ steps.param.outputs.branch }}
            COMMIT_PUBLIC=${{ github.sha }}
          labels: |
            BRANCH=${{ steps.param.outputs.branch }}
            COMMIT_PUBLIC=${{ github.sha }}

      - name: Upload Artifact
        if: github.ref != 'refs/heads/master' && steps.param.outputs.tar_add != ''
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.param.outputs.tar_add }}
          path: /tmp/${{ steps.param.outputs.tar_add }}
          retention-days: 7
