name: Packages Test

on:
  workflow_dispatch: { }
  push:
    paths:
      - 'packages/**'

jobs:
  metadata:
    name: Check packages were changed
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      continue: ${{ steps.generate-matrix.outputs.continue }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 3
      - name: Generate matrix
        id: generate-matrix
        run: |
          if [[ $(git log -n 1 --pretty=%B) == *"Merge branch 'master' of"* ]]; then
            commit="$(git log --format="%H" -n 1 --no-merges)"
          else
            commit=${{ github.sha }}
          fi

          CHANGED_PACKAGES="$(git diff-tree --no-commit-id --name-only -r "$(echo -n "$commit")" 'packages/**' | xargs -I {} dirname {} | awk -F'/' '{print $2}' | sort -u)"
          MATRIX_INCLUDE_JSON="["

          for PACKAGE in ${CHANGED_PACKAGES}; do
            DIR="packages/${PACKAGE}"
            if [ -f "${DIR}/package.json" ]; then
              datagrok_api_version=$(jq '(. | select( has("dependencies") == true ).dependencies) * (. | select( has("devDependencies") == true ).devDependencies) | ."datagrok-api"' "${DIR}/package.json" | sed 's/["^>=]//g')
              scripts="$(jq  '. | select( has("scripts") == true ).scripts' "${DIR}/package.json")"
              if [ -z "$(jq  '. | select( has("build") == true )' <<< "$scripts")" ]; then
                build='false'
              else
                build='true'
              fi

              if [ -z "$(jq  '. | select( has("test") == true )' <<< "$scripts")" ]; then
                test='false'
              else
                test='true'
              fi

              MATRIX_INCLUDE_JSON+="{\"package\": \"${PACKAGE}\", \"datagrok_version\": \"latest\", \"project\": \"${DIR}\", \"build\": \"${build}\", \"test\": \"${test}\"}"
              if [[ "$datagrok_api_version" != 'latest' ]]; then
                MATRIX_INCLUDE_JSON+="{\"package\": \"${PACKAGE}\", \"datagrok_version\": \"$datagrok_api_version\", \"project\": \"${DIR}\", \"build\": \"${build}\", \"test\": \"${test}\"}"
              fi
            fi
          done

          MATRIX_INCLUDE_JSON="${MATRIX_INCLUDE_JSON//\}\{/\}, \{}"
          MATRIX_INCLUDE_JSON+="]"
          MATRIX_JSON="{\"include\": ${MATRIX_INCLUDE_JSON}}"

          CONTINUE_JOB="no"
          if [[ "${MATRIX_INCLUDE_JSON}" != "[]" ]]; then
            CONTINUE_JOB="yes"
          fi
          echo '::echo::on'
          echo "::set-output name=continue::${CONTINUE_JOB}"
          echo "::set-output name=matrix::${MATRIX_JSON}"
          echo '::echo::off'

  test:
    name: Test
    needs: metadata
    if: needs.metadata.outputs.continue == 'yes'
    runs-on: ubuntu-latest
#    environment: Dev
    env:
      HOST: GitHubAction
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix: ${{ fromJson(needs.metadata.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Set Datagrok image version
        id: datagrok-image
        run: |
          v=${{ matrix.datagrok_version }}
          
          if [[ ${{ matrix.datagrok_version }} != 'latest' ]]; then
            major=$(awk -F. '{print $1}' <<<"$v")
            minor=$(awk -F. '{print $2}' <<<"$v")
            filter=$(sed 's/\./\\\\./g' <<< $v)

            latest_images=$(curl --retry 5 -s -S \
              "https://registry.hub.docker.com/v2/repositories/datagrok/datagrok/tags?page_size=100")

            tag=null
            count=10
            while [[ "$tag" == "null" ]] && [ $count -gt 0 ]; do
              tag=$(jq "[.results[] | select(.name | test(\"${major}\\\.${minor}\\\.0\"))] | sort_by(.tag_last_pushed) | .[0].name" <<<$latest_images)
              let 'minor = minor + 1'
              count=$((count - 1))
            done

            if [[ "$tag" == "null" ]] && [ $count -eq 0 ]; then
              echo "::error title=${{ matrix.package }}: failed tests::Could not find compatible Datagrok image version for package ${{ matrix.package }}";
              exit 1
            fi
          else
            tag=$v
          fi

          tag="$(sed s/\"//g <<<$tag)"

          commit_sha=$(echo ${{ github.sha }} | cut -c1-8)

          sed -i "s,datagrok/datagrok:latest,datagrok/datagrok:$tag,g" docker/localhost.docker-compose.yaml
          echo "::set-output name=version::$tag"
          echo "::set-output name=commit_sha::$commit_sha"
          echo "::notice title=${{ matrix.package }}::datagrok/datagrok:$tag docker version was used for tests"
      - name: Run Datagrok
#        run: docker-compose -p datagrok -f "docker/localhost.docker-compose.yaml" --profile datagrok --profile db --profile cvm up -d
        run: docker-compose -p datagrok -f "docker/localhost.docker-compose.yaml" --profile datagrok --profile db up -d
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@datagrok'
      - name: Upgrade npm
        run: npm install -g npm@latest
      - name: npm version
        run: npm version
      - name: Install npm dependencies
        run: npm install
        working-directory: ${{ matrix.project }}
      - name: Install datagrok tools
        run: npm install -g datagrok-tools@latest
        working-directory: ./tools
      - name: Build package with npm
        run: npm run build
        working-directory: ${{ matrix.project }}
        if: ${{ matrix.build == 'true' }}
      - name: Build package with webpack
        run: webpack
        working-directory: ${{ matrix.project }}
        if: ${{ matrix.build == 'false' }}
      - name: Wait for Datagrok to become available
        timeout-minutes: 5
        run: |
          until curl -s http://localhost:8080/api/admin/health | grep -e '"status":"Running"'
          do
            sleep 1
          done
      - name: Create configuration for grok command-line tool
        run: echo 'N' | grok config add --default --alias ${HOST} --server 'http://localhost:8080/api' --key admin
      - name: Publish package to Datagrok
        run: grok publish ${HOST}
        working-directory: ${{ matrix.project }}
      - name: Test Package
        id: test-package
        run: |
          npm run test -- --verbose=false
        env:
          JEST_HTML_REPORTER_PAGE_TITLE: "${{ matrix.package }} Test Report. Datagrok version datagrok/datagrok:${{ steps.datagrok-image.outputs.version }}. Commit ${{ steps.datagrok-image.outputs.commit_sha }}."
          JEST_HTML_REPORTER_OUTPUT_PATH: "./test-${{ matrix.package }}-${{ steps.datagrok-image.outputs.version }}-${{ steps.datagrok-image.outputs.commit_sha }}.html"
          JEST_HTML_REPORTER_INCLUDE_FAILURE_MSG: true
          JEST_HTML_REPORTER_INCLUDE_CONSOLE_LOG: true
          JEST_HTML_REPORTER_INCLUDE_SUITE_FAILURE: true
        working-directory: ${{ matrix.project }}
      - name: Create error notification
        if: failure()
        run: |
          echo "::error title=${{ matrix.package }}: failed tests with datagrok:${{ steps.datagrok-image.outputs.version }}::Check test-${{ matrix.package }}-${{ steps.datagrok-image.outputs.version }}-${{ steps.datagrok-image.outputs.commit_sha }}.html report for results"
          echo "::set-output name=status::error"
      - name: Upload Artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-${{ matrix.package }}-${{ steps.datagrok-image.outputs.version }}-${{ steps.datagrok-image.outputs.commit_sha }}.html
          path: ${{ matrix.project }}/test-${{ matrix.package }}-${{ steps.datagrok-image.outputs.version }}-${{ steps.datagrok-image.outputs.commit_sha }}.html
          retention-days: 7
#      - name: Create GitHub Action status for package
#        run: |
#          if [ "${{ steps.test-package.outputs.status }}" == "error" ]; then
#            MESSAGE='Tests failed, please view logs'
#          else
#            MESSAGE='Package passed all tests'
#          fi
#          curl -f -s -X POST \
#            --url "https://api.github.com/repos/${{ github.repository }}/statuses/${{ steps.datagrok-image.outputs.commit_sha }}" \
#            -H 'accept: application/vnd.github.v3+json' \
#            -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
#            -H 'content-type: application/json' \
#            -d "{ \"state\": \"${{ steps.test-package.outputs.status }}\",
#            \"target_url\": \"https://github.com/${{ github.repository }}/actions/runs/${GITHUB_RUN_ID}\",
#            \"description\": \"${MESSAGE}\", \"context\": \"--> Tested: ${{ matrix.package }} on datagrok:${{ steps.datagrok-image.outputs.version }}\"
#            }"
      - name: Stop Datagrok
        if: always()
        run: docker-compose -p datagrok -f "docker/localhost.docker-compose.yaml" --profile datagrok down --volumes
