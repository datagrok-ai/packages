name: Libraries
on:
  workflow_dispatch:
    inputs:
      libraries:
        description: 'Libraries separated by spaces'
        required: true
        type: string
  push:
    branches:
      - 'master'
    paths:
      - 'libraries/*/package.json'

jobs:
  metadata:
    name: Check changes
    runs-on: ubuntu-20.04
    outputs:
      publish_matrix: ${{ steps.generate-matrix.outputs.publish_matrix }}
      continue: ${{ steps.generate-matrix.outputs.continue }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 3
      - name: Generate matrix
        id: generate-matrix
        run: |
          if [[ $(git log -n 1 --pretty=%B) == *"Merge branch 'master' of"* ]]; then
            commit="$(git log --format="%H" -n 1 --no-merges)"
          else
            commit=${{ github.sha }}
          fi

          CHANGED_LIBS="$(git diff-tree --no-commit-id --name-only -r "$(echo -n "$commit")" 'libraries/*/package.json' | xargs -I {} dirname {} | awk -F'/' '{print $2}' | sort -u)"

          for l in ${{ github.event.inputs.libraries }}; do
            CHANGED_LIBS+=" $l"
          done

          MATRIX_PUBLISH_JSON="["

          for LIB in ${CHANGED_LIBS}; do
            DIR="libraries/$LIB"
            if [ -f "${DIR}/package.json" ]; then
              scripts="$(jq  '. | select( has("scripts") == true ).scripts' "${DIR}/package.json")"
          
              if [ -z "$(jq  '. | select( has("build") == true )' <<< "$scripts")" ]; then
                build='false'
              else
                build='true'
              fi
              if [ -z "$(jq  '. | select( has("test") == true )' <<< "$scripts")" ]; then
                test='false'
              else
                test='true'
              fi

              name="$(jq .name "${DIR}/package.json" | sed 's/"//g')"
              current_version="$(jq .version "${DIR}/package.json" | sed 's/"//g')"
              npm_json="$(curl -s --retry 3 "https://registry.npmjs.org/${name}/${current_version}")"
              if [[ $npm_json == "\"version not found: ${current_version}\"" ]]; then
                CHANGED_VERSION='true'
                packages=$(grep -l "$name" packages/*/package.json | awk -F'/' '{printf ("%s ", $2)}' | sort -u)
              else
                CHANGED_VERSION='false'
                packages=''
              fi
          
              MATRIX_PUBLISH_JSON+="{\"project\": \"${LIB}\", \"version\":\"$current_version\", \"changed_version\": \"${CHANGED_VERSION}\", \"build\": \"${build}\", \"test\": \"${test}\", \"packages\":\"$packages\"}"
            fi
          done

          MATRIX_PUBLISH_JSON="${MATRIX_PUBLISH_JSON//\}\{/\}, \{}"
          MATRIX_PUBLISH_JSON+="]"
          PUBLISH_JSON="{\"include\": ${MATRIX_PUBLISH_JSON}}"

          CONTINUE_JOB="no"
          if [[ "${MATRIX_PUBLISH_JSON}" != "[]" ]]; then
            CONTINUE_JOB="yes"
          fi
          echo '::echo::on'
          echo "::set-output name=continue::${CONTINUE_JOB}"
          echo "::set-output name=publish_matrix::${PUBLISH_JSON}"
          echo '::echo::off'

  publish:
    name: Build and publish to npm
    needs: metadata
    if: needs.metadata.outputs.continue == 'yes'
    runs-on: ubuntu-20.04
    environment: Prod
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix: ${{ fromJson(needs.metadata.outputs.publish_matrix) }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.WRITE_TOKEN }}
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@datagrok-libraries'
      - name: Upgrade npm
        run: npm install -g npm@latest
      - name: npm version
        run: npm version
      - run: npm install
        working-directory: libraries/${{ matrix.project }}
      - run: npm run test
        working-directory: libraries/${{ matrix.project }}
        if: ${{ matrix.test == 'true' }}
        continue-on-error: true
      - run: npm run build
        working-directory: libraries/${{ matrix.project }}
        if: ${{ matrix.build == 'true' }}
      - run: npm publish --access public
        if: ${{ matrix.changed_version == 'true' }}
        working-directory: libraries/${{ matrix.project }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Commit package-lock.json
        if: ${{ matrix.changed_version == 'true' }}
        run: |
          if [ -n "$(git status -s libraries/${{ matrix.project }}/package-lock.json)" ]; then
            git config --global user.name 'GitHub Actions'
            git config --global user.email 'spodolskaya@datagrok.ai'
            git pull
            git add libraries/${{ matrix.project }}/package-lock.json
            git commit -m "GitHub Actions: Update libraries/${{ matrix.project }}/package-lock.json [skip ci]"
            count=0
            retries=10
            until git push; do
              exit=$?
              wait=$((2 ** count))
              count=$((count + 1))
              if [ $count -lt "$retries" ]; then
                echo "Retry $count/$retries exited $exit, retrying 'git push' in $wait seconds..."
                sleep $wait
                git pull --rebase
              else
                echo "Retry $count/$retries exited $exit, no more retries left for 'git push'."
                exit $exit
              fi
            done
          fi
      - name: Test packages compatibility
        if: ${{ matrix.packages != '' }}
        id: test-packages
        run: |
          crnt=$(pwd)
          for package in ${{ matrix.packages }}; do
            cd packages/$package
            npm install
            failed=false
            webpack || failed=true
            if [[ $failed == "true" ]]; then
              old_version=$(jq '(. | select( has("dependencies") == true ).dependencies) * (. | select( has("devDependencies") == true ).devDependencies) | ."@datagrok-libraries/${{ matrix.project }}"' package.json | sed 's/"//g')
              sed -i "s,\"@datagrok-libraries/${{ matrix.project }}\": \"$old_version\",\"@datagrok-libraries/${{ matrix.project }}\": \"$old_version <${{ matrix.version }}\",g" "package.json"
              echo "::warning title=$package library ${{ matrix.project }}::Changed rule for ${{ matrix.project }} in $package: $old_version --> $(jq  '(. | select( has("dependencies") == true ).dependencies) * (. | select( has("devDependencies") == true ).devDependencies) | ."@datagrok-libraries/${{ matrix.project }}"' "package.json" | sed 's/"//g')"
              echo "::set-output name=changes::yes"
            fi
            cd $crnt
          done
      - name: Commit packages package.json
        if: ${{ steps.test-packages.outputs.changes == 'yes' }}
        run: |
          if [ -n "$(git status -s packages/*/package.json)" ]; then
            git config --global user.name 'GitHub Actions'
            git config --global user.email 'spodolskaya@datagrok.ai'
            git pull
            git add packages/*/package.json
            git commit -m "GitHub Actions: Update library ${{ matrix.project }} dependency rule for packages [skip ci]"
            count=0
            retries=10
            until git push; do
              exit=$?
              wait=$((2 ** count))
              count=$((count + 1))
              if [ $count -lt "$retries" ]; then
                echo "Retry $count/$retries exited $exit, retrying 'git push' in $wait seconds..."
                sleep $wait
                git pull --rebase
              else
                echo "Retry $count/$retries exited $exit, no more retries left for 'git push'."
                exit $exit
              fi
            done
          fi
