name: Libraries
on:
  workflow_dispatch:
    inputs:
      libraries:
        description: 'Enter short libraries names separated by spaces (e.g. bio tutorials)'
        required: true
        type: string
  push:
    branches:
      - 'master'
    paths:
      - 'libraries/*/package.json'

jobs:
  metadata:
    name: Check changes
    runs-on: ubuntu-20.04
    outputs:
      publish_matrix: ${{ steps.generate-matrix.outputs.publish_matrix }}
      continue: ${{ steps.generate-matrix.outputs.continue }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - name: Generate matrix
        id: generate-matrix
        run: |
          if [[ "${{ github.event.inputs.libraries }}" == "" ]]; then
            if [[ $(git log -n 1 --pretty=%B) == *"Merge branch 'master' of"* ]]; then
              commit="$(git log --format="%H" -n 1 --no-merges)"
            else
              commit=${{ github.sha }}
            fi
            CHANGED_LIBS="$(git diff-tree -m --no-commit-id --name-only -r "$(echo -n "$commit")" 'libraries/*/package.json' | xargs -I {} dirname {} | awk -F'/' '{print $2}' | sort -u)"
          else
            CHANGED_LIBS="${{ github.event.inputs.libraries }}"
          fi

          MATRIX_PUBLISH_JSON="["

          for LIB in $(echo ${CHANGED_LIBS} | sort -u); do
            DIR="libraries/$LIB"
            if [ -f "${DIR}/package.json" ]; then
              scripts="$(jq  '. | select( has("scripts") == true ).scripts' "${DIR}/package.json")"
              dependencies="$(jq  '(. | select( has("dependencies") == true ).dependencies) * (. | select( has("devDependencies") == true ).devDependencies)' "${DIR}/package.json")"

              if [ -z "$(jq  '. | select( has("build") == true )' <<< "$scripts")" ]; then
                build='false'
              else
                build='true'
              fi
              if [ -z "$(jq  '. | select( has("test") == true )' <<< "$scripts")" ]; then
                test='false'
              else
                test='true'
              fi

              name="$(jq -r '.name' "${DIR}/package.json")"
              current_version="$(jq -r '.version' "${DIR}/package.json")"
              npm_version="$(curl --retry 3 -s "https://registry.npmjs.org/${name}/${current_version}" | jq -r '.? | select( has("version") == true ).version')"
              unpublished_deps="$(jq -r '. | to_entries | map(select(.value | match("\\.\\./.*")))[] | "\(.key)=\(.value)"' <<<$dependencies  | tr '\n' ' ')"
              unpublished_deps=${unpublished_deps}
              if [[ $npm_version != ${current_version} ]]; then
                if [[ $unpublished_deps == "" ]]; then
                  CHANGED_VERSION='true'
                  packages=$(grep -l "$name" packages/*/package.json | awk -F'/' '{printf ("%s ", $2)}' | sort -u)
                else
                  CHANGED_VERSION='false'
                fi
              else
                CHANGED_VERSION='false'
                packages=''
              fi

              MATRIX_PUBLISH_JSON+="{\"project\": \"${LIB}\", \"name\": \"${name}\", \"version\":\"$current_version\", \"changed_version\": \"${CHANGED_VERSION}\", \"build\": \"${build}\", \"test\": \"${test}\", \"unpublished_deps\": \"${unpublished_deps}\", \"packages\":\"$packages\"}"
            fi
          done

          MATRIX_PUBLISH_JSON="${MATRIX_PUBLISH_JSON//\}\{/\}, \{}"
          MATRIX_PUBLISH_JSON+="]"
          PUBLISH_JSON="{\"include\": ${MATRIX_PUBLISH_JSON}}"

          CONTINUE_JOB="no"
          if [[ "${MATRIX_PUBLISH_JSON}" != "[]" ]]; then
            CONTINUE_JOB="yes"
          fi
          echo "continue=${CONTINUE_JOB}" >> $GITHUB_OUTPUT
          echo "publish_matrix=${PUBLISH_JSON}" >> $GITHUB_OUTPUT

      - name: Output
        run: |
          echo -e "publish_matrix: ${{ steps.generate-matrix.outputs.publish_matrix }}"
          echo -e "continue: ${{ steps.generate-matrix.outputs.continue }}"

  publish:
    name: Build and publish to npm
    needs: metadata
    if: needs.metadata.outputs.continue == 'yes'
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.metadata.outputs.publish_matrix) }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.WRITE_TOKEN }}
      - name: Check library properties
        working-directory: libraries/${{ matrix.project }}
        run: |
          if [[ "$(jq '.name' package.json | sed -E 's/(^"|"$)//g')" != "@datagrok-libraries/"* ]]; then
            echo "::error title=${{ matrix.project }}: failed properties check::Library should be in '@datagrok-libraries' scope. Change library name to '@datagrok-libraries/<name>' in ${{ matrix.project }}/package.json"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@datagrok-libraries'
      - name: Upgrade npm
        run: npm install -g npm@x
      - name: npm version
        run: npm version
      - name: unpublished dependencies
        if: ${{ matrix.unpublished_deps != '' }}
        run: |
          crnt=$(pwd)
          for dep in $(echo -e ${{ matrix.unpublished_deps }}); do
            cd $(awk -F'=' '{print $2}' <<<$dep)
            echo "Install dependencies for $(awk -F'=' '{print $2}' <<<$dep)"
            npm install
            cd $crnt
          done
        working-directory: libraries/${{ matrix.project }}
      - run: npm install
        working-directory: libraries/${{ matrix.project }}
      - run: npm run test
        working-directory: libraries/${{ matrix.project }}
        if: ${{ matrix.test == 'true' }}
      - run: npm run build
        working-directory: libraries/${{ matrix.project }}
        if: ${{ matrix.build == 'true' }}
      - name: npm publish
        run: npm publish --access public
        if: ${{ matrix.changed_version == 'true' }}
        working-directory: libraries/${{ matrix.project }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Commit package-lock.json
        continue-on-error: true
        if: ${{ matrix.changed_version == 'true' }}
        run: |
          if [ -n "$(git status -s libraries/${{ matrix.project }}/package-lock.json)" ]; then
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git pull
            git add libraries/${{ matrix.project }}/package-lock.json
            git commit -m 'GitHub Actions: Update libraries/${{ matrix.project }}/package-lock.json [skip ci]

            Workflow ${{ github.workflow }} ${{ github.run_number }}
            https://github.com/datagrok-ai/public/actions/runs/${{ github.run_id }}'
            count=0
            retries=10
            until git push; do
              exit=$?
              wait=$((2 ** count))
              count=$((count + 1))
              if [ $count -lt "$retries" ]; then
                echo "Retry $count/$retries exited $exit, retrying 'git push' in $wait seconds..."
                sleep $wait
                git pull --rebase
              else
                echo "Retry $count/$retries exited $exit, no more retries left for 'git push'."
                exit $exit
              fi
            done
          fi
      - name: Check packages
        if: ${{ matrix.packages != '' }}
        id: commit
        run: |
          crnt=$(pwd)
          git pull
          changed=""
          for package in ${{ matrix.packages }}; do
            cd packages/$package
            sed -i -e 's#"${{ matrix.name }}": "../../libraries/${{ matrix.project }}"#"${{ matrix.name }}": "^${{ matrix.version }}"#g' package.json
            if [ -n "$(git status -s package.json)" ]; then
              changed+="$package "
              npm install
              git add package.json
              git add package-lock.json
              git commit -m "GitHub Actions: Update package $package ${{ matrix.name }} dependency

              Workflow ${{ github.workflow }} ${{ github.run_number }}
              https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            fi
            cd $crnt
          done
          echo "changed=$changed" >> $GITHUB_OUTPUT
          if [ -n "$(git log @{u}..)" ]; then
            count=0
            until git push; do
              exit=$?
              wait=$((2 ** count))
              count=$((count + 1))
              if [ $count -lt "10" ]; then
              echo "Retry $count/$retries exited $exit, retrying 'git push' in $wait seconds..."
              sleep $wait
              git pull --rebase
              else
                echo "Retry $count/$retries exited $exit, no more retries left for 'git push'."
                exit $exit
              fi
            done
          fi
      - name: Send mail
        if: always() && steps.commit.outcome == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.mailgun.org
          server_port: 587
          secure: true
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "Github Actions: Failed update for library ${{ matrix.project }}"
          to: ${{ matrix.author }}
          from: monitoring@grok.datagrok.ai
          body: "Failed to update ${{ matrix.name }} dependency for packages ${{ steps.commit.outputs.changed }}. Update the dependency manually to version '^${{ needs.version.outputs.current_version }}'\nFailed in Workflow ${{ github.workflow }} ${{ github.run_number }}: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          reply_to: monitoring@datagrok.ai
