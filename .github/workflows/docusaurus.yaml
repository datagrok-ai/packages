name: Docusaurus
# https://datagrok.ai/help/develop/how-to/help-pages#github-actions-docusaurus-workflow

on:
  workflow_dispatch: { }
  push:
    paths:
      - 'help/**/*.md'
      - 'help/**/*.mdx'
      - 'help/**/_category_.yml'
      - 'help/**/*.gif'
      - 'help/**/*.jpg'
      - 'help/**/*.JPG'
      - 'help/**/*.jpeg'
      - 'help/**/*.png'
      - 'help/**/*.svg'
      - 'help/**/*.bmp'
      - 'docusaurus/**'
      - 'js-api/**'
      - 'help/deploy/releases/plugins/**'
      - 'packages/*/CHANGELOG.md'
  pull_request:
    paths:
      - 'help/**/*.md'
      - 'help/**/*.mdx'
      - 'help/**/_category_.yml'
      - 'help/**/*.gif'
      - 'help/**/*.jpg'
      - 'help/**/*.JPG'
      - 'help/**/*.jpeg'
      - 'help/**/*.png'
      - 'help/**/*.svg'
      - 'help/**/*.bmp'
      - 'docusaurus/**'
      - 'js-api/**'
      - 'help/deploy/releases/plugins/**'
      - 'packages/*/CHANGELOG.md'

jobs:
  common-check:
    name: Common checks
    uses: ./.github/workflows/common_check.yaml
    with:
      run_trigger: ${{ github.event_name }}

  lint:
    name: Lint
    needs: common-check
    runs-on: ubuntu-22.04
    if: needs.common-check.outputs.continue == 'true' && github.event_name != 'workflow_dispatch'
    outputs:
      result: ${{ steps.check.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          sparse-checkout: |
            help
            .markdownlint.yaml
            .markdownlint-cli2.jsonc
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install markdownlint-cli2
        run: npm install -g markdownlint-cli2
      - name: Lint-Fix Markdown
        id: check
        run: |
          markdownlint-cli2 --fix "help/**/*.{md,mdx}" > help/_lint-check-report.md 2>&1
          echo "result=success" >> $GITHUB_OUTPUT
        continue-on-error: true
#      - name: Commit package-lock.json
#        id: git
#        continue-on-error: true
#        if: steps.check.outcome == 'success'
#        run: |
#          git config --global user.name 'github-actions[bot]'
#          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
#          git pull
#          continue=false
#          if [ -n "$(git status -s help/)" ]; then
#            git add help/
#            skip_ci=""
#            if [ ${{ github.ref }} == 'refs/heads/master' ]; then
#              skip_ci="[skip ci]"
#            fi
#            git commit -m "GitHub Actions: Fix markdownlint findings $skip_ci
#
#            Workflow ${{ github.workflow }} ${{ github.run_number }}
#            https://github.com/datagrok-ai/public/actions/runs/${{ github.run_id }}"
#            continue=true
#          fi
#          if [[ "${continue}" == "true" ]]; then
#            count=0
#            retries=10
#            until git push; do
#              exit=$?
#              wait=$((2 ** count))
#              count=$((count + 1))
#              if [ $count -lt "$retries" ]; then
#                echo "Retry $count/$retries exited $exit, retrying 'git push' in $wait seconds..."
#                sleep $wait
#                git pull --rebase
#              else
#                echo "Retry $count/$retries exited $exit, no more retries left for 'git push'."
#                exit $exit
#              fi
#            done
#          fi
      - name: Set summary
        run: |
          echo "## Summary" >  "${GITHUB_STEP_SUMMARY}"
          if [[ "${{ steps.check.outputs.result }}" == "success" ]]; then
            echo ":white_check_mark: Successful" >> "${GITHUB_STEP_SUMMARY}"
          else
            echo ":no_entry_sign: Some errors occurred" >> "${GITHUB_STEP_SUMMARY}"
            echo "## Errors per input" >> "${GITHUB_STEP_SUMMARY}"
            echo ":no_entry_sign: Markdown Linter errors:"
            echo "To test locally use the [instructions](https://datagrok.ai/help/develop/help-pages/github-workflow#markdown-linter)" >> help/_lint-check-report.md
            sed -i -r '/^To test locally use the .*/i ## Local execution' ${GITHUB_STEP_SUMMARY}
            cat help/_lint-check-report.md
            cat help/_lint-check-report.md >> "${GITHUB_STEP_SUMMARY}"
            exit 1
          fi

  convert:
    name: Build
    needs: [ lint, common-check ]
    if: always() && (needs.lint.result == 'skipped' || needs.lint.result == 'success') && needs.common-check.outputs.continue == 'true'
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          sparse-checkout: |
            docusaurus
            help
            packages
            js-api
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: |
            docusaurus/package-lock.json
            js-api/package-lock.json
      - name: Cache Docusaurus
        uses: actions/cache@v3
        if: github.ref == 'refs/heads/master'
        with:
          path: docusaurus/.docusaurus
          key: ${{ github.ref }}-docusaurus
      - name: Cache Docusaurus build
        uses: actions/cache@v3
        if: github.ref == 'refs/heads/master'
        with:
          path: docusaurus/build
          key: ${{ github.ref }}-docusaurus-build
      - name: Install hyperlink
        if: github.event_name != 'workflow_dispatch'
        run: npm install -g @untitaker/hyperlink
      - name: Install dependencies
        run: npm install
        working-directory: ./docusaurus
      - name: Install js-api dependencies
        run: npm install
        working-directory: ./js-api
      - name: Build Docusaurus website
        run: npm run build
        working-directory: ./docusaurus
      - name: Lint-Fix Markdown
        run: |
          npm install -g markdownlint-cli2
          markdownlint-cli2-fix "help/**/*.{md,mdx}" > help/_lint-check-report.md 2>&1
        continue-on-error: true
        if: github.event_name != 'workflow_dispatch' && needs.lint.outputs.result != 'success'
      - name: Check anchors
        id: anchors
        working-directory: ./docusaurus
        if: github.event_name != 'workflow_dispatch'
        continue-on-error: true
        run: |
          hyperlink --check-anchors build/ --sources ../help/ > ../help/_anchor-check-report.md 2>&1
          echo "result=success" >> $GITHUB_OUTPUT
      - name: Set summary
        if: github.event_name != 'workflow_dispatch'
        continue-on-error: true
        run: |
          echo "## Summary" >  "${GITHUB_STEP_SUMMARY}"
          if [[ "${{ steps.anchors.outputs.result }}" == "success" ]]; then
            echo ":white_check_mark: Successful" >> "${GITHUB_STEP_SUMMARY}"
          else
            echo ":no_entry_sign: Some errors occurred" >> "${GITHUB_STEP_SUMMARY}"
            echo ":no_entry_sign: Hyperlink link checker errors:"
            echo "To test locally use the [instructions](https://datagrok.ai/help/develop/help-pages/github-workflow#links-and-anchors-check)" >> help/_anchor-check-report.md
            cat help/_anchor-check-report.md >> "${GITHUB_STEP_SUMMARY}"
            cat help/_anchor-check-report.md
            sed -i '/Found some broken links, reading source files/a ## Errors per input' ${GITHUB_STEP_SUMMARY}
            sed -i -r 's,^(help/.*\.md)$,### \1,g' ${GITHUB_STEP_SUMMARY}
            sed -i 's,error:,**Error:**,g' ${GITHUB_STEP_SUMMARY}
            sed -i -r 's,(at line [0-9]+),**\1**,g' ${GITHUB_STEP_SUMMARY}
            sed -i -r 's,^(output/help.*\.html)$,### \1,g' ${GITHUB_STEP_SUMMARY}
            sed -i -r '/^Found [0-9]+ bad links/i ## Errors summary' ${GITHUB_STEP_SUMMARY}
            sed -i -r '/^To test locally use the .*/i ## Local execution' ${GITHUB_STEP_SUMMARY}
            exit 1
          fi
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: docusaurus
          path: docusaurus/build
          retention-days: 7
      - name: 'debug'
        run: |
          echo ${{ github.ref == 'refs/heads/master' && needs.common-check.outputs.continue == 'true' }}
          echo ${{ github.ref }}
          echo ${{ needs.common-check.outputs.continue }}
#      - name: Commit plugins.json
#        id: git
#        if: github.ref == 'refs/heads/master'
#        continue-on-error: true
#        run: |
#          git config --global user.name 'github-actions[bot]'
#          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
#          git pull
#          continue=false
#          if [ -n "$(git status -s help/deploy/releases/plugins/)" ]; then
#            git add help/deploy/releases/plugins/
#            skip_ci=""
#            if [ ${{ github.ref }} == 'refs/heads/master' ]; then
#              skip_ci="[skip ci]"
#            fi
#            git commit -m "GitHub Actions: Update plugins.json $skip_ci
#
#            Workflow ${{ github.workflow }} ${{ github.run_number }}
#            https://github.com/datagrok-ai/public/actions/runs/${{ github.run_id }}"
#            continue=true
#          fi
#          if [[ "${continue}" == "true" ]]; then
#            count=0
#            retries=10
#            until git push; do
#              exit=$?
#              wait=$((2 ** count))
#              count=$((count + 1))
#              if [ $count -lt "$retries" ]; then
#                echo "Retry $count/$retries exited $exit, retrying 'git push' in $wait seconds..."
#                sleep $wait
#                git pull --rebase
#              else
#                echo "Retry $count/$retries exited $exit, no more retries left for 'git push'."
#                exit $exit
#              fi
#            done
#          fi
#
#
  deploy:
    name: Deploy
    needs: [ convert, common-check ]
    concurrency:
      group: help-deploy-${{ github.ref }}
      cancel-in-progress: true
    if: always() && needs.convert.result == 'success' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-22.04
    environment: Help
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docusaurus
          path: docusaurus/build
      - name: Deploy to server
        id: deploy
        shell: bash
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          sudo chmod 400 ~/.ssh/id_rsa
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          rsync \
            --recursive \
            --links \
            --times \
            --omit-dir-times \
            --group --owner \
            --chown=grok:grok \
            --perms --executability --acls --xattrs \
            --devices --specials \
            --checksum \
            --delete-after \
            --compress \
            --update \
            --verbose \
            --progress \
            --itemize-changes \
            --stats \
            --human-readable \
            "docusaurus/build/" "$REMOTE_USER@$REMOTE_HOST:$TARGET"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.HELP_SSH_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.HELP_KNOWN_HOST }}
          REMOTE_HOST: ${{ secrets.HELP_HOST }}
          REMOTE_USER: ${{ secrets.HELP_USER }}
          TARGET: ${{ secrets.WIKI_DOCS_TARGET }}

      - name: Prepare Slack Message
        if: steps.deploy.outcome == 'success'
        id: slack-user
        shell: bash
        env:
          SLACK_ID: ${{ secrets.SLACK_ID }}
        run: |
          channel_id=$(echo "$SLACK_ID" | jq -r .\"${{ github.actor }}\")
          echo "::add-mask::$channel_id"
          echo SLACK_CHANNEL=$channel_id >> $GITHUB_ENV

          header="<https://datagrok.ai/help/datagrok/|Help> is deployed"
          echo SLACK_MESSAGE_HEADER=$header >> $GITHUB_ENV

          context="*GitHub Workflow:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }} ${{ github.run_number }}>\n*Commit:* <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|$(echo "${{ github.sha }}" | cut -c1-8) $(echo -e "${{ github.event.head_commit.message }}" | head -n1 | sed -e 's/"/\\"/g')>"
          echo SLACK_MESSAGE_CONTEXT=$context >> $GITHUB_ENV

      - name: Send to Slack
        id: slack
        if: steps.deploy.outcome == 'success'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ env.SLACK_CHANNEL }}
          payload: |
            {
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "${{ env.SLACK_MESSAGE_HEADER }}"
                        }
                    },
                    {
                        "type": "context",
                        "elements": [
                            {
                                "type": "mrkdwn",
                                "text": "${{ env.SLACK_MESSAGE_CONTEXT }}"
                            }
                        ]
                    }
                ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACKBOT_TOKEN }}


  scrape:
    name: Scrape
    needs: [ deploy, common-check ]
    environment: Help
    concurrency:
      group: help-scrape-${{ github.ref }}
      cancel-in-progress: true
    if: always() && needs.deploy.result == 'success'
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          sparse-checkout: |
            docusaurus
      - name: Update the DocSearch index
        uses: celsiusnarhwal/typesense-scraper@v2
        continue-on-error: true
        with:
          api-key: ${{ secrets.TYPESENSE_API_KEY }}
          host: 'typesense.datagrok.ai'
          port: '443'
          protocol: 'https'
          config: docusaurus/docsearch.json
