name: Packages
on:
  workflow_dispatch:
    inputs:
      packages:
        description: 'Packages separated by spaces'
        required: true
        type: string
  push:
    paths:
      - 'packages/**'
  pull_request:
    paths:
      - 'packages/**'

jobs:
  common-check:
    name: Common checks
    uses: ./.github/workflows/common_check.yaml
    with:
      run_trigger: ${{ github.event_name }}

  matrix:
    name: Check changes
    runs-on: ubuntu-22.04
    needs: common-check
    if: needs.common-check.outputs.continue == 'true'
    outputs:
      matrix_publish: ${{ steps.generate-matrix.outputs.matrix_publish }}
      publish: ${{ steps.generate-matrix.outputs.publish }}
    permissions:
      pull-requests: read
    steps:
      - name: Set git fetch depth
        run: |
          if [[ ${{ github.event_name }} != 'pull_request' ]]; then
              echo "FETCH_DEPTH=2" >> "$GITHUB_ENV"
          else
              echo "FETCH_DEPTH=0" >> "$GITHUB_ENV"
          fi
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: ${{ env.FETCH_DEPTH }}
      - name: Get changed files
        uses: tj-actions/changed-files@v37
        id: changed-files
        with:
          files: 'packages/**'
          separator: "\n"
          dir_names: true
      - name: Generate matrix
        id: generate-matrix
        run: |
          if [[ "${{ github.event.inputs.packages }}" == "" ]]; then
            CHANGED_PACKAGES="$(echo -e "${{ steps.changed-files.outputs.all_changed_files }}" | awk -F'/' '{print $2}' | sort -u)"
          else
            CHANGED_PACKAGES="${{ github.event.inputs.packages }}"
          fi

          MATRIX_PUBLISH_JSON="["

          for PACKAGE in $(echo ${CHANGED_PACKAGES} | sort -u); do
            DIR="packages/${PACKAGE}"
            if [ -f "${DIR}/package.json" ]; then
              MATRIX_PUBLISH_JSON+="{\"package\": \"${PACKAGE}\""
              current_version="$(jq -r '.version' "${DIR}/package.json")"
              MATRIX_PUBLISH_JSON+=", \"version\": \"${current_version}\""

              scripts="$(jq '. | select( has("scripts") == true ).scripts' "${DIR}/package.json")"
              dependencies="$(jq '(. | select( has("dependencies") == true ).dependencies) * (. | select( has("devDependencies") == true ).devDependencies)' "${DIR}/package.json")"

              job_name='Check'
              if [ ! -z "$(jq -r '. | select( has("build") == true )' <<< "$scripts")" ]; then
                MATRIX_PUBLISH_JSON+=", \"build\": \"build\""
                job_name='Build'
              fi

              if [ -n "$(jq  '. | select( has("test") == true )' <<< "$scripts")" ] && \
                  [[ "$(jq  -r '. | select( has("skipCI") == true ).skipCI' "${DIR}/package.json")" != "true" ]]; then
                MATRIX_PUBLISH_JSON+=", \"test\": \"test\""
                job_name='Build, test'
              fi

              name="$(jq -r .name "${DIR}/package.json")"
              npm_version="$(curl --retry 3 -s "https://registry.npmjs.org/${name}/${current_version}" | jq -r '.? | select( has("version") == true ).version')"
              unpublished_deps="$(jq -r '. | to_entries | map(select(.value | match("\\.\\./.*")))[] | "\(.key)=\(.value)"' <<<$dependencies | tr '\n' ' ')"
              MATRIX_PUBLISH_JSON+=", \"unpublished_deps\": \"$unpublished_deps\""
              if [[ "${{ github.event_name }}" != "pull_request" ]]; then
                if [[ $npm_version != ${current_version} ]]; then
                  if [ "$(awk -F. '{print $1}' <<<$current_version)" -gt "0" ]; then
                    if [[ $unpublished_deps == "" ]]; then
                      publish="publish"
                      MATRIX_PUBLISH_JSON+=", \"publish\": \"publish\""
                      job_name+=' and publish to NPM'
                    else
                      echo "Package $PACKAGE version ${current_version} has unpublished dependencies: $unpublished_deps. It is not going to be published"
                      echo "::notice title=${PACKAGE}::Version ${current_version} has unpublished dependencies and is not going to be published"
                    fi
                  else
                    MATRIX_PUBLISH_JSON+=", \"beta\": \"beta\""
                    echo "Package $PACKAGE version ${current_version} is under 1.0.0 and is not going to be published"
                    echo "::notice title=${PACKAGE}::Version ${current_version} is under 1.0.0 and is not going to be published"
                  fi
                else
                  echo "Package $PACKAGE version ${current_version} already published"
                  echo "::notice title=${PACKAGE}::Version ${current_version} is already published"
                fi
              else
                  echo "It is an actions for PR. Publish will be skipped."
                  echo "::notice title=${PACKAGE}::It is an actions for PR. Publish will be skipped."
              fi
          
              if [[ -d "${DIR}/dockerfiles" ]]; then
                build_docker=false
                if [[ $publish == "publish" ]] || [[ "${{ github.event.inputs.packages }}" != "" ]]; then
                    build_docker=true
                else
                  if [[ "${{ steps.changed-files.outputs.all_changed_files }}" == *"${DIR}/dockerfiles"* ]]; then
                    build_docker=true
                  fi
                fi

                MATRIX_PUBLISH_JSON+=", \"build_docker\": \"$build_docker\""
                MATRIX_PUBLISH_JSON+=", \"docker\": \"$(find ${DIR}/dockerfiles -type f -name Dockerfile | tr '\n' ' ')\""
              fi

              MATRIX_PUBLISH_JSON+=", \"job_name\": \"${job_name}\""
              MATRIX_PUBLISH_JSON+="}"
            fi
          done

          MATRIX_PUBLISH_JSON="${MATRIX_PUBLISH_JSON//\}\{/\}, \{}"
          MATRIX_PUBLISH_JSON+="]"

          PUBLISH_JSON="{\"include\": ${MATRIX_PUBLISH_JSON}}"

          CONTINUE_PUBLISH_JOB="no"
          if [[ "${MATRIX_PUBLISH_JSON}" != "[]" ]]; then
            CONTINUE_PUBLISH_JOB="yes"
          fi
          echo "publish=${CONTINUE_PUBLISH_JOB}" >> $GITHUB_OUTPUT
          echo "matrix_publish=${PUBLISH_JSON}" >> $GITHUB_OUTPUT


      - name: Output
        run: |
          echo -e "matrix_publish: ${{ steps.generate-matrix.outputs.matrix_publish }}"
          echo -e "publish: ${{ steps.generate-matrix.outputs.publish }}"

  publish:
    name: "${{ matrix.package }}: ${{ matrix.job_name }}"
    needs:
      - matrix
      - common-check
    if: needs.matrix.outputs.publish == 'yes' && needs.common-check.outputs.continue == 'true'
    runs-on: ubuntu-22.04
    env:
      HOST: GitHubAction
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.matrix_publish) }}
    outputs:
      push: ${{ steps.info.outputs.push }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.WRITE_TOKEN || github.token }}
      - name: Run datagrok stand
        id: datagrok-image
        if: ${{ matrix.test == 'test' }}
        run: |
          commit_sha=$(echo ${{ github.sha }} | cut -c1-8)
          echo "commit_sha=$commit_sha" >> $GITHUB_OUTPUT
          echo "Find grok dependencies packages"
          grok_deps="$(jq  -r '. | select( has("devDependencies") == true ).devDependencies | to_entries[] | .key | select(test("@datagrok/.*")?)' packages/${{ matrix.package }}/package.json)"
          profiles='--profile datagrok --profile db --profile grok_connect'
          echo "Check if CVM is required for the package"
          if [[ "$(tr '[:upper:]' '[:lower:]' <<<${{ matrix.package }})" == "chem" ]] || \
             [[ "$(tr '[:upper:]' '[:lower:]' <<<${{ matrix.package }})" == "simpkpd" ]] || \
             [[ "$(tr '[:upper:]' '[:lower:]' <<<${{ matrix.package }})" == "dendrogram" ]] || \
             [[ "$(tr '[:upper:]' '[:lower:]' <<<${{ matrix.package }})" == "cvmtests" ]] || \
             [[ "$(tr '[:upper:]' '[:lower:]' <<<${{ matrix.package }})" == "samples" ]] || \
             [[ "$(tr '[:upper:]' '[:lower:]' <<<${grok_deps})" == *"chem"* ]] || \
             [[ "$(tr '[:upper:]' '[:lower:]' <<<${grok_deps})" == *"simpkpd"* ]] || \
             [[ "$(tr '[:upper:]' '[:lower:]' <<<${grok_deps})" == *"cvmtests"* ]] || \
             [[ "$(tr '[:upper:]' '[:lower:]' <<<${grok_deps})" == *"dendrogram"* ]] || \
             [[ "$(tr '[:upper:]' '[:lower:]' <<<${grok_deps})" == *"samples"* ]]; then
            echo "Add Scripting as dependency for package ${{ matrix.package }}"
            profiles+=' --profile scripting'
          fi
          if [[ "$(tr '[:upper:]' '[:lower:]' <<<${{ matrix.package }})" == "chem" ]] || \
             [[ "$(tr '[:upper:]' '[:lower:]' <<<${grok_deps})" == *"chem"* ]]; then
            echo "Add Grok Compute as dependency for package ${{ matrix.package }}"
            profiles+=' --profile grok_compute'
          fi
          echo "Check if Grok Spawner is required for the package"
          if [ -d "packages/${{ matrix.package }}/dockerfiles" ]; then
            profiles+=' --profile grok_spawner'
          fi
          echo "Run datagrok stand with profiles ${profiles}"
          docker system prune -af --volumes
          if [[ "${{ matrix.unpublished_deps }}" == "" ]] && [[ "$(tr '[:upper:]' '[:lower:]' <<<${{ matrix.package }})" != *"tests"* ]]; then
            DATAGROK_VERSION='latest'
          else
            DATAGROK_VERSION='bleeding-edge'
            export GROK_SPAWNER_VERSION='bleeding-edge'
            export GROK_JUPYTER_KERNEL_GATEWAY_VERSION='bleeding-edge'
          fi
          export DATAGROK_VERSION
          docker compose -p datagrok -f "docker/localhost.docker-compose.yaml" ${profiles} up -d
          echo "Set docker_sha"
          docker_sha=$(docker images --quiet "datagrok/datagrok:$DATAGROK_VERSION")
          echo "docker_sha=$docker_sha" >> $GITHUB_OUTPUT
          echo "Notify about version used for tests"
          echo "::notice title=${{ matrix.package }}::datagrok/datagrok:$DATAGROK_VERSION SHA=$docker_sha docker version was used for tests"
          df -h
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@datagrok'
      - name: Upgrade npm
        run: npm install -g npm@x
      - name: npm version
        run: npm version
      - name: unpublished dependencies in package-lock.json
        id: package-lock
        if: ${{ matrix.unpublished_deps == '' }}
        run: grep -q '\.\./\.\./' package-lock.json && rm -f package-lock.json || true
        working-directory: packages/${{ matrix.package }}
      - name: npm install
        run: npm install
        id: install
        working-directory: packages/${{ matrix.package }}
      - name: js api dependency for unpublished dependencies
        if: ${{ matrix.unpublished_deps != '' }}
        run: |
          npm install
          npm run build
        working-directory: ./js-api
      - name: unpublished dependencies
        if: ${{ matrix.unpublished_deps != '' }}
        run: |
          crnt=$(pwd)
          for dep in $(echo -e ${{ matrix.unpublished_deps }}); do
            cd $(awk -F'=' '{print $2}' <<<$dep)
            echo "Install dependencies for $(awk -F'=' '{print $2}' <<<$dep)"
            npm install
            npm run build
            cd $crnt
          done
        working-directory: packages/${{ matrix.package }}
      - name: webpack cache
        uses: actions/cache@v3
        with:
          path: packages/${{ matrix.package }}/node_modules/.cache/webpack/
          key: ${{ matrix.package }}-${{ github.ref_name }}-webpack-build
          restore-keys: |
            ${{ matrix.package }}-master-webpack-build
      - name: Build package
        if: ${{ matrix.build == 'build' }}
        id: build
        run: |
          if [[ $(jq -r '. | select( has("scripts") == true ).scripts | select( has("build") == true ).build' "package.json") == "webpack" ]]; then
            npm run build -- --mode=production
          else
            npm run build
          fi
        working-directory: packages/${{ matrix.package }}
      - name: Install datagrok tools
        id: datagrok-tools
        run: |
          npm install -g datagrok-tools@latest
          echo ${{ matrix.docker_build }}
      - name: Wait for Datagrok to become available
        if: ${{ matrix.test == 'test' }}
        timeout-minutes: 5
        run: |
          until .github/scripts/check-output.sh "curl -s http://127.0.0.1:8080/api/info/server" '"Http Server"'
          do
            sleep 1
            docker logs --timestamps $(docker ps -q -f "label=com.docker.compose.project=datagrok" -f "label=com.docker.compose.service=datagrok")
            echo -e "\nRetrying..."
          done
          curl -s http://127.0.0.1:8080/api/info/server
          curl -s http://127.0.0.1:8080/api/admin/health
      - name: Create configuration for grok command-line tool
        if: ${{ matrix.test == 'test' }}
        run: |
          grok config add --default --alias ${HOST} --server 'http://127.0.0.1:8080/api' --key admin
          cat /home/runner/.grok/config.yaml
      - name: Install Grok Dependencies before package publish to Datagrok
        if: ${{ matrix.test == 'test' }}
        run: |
          grok_deps="$(jq  -r '. | select( has("devDependencies") == true ).devDependencies | to_entries[] | .key | select(test("@datagrok/.*")?)' package.json)"
          if [ -n "$grok_deps" ]; then
            for dep in $grok_deps; do
              current_dir=$(pwd)
              cd node_modules/$dep
              count=0
              retries=5
              echo "Publishing $dep to ${HOST}..."
              until grok publish ${HOST}; do
                exit=$?
                wait=$((2 ** count))
                count=$((count + 1))
                if [ $count -lt "$retries" ]; then
                  echo "Retry $count/$retries exited $exit, retrying 'grok publish ${HOST}' for $dep in $wait seconds..."
                  sleep $wait
                else
                  echo "Retry $count/$retries exited $exit, no more retries left for 'grok publish ${HOST}' for $dep."
                  exit $exit
                fi
              done
              cd $current_dir
            done
          fi
        working-directory: packages/${{ matrix.package }}
      - name: Publish package to Datagrok
        if: ${{ matrix.test == 'test' }}
        run: |
          count=0
          retries=5
          until grok publish ${HOST}; do
            exit=$?
            docker logs --timestamps --tail 100 $(docker ps -q -f "label=com.docker.compose.project=datagrok" -f "label=com.docker.compose.service=datagrok")
            wait=$((2 ** count))
            count=$((count + 1))
            if [ "$count" -lt "$retries" ]; then
              echo "Retry $count/$retries exited $exit, retrying 'grok publish ${HOST}' in $wait seconds..."
              sleep $wait
            else
              echo "Retry $count/$retries exited $exit, no more retries left for 'grok publish ${HOST}'."
              exit $exit
            fi
          done
        working-directory: packages/${{ matrix.package }}
      - name: Wait for published docker to become available
        if: matrix.docker != '' && steps.datagrok-image.outcome == 'success'
        timeout-minutes: 10
        run: |
          until .github/scripts/check-output.sh "docker ps" '${{ matrix.package }}'
          do
            sleep 1
            echo -e "\nContainer for ${{ matrix.package }} did not start..."
            echo -e "\n"
            docker ps -a
            echo -e "\n"
            echo -e "\ngrok_spawner logs:"
            docker logs --timestamps $(docker ps -q -f "label=com.docker.compose.project=datagrok" -f "label=com.docker.compose.service=grok_spawner")
            echo -e "\ndatagrok logs:"
            docker logs --timestamps $(docker ps -q -f "label=com.docker.compose.project=datagrok" -f "label=com.docker.compose.service=datagrok")
            echo -e "\ncurrent memory resources:"
            free -m
            echo -e "\n"
            echo -e "\nRetrying..."
          done

          echo -e "\nGet admin session token...\n"
          token=$(curl -s -X POST http://127.0.0.1:8080/api/users/login/dev/admin | jq -r .token)
          echo -e "\nGet containers for ${{ matrix.package }} from datlas API...\n"
          curl -s -H "Authorization: $token" 'http://127.0.0.1:8080/api/docker/containers?text=${{ matrix.package }}&limit=1'
          echo -e "\nGet ALL containers from datlas API...\n"
          curl -s -H "Authorization: $token" 'http://127.0.0.1:8080/api/docker/containers'
          echo -e "\nSelect ALL containers in DB...\n"
          docker exec datagrok-db-1 psql -U postgres -d datagrok -c 'select * from docker_containers;'

          echo -e "\nSet log level to debug...\n"
          docker exec datagrok-datagrok-1 sed -i 's/"userGroupSettings": {}/"userGroupSettings": {"a4b45840-9a50-11e6-9cc9-8546b8bf62e6": {"#type": "LoggerSettings","printLevels": ["error", "warning", "info", "debug"], "postLevels": ["error", "warning", "info", "audit", "usage"], "saveLevels": ["error", "warning", "audit", "usage"], "debugFlags": ["db"], "printDetails": false, "printDateTime": true, "printStackTraces": true, "printClientMessages": false}}/g' cfg/prod/logger.settings.json
          docker restart datagrok-datagrok-1
          until .github/scripts/check-output.sh "curl -s http://127.0.0.1:8080/api/info/server" '"Http Server"'
          do
            sleep 1
            echo -e "\nServer did not start yet..."
            echo -e "\nRetrying..."
          done
          echo -e "\nGet admin session token...\n"
          token=$(curl -s -X POST http://127.0.0.1:8080/api/users/login/dev/admin | jq -r .token)
          echo -e "\nGet containers for ${{ matrix.package }} from datlas API...\n"
          curl -s -H "Authorization: $token" 'http://127.0.0.1:8080/api/docker/containers?text=${{ matrix.package }}&limit=1'
          echo -e "\nGet ALL containers from datlas API...\n"
          curl -s -H "Authorization: $token" 'http://127.0.0.1:8080/api/docker/containers'
          echo -e "\nSelect ALL containers in DB...\n"
          docker exec datagrok-db-1 psql -U postgres -d datagrok -c 'select * from docker_containers;'
          echo -e "\nSelect ALL containers in DB as datlas API does...\n"
          docker exec datagrok-db-1 psql -U postgres -d datagrok -c 'SELECT docker_containers_e.namespace as "entity_docker_containers_namespace" , "docker_containers"."id" as "docker_containers_id", "docker_containers"."dockerfile_id" as "docker_containers_dockerfile_id", "docker_containers"."docker_image" as "docker_containers_docker_image", "docker_containers"."service_name" as "docker_containers_service_name", "docker_containers"."status" as "docker_containers_status", "docker_containers"."desired_instances" as "docker_containers_desired_instances", "docker_containers"."address" as "docker_containers_address", "docker_containers"."port" as "docker_containers_port", "docker_containers"."name" as "docker_containers_name", "docker_containers"."friendly_name" as "docker_containers_friendly_name", "docker_containers_author"."id" as "docker_containers_author_id", "docker_containers_author"."is_service" as "docker_containers_author_is_service", "docker_containers_author"."login" as "docker_containers_author_login", "docker_containers_author"."first_name" as "docker_containers_author_first_name", "docker_containers_author"."last_name" as "docker_containers_author_last_name", "docker_containers_author"."email_confirmed" as "docker_containers_author_email_confirmed", "docker_containers_author"."picture" as "docker_containers_author_picture", "docker_containers_author"."agreement_accept_date" as "docker_containers_author_agreement_accept_date", "docker_containers_author"."default_tag" as "docker_containers_author_default_tag", "docker_containers_author"."group_id" as "docker_containers_author_group_id", "docker_containers_author"."project_id" as "docker_containers_author_project_id", "docker_containers_author"."storage_connection_id" as "docker_containers_author_storage_id", "docker_containers_author"."status" as "docker_containers_author_status", "docker_containers_author"."joined" as "docker_containers_author_joined", "docker_containers_author"."has_password" as "docker_containers_author_has_password", "docker_containers_author"."name" as "docker_containers_author_name", "docker_containers_author"."friendly_name" as "docker_containers_author_friendly_name", "docker_containers_author"."picture_id" as "docker_containers_author_picture_id", "docker_containers"."created_on" as "docker_containers_created_on", "docker_containers"."updated_on" as "docker_containers_updated_on", "docker_containers_e"."package_id" as "docker_containers_package_id" FROM "docker_containers" as "docker_containers"  INNER JOIN entities docker_containers_e ON docker_containers_e.id = docker_containers.id and not docker_containers_e.is_deleted  LEFT JOIN "users" as "docker_containers_author"  INNER JOIN entities docker_containers_author_e ON docker_containers_author_e.id = docker_containers_author.id and not docker_containers_author_e.is_deleted  ON "docker_containers"."author_id"="docker_containers_author"."id";'
          echo -e "\nDatagrok logs...\n"
          docker logs datagrok-datagrok-1
          echo -e "\Grok Spawner logs...\n"
          docker logs datagrok-grok_spawner-1

      - name: Test Package
        if: ${{ matrix.test == 'test' }}
        continue-on-error: ${{ contains(matrix.package, 'Tests') }}
        timeout-minutes: 30
        id: test-package
        run: npm run test -- --skip-build --skip-publish --record --csv
        working-directory: packages/${{ matrix.package }}
      - name: Upload Artifact
        if: always() && steps.test-package.outcome != 'skipped'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.package }}.test-results
          path: |
            packages/${{ matrix.package }}/test-record.mp4
            packages/${{ matrix.package }}/test-report.csv
            packages/${{ matrix.package }}/test-console-output.log
          retention-days: 14
          if-no-files-found: warn
      - name: Create error notification
        if: failure() && steps.test-package.outcome == 'failure'
        run: |
          docker logs --timestamps $(docker ps -q -f "label=com.docker.compose.project=datagrok" -f "label=com.docker.compose.service=datagrok")
          echo "::error title=${{ matrix.package }}: failed tests::Check job output for details"
          echo "status=error" >> $GITHUB_OUTPUT

      - name: Cleanup datagrok stand
        if: steps.datagrok-image.outcome == 'success'
        run: |
          docker compose -p datagrok -f "docker/localhost.docker-compose.yaml" --profile all down --volumes
          docker system prune -af --volumes

      - name: Get docker image version
        if: matrix.docker_build == 'true'
        id: docker_name_ver
        working-directory: packages/${{ matrix.package }}
        run: |
          image_ver=$(jq -r .version package.json)
          if [[ "${{ matrix.publish }}" != "publish" ]]; then
            image_ver+="-${{ steps.datagrok-image.outputs.commit_sha }}"
          fi
          echo "image_ver=$image_ver" >> $GITHUB_OUTPUT
          echo "package_name=$(jq -r .name package.json | sed -e 's,@datagrok/,,g')" >> $GITHUB_OUTPUT

      - name: Build package Docker image
        if: steps.docker_name_ver.outcome == 'success'
        id: build-docker
        run: |
          for dockerfile in $(echo -e ${{ matrix.docker }}); do
            image_name=${{ steps.docker_name_ver.outputs.package_name }}
            if [[ $(dirname $dockerfile) != *"dockerfiles" ]]; then
              image_name+="-$(dirname $dockerfile | awk -F/ '{print $NF}')"
            fi
            docker buildx build \
              --tag datagrok/$image_name:${{ steps.docker_name_ver.outputs.image_ver }} \
              --cache-from type=registry,ref="datagrok/$image_name:cache" \
              --cache-to type=registry,ref="datagrok/$image_name:cache" \
              --output type=docker,dest=/tmp/$image_name_${{ steps.docker_name_ver.outputs.image_ver }}.tar
              --load $dockerfile
            image_tars+=" /tmp/$image_name_${{ steps.docker_name_ver.outputs.image_ver }}.tar"
            images+=" datagrok/$image_name:${{ steps.docker_name_ver.outputs.image_ver }}"
          done
          echo "images=$images" >> $GITHUB_OUTPUT
          echo "image_tars=image_tars" >> $GITHUB_OUTPUT

      - name: General checks
        run: |
          if [[ "$(jq '.name' package.json | sed -E 's/(^"|"$)//g')" != "@datagrok/"* ]]; then
            echo "::error title=${{ matrix.package }}: failed properties check::Package should be in '@datagrok' scope. Change package name to '@datagrok/<name>' in ${{ matrix.package }}/package.json"
            exit 1
          fi
          if [ ! -z "$(jq '. | select( has("beta") == true ).beta' package.json)" ]; then
            echo "::error title=${{ matrix.package }}: failed properties check::Remove beta property in ${{ matrix.package }}/package.json. It is deprecated."
            exit 1
          fi
        id: gen_checks
        working-directory: packages/${{ matrix.package }}

      - name: grok check
        if: ${{ !contains(matrix.package, 'Tests') && !contains(matrix.package, 'Meta') && matrix.beta != 'true' }}
        run: grok check
        id: check
        working-directory: packages/${{ matrix.package }}

      - name: Cleanup datagrok-tools
        if: steps.datagrok-tools.outcome == 'success'
        timeout-minutes: 15
        run: |
          npm uninstall -g datagrok-tools@latest

      - name: Publish to npm
        run: npm publish --access public
        id: publish
        working-directory: packages/${{ matrix.package }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: github.ref == 'refs/heads/master' && matrix.publish == 'publish' && (steps.build.outcome == 'success' || steps.build.outcome == 'skipped') && steps.gen_checks.outcome == 'success' && (steps.check.outcome == 'success' || steps.check.outcome == 'skipped') && steps.install.outcome == 'success' && (steps.test-package.outcome == 'success' || steps.test-package.outcome == 'skipped' || contains(matrix.package, 'Tests'))

      - name: Prepare Slack Message
        if: ${{ steps.publish.outcome == 'success' && !contains(matrix.package, 'Meta') }}
        id: slack-prepare
        shell: bash
        env:
          SLACK_ID: ${{ secrets.SLACK_ID }}
        run: |
          channel_id=$(echo "$SLACK_ID" | jq -r .\"${{ github.actor }}\")
          echo "::add-mask::$channel_id"
          echo SLACK_CHANNEL=$channel_id >> $GITHUB_ENV

          header="Package *${{ matrix.package }}* version *${{ matrix.version }}* published to <https://www.npmjs.com/package/$(jq -r .name "packages/${{ matrix.package }}/package.json")/v/${{ matrix.version }}|NPM>"
          echo SLACK_MESSAGE_HEADER=$header >> $GITHUB_ENV

          context="*GitHub Workflow:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }} ${{ github.run_number }}>\n*Commit:* <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|$(echo "${{ github.sha }}" | cut -c1-8) $(echo -e "${{ github.event.head_commit.message }}" | head -n1)>"
          echo SLACK_MESSAGE_CONTEXT=$context >> $GITHUB_ENV

      - name: Send to Slack
        id: slack
        if: steps.slack-prepare.outcome == 'success'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ env.SLACK_CHANNEL }}
          payload: |
            {
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "${{ env.SLACK_MESSAGE_HEADER }}"
                        }
                    },
                    {
                        "type": "context",
                        "elements": [
                            {
                                "type": "mrkdwn",
                                "text": "${{ env.SLACK_MESSAGE_CONTEXT }}"
                            }
                        ]
                    }
                ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACKBOT_TOKEN }}

#      - name: Upload Docker image as artifact
#        if: steps.build-docker.outcome == 'success' && (steps.publish.outcome == 'failure' || steps.publish.outcome == 'skipped')
#        uses: ishworkh/docker-image-artifact-upload@v1
#        with:
#          image: "datagrok/${{ steps.docker_name_ver.outputs.package_name }}:${{ steps.docker_name_ver.outputs.image_ver }}"

      - uses: actions/upload-artifact@v3
        if: steps.build-docker.outcome == 'success' && (steps.publish.outcome == 'failure' || steps.publish.outcome == 'skipped')
        with:
          path: ${{ steps.build-docker.outputs.image_tars }}

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: steps.publish.outcome == 'success' && steps.build-docker.outcome == 'success'

#      - name: Build and push package Docker image
#        if: steps.publish.outcome == 'success' && steps.build-docker.outcome == 'success'
#        uses: docker/build-push-action@v3
#        with:
#          context: packages/${{ matrix.package }}/dockerfiles
#          push: true
#          tags: datagrok/${{ steps.docker_name_ver.outputs.package_name }}:${{ steps.docker_name_ver.outputs.image_ver }}

      - name: Publish package Docker image
        if: steps.publish.outcome == 'success' && steps.build-docker.outcome == 'success'
        id: publish-docker
        run: |
          for image in $(echo -e ${{ steps.build-docker.outputs.images }}); do
            docker push $image
          done

      - name: Commit package-lock.json
        id: git
        continue-on-error: true
        if: steps.publish.outcome == 'success' || steps.package-lock.outcome == 'success'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git pull
          continue=false
          if [ -n "$(git status -s packages/${{ matrix.package }}/package-lock.json)" ]; then
            git add packages/${{ matrix.package }}/package-lock.json
            skip_ci=""
            if [ ${{ github.ref }} == 'refs/heads/master' ]; then
              skip_ci="[skip ci]"
            fi
            git commit -m "GitHub Actions: Update packages/${{ matrix.package }}/package-lock.json $skip_ci

            Workflow ${{ github.workflow }} ${{ github.run_number }}
            https://github.com/datagrok-ai/public/actions/runs/${{ github.run_id }}"
            continue=true
          fi
          if [[ "${continue}" == "true" ]]; then
            count=0
            retries=10
            until git push; do
              exit=$?
              wait=$((2 ** count))
              count=$((count + 1))
              if [ $count -lt "$retries" ]; then
                echo "Retry $count/$retries exited $exit, retrying 'git push' in $wait seconds..."
                sleep $wait
                git pull --rebase
              else
                echo "Retry $count/$retries exited $exit, no more retries left for 'git push'."
                exit $exit
              fi
            done
          fi

      - name: Trigger help update
        continue-on-error: true
        if: steps.publish.outcome == 'success'
        run: gh workflow run docusaurus.yaml --ref ${{ github.ref }}
        env:
          GH_TOKEN: ${{ github.token }}
