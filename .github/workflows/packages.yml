name: Packages
on:
  workflow_dispatch:
    inputs:
      packages:
        description: 'Packages separated by spaces'
        required: true
        type: string
  push:
    paths:
      - 'packages/**'

jobs:
  metadata:
    name: Check changes
    runs-on: ubuntu-20.04
    outputs:
      matrix_test: ${{ steps.generate-matrix.outputs.matrix_test }}
      matrix_publish: ${{ steps.generate-matrix.outputs.matrix_publish }}
      test: ${{ steps.generate-matrix.outputs.test }}
      publish: ${{ steps.generate-matrix.outputs.publish }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 3
      - name: Generate matrix
        id: generate-matrix
        run: |
          if [[ $(git log -n 1 --pretty=%B) == *"Merge branch 'master' of"* ]]; then
            commit="$(git log --format="%H" -n 1 --no-merges)"
          else
            commit=${{ github.sha }}
          fi

          CHANGED_PACKAGES="$(git diff-tree --no-commit-id --name-only -r "$(echo -n "$commit")" 'packages/**' | xargs -I {} dirname {} | awk -F'/' '{print $2}' | sort -u)"
          MATRIX_PUBLISH_JSON="["
          MATRIX_TEST_JSON="["

          for p in ${{ github.event.inputs.packages }}; do
            CHANGED_PACKAGES+=" $p"
          done

          for PACKAGE in $(echo ${CHANGED_PACKAGES} | sort -u); do
            DIR="packages/${PACKAGE}"
            if [ -f "${DIR}/package.json" ]; then
              scripts="$(jq  '. | select( has("scripts") == true ).scripts' "${DIR}/package.json")"

              dependencies="$(jq  '(. | select( has("dependencies") == true ).dependencies) * (. | select( has("devDependencies") == true ).devDependencies)' "${DIR}/package.json")"

              if [ ! -z "$(jq  '. | select( has("test") == true )' <<< "$scripts")" ]; then
                datagrok_api_version=$(jq '."datagrok-api"' <<<$dependencies | sed 's/["^>=]//g')
                MATRIX_TEST_JSON+="{\"package\": \"${PACKAGE}\", \"datagrok_version\": \"${datagrok_api_version}\"}"
                if [[ "$datagrok_api_version" != 'latest' ]]; then
                  MATRIX_TEST_JSON+="{\"package\": \"${PACKAGE}\", \"datagrok_version\": \"latest\"}"
                fi
              fi

              name="$(jq .name "${DIR}/package.json" | sed 's/"//g')"
              current_version="$(jq .version "${DIR}/package.json" | sed 's/"//g')"
              npm_json="$(curl --retry 3 -s "https://registry.npmjs.org/${name}/${current_version}")"
              if [[ $npm_json == "\"version not found: ${current_version}\"" ]]; then
                if [ -z "$(jq  '. | select( has("build") == true )' <<< "$scripts")" ]; then
                  build='false'
                else
                  build='true'
                fi
                if [ -z "$(jq  '. | select( has("datagrok-api") == true )' <<< "$dependencies")" ]; then
                  install_jsapi='false'
                else
                  install_jsapi='true'
                fi
                if [ -z "$(jq  '. | select( has("datagrok-tools") == true )' <<< "$dependencies")" ]; then
                  install_tools='false'
                else
                  install_tools='true'
                fi
                MATRIX_PUBLISH_JSON+="{\"package\": \"${PACKAGE}\", \"build\": \"${build}\", \"install_jsapi\": \"${install_jsapi}\", \"install_tools\": \"${install_tools}\"}"
              fi
            fi
          done

          MATRIX_PUBLISH_JSON="${MATRIX_PUBLISH_JSON//\}\{/\}, \{}"
          MATRIX_PUBLISH_JSON+="]"
          MATRIX_TEST_JSON="${MATRIX_TEST_JSON//\}\{/\}, \{}"
          MATRIX_TEST_JSON+="]"

          PUBLISH_JSON="{\"include\": ${MATRIX_PUBLISH_JSON}}"
          TEST_JSON="{\"include\": ${MATRIX_TEST_JSON}}"

          CONTINUE_TEST_JOB="no"
          if [[ "${MATRIX_TEST_JSON}" != "[]" ]]; then
            CONTINUE_TEST_JOB="yes"
          fi
          CONTINUE_PUBLISH_JOB="no"
          if [[ "${MATRIX_PUBLISH_JSON}" != "[]" ]]; then
            CONTINUE_PUBLISH_JOB="yes"
          fi
          echo '::echo::on'
          echo "::set-output name=test::${CONTINUE_TEST_JOB}"
          echo "::set-output name=publish::${CONTINUE_PUBLISH_JOB}"
          echo "::set-output name=matrix_test::${TEST_JSON}"
          echo "::set-output name=matrix_publish::${PUBLISH_JSON}"
          echo '::echo::off'

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: metadata
    if: needs.metadata.outputs.test == 'yes'
    env:
      HOST: GitHubAction
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix: ${{ fromJson(needs.metadata.outputs.matrix_test) }}
    steps:
      - uses: actions/checkout@v2
      - name: Set Datagrok image version
        id: datagrok-image
        run: |
          v=${{ matrix.datagrok_version }}
          
          if [[ ${{ matrix.datagrok_version }} != 'latest' ]]; then
            major=$(awk -F. '{print $1}' <<<"$v")
            minor=$(awk -F. '{print $2}' <<<"$v")
            filter=$(sed 's/\./\\\\./g' <<< $v)

            latest_images=$(curl --retry 5 -s -S \
              "https://registry.hub.docker.com/v2/repositories/datagrok/datagrok/tags?page_size=100")

            tag=null
            count=10
            while [[ "$tag" == "null" ]] && [ $count -gt 0 ]; do
              tag=$(jq "[.results[] | select(.name | test(\"${major}\\\.${minor}\\\.0\"))] | sort_by(.tag_last_pushed) | .[0].name" <<<$latest_images)
              let 'minor = minor + 1'
              count=$((count - 1))
            done

            if [[ "$tag" == "null" ]] && [ $count -eq 0 ]; then
              echo "::error title=${{ matrix.package }}: failed tests::Could not find compatible Datagrok image version for package ${{ matrix.package }}";
              exit 1
            fi
          else
            tag=$v
          fi

          tag="$(sed s/\"//g <<<$tag)"

          commit_sha=$(echo ${{ github.sha }} | cut -c1-8)

          sed -i "s,datagrok/datagrok:latest,datagrok/datagrok:$tag,g" docker/localhost.docker-compose.yaml
          echo "::set-output name=version::$tag"
          echo "::set-output name=commit_sha::$commit_sha"
          echo "::notice title=${{ matrix.package }}::datagrok/datagrok:$tag docker version was used for tests"
      - name: Run Datagrok
        id: datagrok-setup
        #        run: docker-compose -p datagrok -f "docker/localhost.docker-compose.yaml" --profile datagrok --profile db --profile cvm up -d
        run: docker-compose -p datagrok -f "docker/localhost.docker-compose.yaml" --profile datagrok --profile db up -d
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@datagrok'
      - name: Upgrade npm
        run: npm install -g npm@latest
      - name: npm version
        run: npm version
      - name: Install npm dependencies
        run: npm install
        working-directory: packages/${{ matrix.package }}
      - name: Install datagrok tools
        run: npm install -g datagrok-tools@latest
        working-directory: ./tools
      - name: Build package with webpack
        run: webpack
        working-directory: packages/${{ matrix.package }}
      - name: Wait for Datagrok to become available
        timeout-minutes: 5
        run: |
          until curl -s http://localhost:8080/api/admin/health | grep -e '"status":"Running"'
          do
            sleep 1
          done
      - name: Create configuration for grok command-line tool
        run: echo 'N' | grok config add --default --alias ${HOST} --server 'http://localhost:8080/api' --key admin
      - name: Publish package to Datagrok
        run: grok publish ${HOST}
        working-directory: packages/${{ matrix.package }}
      - name: Test Package
        id: test-package
        run: |
          npm run test -- --verbose=false
        env:
          JEST_HTML_REPORTER_PAGE_TITLE: "${{ matrix.package }} Test Report. Datagrok version datagrok/datagrok:${{ steps.datagrok-image.outputs.version }}. Commit ${{ steps.datagrok-image.outputs.commit_sha }}."
          JEST_HTML_REPORTER_OUTPUT_PATH: "./test-${{ matrix.package }}-${{ steps.datagrok-image.outputs.version }}-${{ steps.datagrok-image.outputs.commit_sha }}.html"
          JEST_HTML_REPORTER_INCLUDE_FAILURE_MSG: true
          JEST_HTML_REPORTER_INCLUDE_CONSOLE_LOG: true
          JEST_HTML_REPORTER_INCLUDE_SUITE_FAILURE: true
        working-directory: packages/${{ matrix.package }}
      - name: Create error notification
        if: failure() && steps.test-package.outcome == 'failure'
        run: |
          echo "::error title=${{ matrix.package }}: failed tests with datagrok:${{ steps.datagrok-image.outputs.version }}::Check test-${{ matrix.package }}-${{ steps.datagrok-image.outputs.version }}-${{ steps.datagrok-image.outputs.commit_sha }}.html report for results"
          echo "::set-output name=status::error"
      - name: Upload Artifact
        if: always() && (steps.test-package.outcome == 'failure' || steps.test-package.outcome == 'success')
        uses: actions/upload-artifact@v2
        with:
          name: test-${{ matrix.package }}-${{ steps.datagrok-image.outputs.version }}-${{ steps.datagrok-image.outputs.commit_sha }}.html
          path: packages/${{ matrix.package }}/test-${{ matrix.package }}-${{ steps.datagrok-image.outputs.version }}-${{ steps.datagrok-image.outputs.commit_sha }}.html
          retention-days: 7
      #      - name: Create GitHub Action status for package
      #        run: |
      #          if [ "${{ steps.test-package.outputs.status }}" == "error" ]; then
      #            MESSAGE='Tests failed, please view logs'
      #          else
      #            MESSAGE='Package passed all tests'
      #          fi
      #          curl -f -s -X POST \
      #            --url "https://api.github.com/repos/${{ github.repository }}/statuses/${{ steps.datagrok-image.outputs.commit_sha }}" \
      #            -H 'accept: application/vnd.github.v3+json' \
      #            -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #            -H 'content-type: application/json' \
      #            -d "{ \"state\": \"${{ steps.test-package.outputs.status }}\",
      #            \"target_url\": \"https://github.com/${{ github.repository }}/actions/runs/${GITHUB_RUN_ID}\",
      #            \"description\": \"${MESSAGE}\", \"context\": \"--> Tested: ${{ matrix.package }} on datagrok:${{ steps.datagrok-image.outputs.version }}\"
      #            }"
      - name: Stop Datagrok
        if: always() && (steps.datagrok-setup.outcome == 'failure' || steps.datagrok-setup.outcome == 'success')
        run: docker-compose -p datagrok -f "docker/localhost.docker-compose.yaml" --profile datagrok down --volumes

  publish:
    name: Publish to npm
    needs:
      - metadata
      - test
    if: github.ref == 'refs/heads/master' && needs.metadata.outputs.publish == 'yes'
    runs-on: ubuntu-20.04
    environment: Prod
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix: ${{ fromJson(needs.metadata.outputs.matrix_publish) }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.WRITE_TOKEN }}
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@datagrok'
      - name: Upgrade npm
        run: npm install -g npm@latest
      - name: npm version
        run: npm version
      - run: npm install
        working-directory: packages/${{ matrix.package }}
      - name: js-api dependencies
        run: npm install
        working-directory: ./js-api
        if: ${{ matrix.install_jsapi == 'true' }}
      - name: tools dependencies
        run: npm install
        working-directory: ./tools
        if: ${{ matrix.install_tools == 'true' }}
      - run: npm run test
        working-directory: packages/${{ matrix.package }}
        if: ${{ matrix.test == 'true' }}
        continue-on-error: true
      - run: npm run build
        working-directory: packages/${{ matrix.package }}
        if: ${{ matrix.build == 'true' }}
      - run: npm publish --access public
        working-directory: packages/${{ matrix.package }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Commit package-lock.json
        run: |
          if [ -n "$(git status -s packages/${{ matrix.package }}/package-lock.json)" ]; then
            git config --global user.name 'GitHub Actions'
            git config --global user.email 'spodolskaya@datagrok.ai'
            git pull
            git add packages/${{ matrix.package }}/package-lock.json
            git commit -m "GitHub Actions: Update packages/${{ matrix.package }}/package-lock.json [skip ci]"
            count=0
            retries=10
            until git push; do
              exit=$?
              wait=$((2 ** count))
              count=$((count + 1))
              if [ $count -lt "$retries" ]; then
                echo "Retry $count/$retries exited $exit, retrying 'git push' in $wait seconds..."
                sleep $wait
                git pull --rebase
              else
                echo "Retry $count/$retries exited $exit, no more retries left for 'git push'."
                exit $exit
              fi
            done
          fi
