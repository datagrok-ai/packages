name: Packages
on:
  workflow_dispatch:
    inputs:
      packages:
        description: 'Packages separated by spaces'
        required: true
        type: string
  push:
    paths:
      - 'packages/**'

jobs:
  matrix:
    name: Check changes
    runs-on: ubuntu-20.04
    outputs:
      matrix_test: ${{ steps.generate-matrix.outputs.matrix_test }}
      matrix_publish: ${{ steps.generate-matrix.outputs.matrix_publish }}
      test: ${{ steps.generate-matrix.outputs.test }}
      publish: ${{ steps.generate-matrix.outputs.publish }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - name: Generate matrix
        id: generate-matrix
        run: |
          if [[ "${{ github.event.inputs.packages }}" == "" ]]; then
            if [[ $(git log -n 1 --pretty=%B) == *"Merge branch 'master' of"* ]]; then
              commit="$(git log --format="%H" -n 1 --no-merges)"
            else
              commit=${{ github.sha }}
            fi
            CHANGED_PACKAGES="$(git diff-tree -m --no-commit-id --name-only -r "$(echo -n "$commit")" 'packages/**' | xargs -I {} dirname {} | awk -F'/' '{print $2}' | sort -u)"
          else
            CHANGED_PACKAGES="${{ github.event.inputs.packages }}"
          fi

          MATRIX_PUBLISH_JSON="["

          for PACKAGE in $(echo ${CHANGED_PACKAGES} | sort -u); do
            DIR="packages/${PACKAGE}"
            if [ -f "${DIR}/package.json" ]; then
              MATRIX_PUBLISH_JSON+="{\"package\": \"${PACKAGE}\""

              scripts="$(jq  '. | select( has("scripts") == true ).scripts' "${DIR}/package.json")"
              dependencies="$(jq  '(. | select( has("dependencies") == true ).dependencies) * (. | select( has("devDependencies") == true ).devDependencies)' "${DIR}/package.json")"

              if [ ! -z "$(jq  '. | select( has("test") == true )' <<< "$scripts")" ]; then
                MATRIX_PUBLISH_JSON+=", \"test\": \"true\""
              fi

              if [ ! -z "$(jq  '. | select( has("build") == true )' <<< "$scripts")" ]; then
                MATRIX_PUBLISH_JSON+=", \"build\": \"true\""
              fi

              name="$(jq .name "${DIR}/package.json" | sed -E 's/(^"|"$)//g')"
              current_version="$(jq .version "${DIR}/package.json" | sed -E 's/(^"|"$)//g')"
              npm_json="$(curl --retry 3 -s "https://registry.npmjs.org/${name}/${current_version}")"
              if [[ $npm_json == "\"version not found: ${current_version}\"" ]] || [[ $npm_json == "\"Not Found\"" ]]; then

                if [ "$(awk -F. '{print $1}' <<<$current_version)" -gt "0" ]; then
                  MATRIX_PUBLISH_JSON+=", \"publish\": \"true\""
                else
                  echo "::notice title=${PACKAGE}::Version ${current_version} is under 1.0.0 and is not going to be published"
                fi

                if [ ! -z "$(jq  '. | select( has("datagrok-api") == true )' <<< "$dependencies")" ]; then
                  MATRIX_PUBLISH_JSON+=", \"install_jsapi\": \"true\""
                fi
                if [ ! -z "$(jq  '. | select( has("datagrok-tools") == true )' <<< "$dependencies")" ]; then
                  MATRIX_PUBLISH_JSON+=", \"install_tools\": \"true\""
                fi
              fi

              MATRIX_PUBLISH_JSON+="}"
            fi
          done

          MATRIX_PUBLISH_JSON="${MATRIX_PUBLISH_JSON//\}\{/\}, \{}"
          MATRIX_PUBLISH_JSON+="]"

          PUBLISH_JSON="{\"include\": ${MATRIX_PUBLISH_JSON}}"

          CONTINUE_PUBLISH_JOB="no"
          if [[ "${MATRIX_PUBLISH_JSON}" != "[]" ]]; then
            CONTINUE_PUBLISH_JOB="yes"
          fi
          echo '::echo::on'
          echo "::set-output name=publish::${CONTINUE_PUBLISH_JOB}"
          echo "::set-output name=matrix_publish::${PUBLISH_JSON}"
          echo '::echo::off'

  publish:
    name: Test and publish to npm
    needs:
      - matrix
    if: needs.matrix.outputs.publish == 'yes'
    runs-on: ubuntu-20.04
    environment: Prod
    env:
      HOST: GitHubAction
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.matrix_publish) }}
    outputs:
      push: ${{ steps.info.outputs.push }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.WRITE_TOKEN }}
      - name: Check package properties
        id: check
        working-directory: packages/${{ matrix.package }}
        run: |
          if [ -z "$(jq '. | select( has("repository") == true ).repository' package.json)" ]; then
            echo "::error title=${{ matrix.package }}: failed properties check::Add repository property to ${{ matrix.package }}/package.json"
            exit 1
          fi
          if [[ "$(jq '.name' package.json | sed -E 's/(^"|"$)//g')" != "@datagrok/"* ]]; then
            echo "::error title=${{ matrix.package }}: failed properties check::Package should be in '@datagrok' scope. Change package name to '@datagrok/<name>' in ${{ matrix.package }}/package.json"
            exit 1
          fi
          if [ ! -z "$(jq '. | select( has("beta") == true ).beta' package.json)" ]; then
            echo "::error title=${{ matrix.package }}: failed properties check::Remove beta property in ${{ matrix.package }}/package.json. It is deprecated."
            exit 1
          fi
      - name: Run datagrok stand
        id: datagrok-image
        if: ${{ matrix.test == 'true' }}
        run: |
          commit_sha=$(echo ${{ github.sha }} | cut -c1-8)
          echo "::set-output name=commit_sha::$commit_sha"
          docker-compose -p datagrok -f "docker/localhost.docker-compose.yaml" --profile datagrok --profile db up -d
          docker_sha=$(docker images --quiet datagrok/datagrok:latest)
          echo "::set-output name=docker_sha::$docker_sha"
          echo "::notice title=${{ matrix.package }}::datagrok/datagrok:latest SHA=$docker_sha docker version was used for tests"
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@datagrok'
      - name: Upgrade npm
        run: npm install -g npm@latest
      - name: npm version
        run: npm version
      - run: npm install
        id: install
        working-directory: packages/${{ matrix.package }}
      - name: js-api dependencies
        run: npm install
        working-directory: ./js-api
        if: ${{ matrix.install_jsapi == 'true' }}
      - name: tools dependencies
        run: npm install
        working-directory: ./tools
        if: ${{ matrix.install_tools == 'true' }}
      - name: Build package
        if: ${{ matrix.build == 'true' }}
        id: build
        run: npm run build
        working-directory: packages/${{ matrix.package }}
      - name: Install datagrok tools
        if: ${{ matrix.test == 'true' }}
        run: npm install -g datagrok-tools@latest
      - name: Wait for Datagrok to become available
        if: ${{ matrix.test == 'true' }}
        timeout-minutes: 5
        run: |
          until curl -s http://localhost:8080/api/admin/health | grep -e '"status":"Running"'
          do
            sleep 1
          done
      - name: Create configuration for grok command-line tool
        if: ${{ matrix.test == 'true' }}
        run: |
          echo 'N' | grok config add --default --alias ${HOST} --server 'http://localhost:8080/api' --key admin
          cat /home/runner/.grok/config.yaml
      - name: Publish package to Datagrok
        if: ${{ matrix.test == 'true' }}
        run: grok publish ${HOST}
        working-directory: packages/${{ matrix.package }}
      - name: Test Package
        if: ${{ matrix.test == 'true' }}
        timeout-minutes: 60
        id: test-package
        run: npm run test -- --verbose=false
        env:
          JEST_HTML_REPORTER_PAGE_TITLE: "${{ matrix.package }} Test Report. Datagrok version datagrok/datagrok:latest SHA=${{ steps.datagrok-image.outputs.docker_sha }}. Commit ${{ steps.datagrok-image.outputs.commit_sha }}."
          JEST_HTML_REPORTER_OUTPUT_PATH: "./test-${{ matrix.package }}-${{ steps.datagrok-image.outputs.docker_sha }}-${{ steps.datagrok-image.outputs.commit_sha }}.html"
          JEST_HTML_REPORTER_INCLUDE_FAILURE_MSG: true
          JEST_HTML_REPORTER_INCLUDE_CONSOLE_LOG: true
          JEST_HTML_REPORTER_INCLUDE_SUITE_FAILURE: true
        working-directory: packages/${{ matrix.package }}
      - name: Create error notification
        if: failure() && steps.test-package.outcome == 'failure'
        run: |
          echo "::error title=${{ matrix.package }}: failed tests with datagrok:latest SHA=${{ steps.datagrok-image.outputs.docker_sha }}::Check test-${{ matrix.package }}-${{ steps.datagrok-image.outputs.docker_sha }}-${{ steps.datagrok-image.outputs.commit_sha }}.html report for results"
          echo "::set-output name=status::error"

      - name: Upload Artifact
        if: always() && (steps.test-package.outcome == 'failure' || steps.test-package.outcome == 'success')
        uses: actions/upload-artifact@v2
        with:
          name: test-${{ matrix.package }}-${{ steps.datagrok-image.outputs.docker_sha }}-${{ steps.datagrok-image.outputs.commit_sha }}.html
          path: packages/${{ matrix.package }}/test-${{ matrix.package }}-${{ steps.datagrok-image.outputs.docker_sha }}-${{ steps.datagrok-image.outputs.commit_sha }}.html
          retention-days: 7
      - name: Publish to npm
        run: npm publish --access public
        id: publish
        working-directory: packages/${{ matrix.package }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: github.ref == 'refs/heads/master' && always() && matrix.publish == 'true' && (steps.build.outcome == 'success' || steps.build.outcome == 'skipped') && steps.check.outcome == 'success' && steps.install.outcome == 'success'
      - name: Get package information
        id: info
        if: always() && steps.publish.outcome == 'success' && matrix.package != 'Meta'
        working-directory: packages/${{ matrix.package }}
        run: |
          dependencies="$(jq  '(. | select( has("dependencies") == true ).dependencies) * (. | select( has("devDependencies") == true ).devDependencies)' package.json)"          
          deps=''
          if [[ "${{ matrix.install_jsapi }}" == "true" ]]; then
            deps+="datagrok-api:$(jq '."datagrok-api"' <<<$dependencies | sed -E 's/(^"|"$)//g') "
          fi
          mkdir gh-cache
          echo "$(jq .name package.json | sed -E -e 's/(^"|"$)//g' -e 's,@datagrok/,,g')" >> gh-cache/${{ matrix.package }}.name.txt
          echo "$(jq .description package.json | sed -E 's/(^"|"$)//g')" >> gh-cache/${{ matrix.package }}.description.txt
          echo "$(jq '. | select( has("repository") == true ).repository' package.json)" >> gh-cache/${{ matrix.package }}.repository.txt
          echo "$(jq '. | select( has("category") == true ).category' package.json | sed -E 's/(^"|"$)//g')" >> gh-cache/${{ matrix.package }}.category.txt
          echo "$(jq .version package.json | sed -E 's/(^"|"$)//g')" >> gh-cache/${{ matrix.package }}.version.txt
          echo "${deps}" >> gh-cache/${{ matrix.package }}.dependencies.txt
          echo "::set-output name=push::yes"
      - name: Upload artifact with package information
        id: cache
        if: always() && steps.info.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: info-${{ matrix.package }}
          path: |
            packages/${{ matrix.package }}/gh-cache/${{ matrix.package }}.name.txt
            packages/${{ matrix.package }}/gh-cache/${{ matrix.package }}.description.txt
            packages/${{ matrix.package }}/gh-cache/${{ matrix.package }}.version.txt
            packages/${{ matrix.package }}/gh-cache/${{ matrix.package }}.dependencies.txt
            packages/${{ matrix.package }}/gh-cache/${{ matrix.package }}.repository.txt
            packages/${{ matrix.package }}/gh-cache/${{ matrix.package }}.category.txt
          retention-days: 1
      - name: Commit package-lock.json
        id: git
        continue-on-error: true
        if: always() && steps.publish.outcome == 'success'
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github_actions@datagrok.ai'
          git pull
          continue=false
          if [ -n "$(git status -s packages/${{ matrix.package }}/package-lock.json)" ]; then
            git add packages/${{ matrix.package }}/package-lock.json
            git commit -m "GitHub Actions: Update packages/${{ matrix.package }}/package-lock.json [skip ci]"
            continue=true
          fi
          if [[ "${continue}" == "true" ]]; then
            count=0
            retries=10
            until git push; do
              exit=$?
              wait=$((2 ** count))
              count=$((count + 1))
              if [ $count -lt "$retries" ]; then
                echo "Retry $count/$retries exited $exit, retrying 'git push' in $wait seconds..."
                sleep $wait
                git pull --rebase
              else
                echo "Retry $count/$retries exited $exit, no more retries left for 'git push'."
                exit $exit
              fi
            done
          fi
      - name: Stop Datagrok
        if: always() && (steps.datagrok-image.outcome == 'failure' || steps.datagrok-image.outcome == 'success')
        run: docker-compose -p datagrok -f "docker/localhost.docker-compose.yaml" --profile all down --volumes

  metadata:
    name: Upgrade Meta package
    needs:
      - publish
    if: always() && needs.publish.outputs.push == 'yes'
    runs-on: ubuntu-20.04
    environment: Prod
    steps:
      - name: Set branch parameter
        id: branch
        run: |
          branch=$(echo ${GITHUB_REF#refs/heads/})
          echo "::set-output name=branch::${branch}"
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.WRITE_TOKEN }}
          branch: ${{ steps.branch.outputs.branch }}
      - name: Download all workflow run artifacts
        id: download
        uses: actions/download-artifact@v3
        with:
          path: gh-cache
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@datagrok'
      - name: Upgrade npm
        run: npm install -g npm@latest
      - name: npm version
        run: npm version
      - name: Bump Meta package
        working-directory: packages/Meta
        run: |
          current_version=$(jq .version package.json | sed -E 's/(^"|"$)//g')
          patch=$(cut -d. -f3 <<<$current_version)
          minor=$(cut -d. -f2 <<<$current_version)
          major=$(cut -d. -f1 <<<$current_version)
          upgrade='patch'
          if [ "${patch}" -gt "98" ]; then
            upgrade='minor'
          fi
          if [ "${minor}" -gt "98" ]; then
            upgrade='major'
          fi
          npm version $upgrade
      - name: Build Meta package
        working-directory: packages/Meta
        run: |
          npm install
          npm run build
      - name: Add new packages to Meta package
        id: add
        working-directory: packages/Meta
        run: |
          packages=$(find $GITHUB_WORKSPACE/gh-cache -mindepth 1 -maxdepth 1 -type d -name info-* -printf '%P '| sed 's/info-//g')
          echo "::set-output name=packages::$packages"
          for package in $packages; do
            path="$GITHUB_WORKSPACE/gh-cache/info-${package}"
            name=$(cat ${path}/${package}.name.txt)
            description="$(cat ${path}/${package}.description.txt)"
            version=$(cat ${path}/${package}.version.txt)
            repository=$(cat ${path}/${package}.repository.txt)
            category=$(cat ${path}/${package}.category.txt)
            grok_args=(add --package "${name}" --description "${description}" --ver "${version}" --category "${category}" --repository "${repository}")
            dependencies=$(cat ${path}/${package}.dependencies.txt)
            if [ -z "${dependencies}" ]; then
               bin/grok-meta.js "${grok_args[@]}"
            else
              for d in ${dependencies}; do
                dep=$(cut -d: -f1 <<<$d)
                depver=$(cut -d: -f2 <<<$d)
                dep_args=(--dep "$dep" --depver "$depver")
                bin/grok-meta.js "${grok_args[@]}" "${dep_args[@]}"
              done
            fi
          done

      - name: Commit Meta package.json
        id: git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github_actions@datagrok.ai'
          git pull
          continue=false
          if [ -n "$(git status -s packages/Meta/package.json)" ]; then
            git add packages/Meta/package.json
            git add packages/Meta/package-lock.json
            git commit -m "GitHub Actions: Bump Meta package version for ${{ steps.add.outputs.packages }}"
            continue=true
          fi
          if [[ "${continue}" == "true" ]]; then
            count=0
            retries=10
            until git push; do
              exit=$?
              wait=$((2 ** count))
              count=$((count + 1))
              if [ $count -lt "$retries" ]; then
                echo "Retry $count/$retries exited $exit, retrying 'git push' in $wait seconds..."
                sleep $wait
                git pull --rebase
              else
                echo "Retry $count/$retries exited $exit, no more retries left for 'git push'."
                exit $exit
              fi
            done
            echo "::set-output name=push::yes"
          fi
