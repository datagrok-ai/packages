name: JS API Package
on:
  workflow_dispatch: { }
  push:
    paths:
      - 'js-api/**'
jobs:
  version:
    name: Check version was changed
    runs-on: ubuntu-20.04
    outputs:
      changed_version: ${{ steps.check-version.outputs.changed_version }}
      matrix: ${{ steps.packages.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check version was changed
        id: check-version
        working-directory: ./js-api
        run: |
          name="$(jq .name package.json | sed 's/"//g')"
          current_version="$(jq .version package.json | sed 's/"//g')"
          npm_version="$(curl --retry 3 -s "https://registry.npmjs.org/${name}/${current_version}" | jq -r '.? | select( has("version") == true ).version')"
          if [[ $npm_version == ${current_version} ]]; then
            changed_version='false'
          else
            changed_version='true'
          fi
          echo '::echo::on'
          echo "::set-output name=changed_version::${changed_version}"
          echo '::echo::off'
      - name: Check version was changed
        id: packages
        run: |
          MATRIX_JSON="["
          for PACKAGE in $(grep -lr datagrok-api packages/*/package.json | awk -F'/' '{print $2}' | sort -u); do
            MATRIX_JSON+="{\"package\": \"${PACKAGE}\""

            DIR="packages/${PACKAGE}"
            if [ -f "${DIR}/package.json" ]; then
              scripts="$(jq  '. | select( has("scripts") == true ).scripts' "${DIR}/package.json")"
              if [ ! -z "$(jq  '. | select( has("build") == true )' <<< "$scripts")" ]; then
                MATRIX_JSON+=", \"build\": \"true\""
              fi
            fi
            MATRIX_JSON+="}"
          done

          MATRIX_JSON="${MATRIX_JSON//\}\{/\}, \{}"
          MATRIX_JSON+="]"
          JSON="{\"include\": ${MATRIX_JSON}}"
          echo "::set-output name=matrix::${JSON}"

  build:
    name: Build and publish to npm
    runs-on: ubuntu-20.04
    needs: version
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.WRITE_TOKEN }}
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Upgrade npm
        run: npm install -g npm@x
      - name: npm version
        run: npm version
      - run: npm install
        working-directory: ./js-api
      - run: npm run build
        working-directory: ./js-api
      - run: npm run build-ts
        working-directory: ./js-api
      - run: npm publish
        working-directory: ./js-api
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: needs.version.outputs.changed_version == 'true'
      - name: Commit package-lock.json
        continue-on-error: true
        if: github.ref == 'refs/heads/master' && needs.version.outputs.changed_version == 'true'
        run: |
          if [ -n "$(git status -s js-api/package-lock.json)" ]; then
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git pull
            git add js-api/package-lock.json
            git commit -m 'GitHub Actions: Update js-api/package-lock.json [skip ci]

            Workflow ${{ github.workflow }} ${{ github.run_number }}
            https://github.com/datagrok/public/actions/runs/${{ github.run_id }}'
            count=0
            until git push; do
              exit=$?
              wait=$((2 ** count))
              count=$((count + 1))
              if [ $count -lt "10" ]; then
                echo "Retry $count/$retries exited $exit, retrying 'git push' in $wait seconds..."
                sleep $wait
                git pull --rebase
              else
                echo "Retry $count/$retries exited $exit, no more retries left for 'git push'."
                exit $exit
              fi
            done
          fi

# TODO: Build only compatible packages and not all of them
  check:
    name: Check compatibility
    runs-on: ubuntu-20.04
    needs:
      - build
      - version
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.version.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.WRITE_TOKEN }}
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Upgrade npm
        run: npm install -g npm@x
      - name: npm version
        run: npm version
      - run: npm install
        continue-on-error: true
        working-directory: packages/${{ matrix.package }}
      - name: Build package
        continue-on-error: true
        if: ${{ matrix.build == 'true' }}
        run: npm run build
        working-directory: packages/${{ matrix.package }}
