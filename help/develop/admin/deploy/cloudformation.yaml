AWSTemplateFormatVersion: 2010-09-09
Resources:
  VPC:
    Properties:
      CidrBlock: '10.0.0.0/24'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: project
          Value: datagrok
    Type: AWS::EC2::VPC
  CloudMap:
    Properties:
      Description: Service Map for datagrok
      Name: datagrok.local
      Vpc: !Ref VPC
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      ClusterName: datagrok
      Tags:
        - Key: project
          Value: datagrok
    Type: AWS::ECS::Cluster
  Datagrok8080Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: datagrok:8080/tcp on datagrok network
      FromPort: 8080
      GroupId: !Ref DatagrokNetwork
      IpProtocol: TCP
      ToPort: 8080
    Type: AWS::EC2::SecurityGroupIngress
  Datagrok80Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: datagrok:80/tcp on datagrok network
      FromPort: 80
      GroupId: !Ref DatagrokNetwork
      IpProtocol: TCP
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  DatagrokNetwork:
    Properties:
      GroupDescription: datagrok Security Group for datagrok network
      Tags:
        - Key: project
          Value: datagrok
        - Key: network
          Value: datagrok_datagrok
      VpcId: !Ref VPC
    Type: AWS::EC2::SecurityGroup
  DatagrokNetworkIngress:
    Properties:
      Description: Allow communication within network datagrok
      GroupId: !Ref DatagrokNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref DatagrokNetwork
    Type: AWS::EC2::SecurityGroupIngress
  DatagrokService:
    DependsOn:
      - DatagrokTCP80Listener
      - DatagrokTCP8080Listener
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: datagrok
          ContainerPort: 8080
          TargetGroupArn: !Ref DatagrokTCP8080TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: DatagrokNetwork
          Subnets:
            - subnet-391d5843
            - subnet-01b5f78ef745cbc05
            - subnet-998825d5
            - subnet-e5939f8d
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - DatagrokServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: project
          Value: datagrok
        - Key: service
          Value: datagrok
      TaskDefinition: !Ref DatagrokTaskDefinition
    Type: AWS::ECS::Service
  DatagrokServiceDiscoveryEntry:
    Properties:
      Description: '"datagrok" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: datagrok
      NamespaceId: !Ref CloudMap
    Type: AWS::ServiceDiscovery::Service
  DatagrokTCP8080Listener:
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref DatagrokTCP8080TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 8080
      Protocol: HTTPS
      Certificates:
        - ${DATAGROK_AWS_ACM_CERTIFICATE}
    Type: AWS::ElasticLoadBalancingV2::Listener
  DatagrokTCP8080TargetGroup:
    Properties:
      Port: 8080
      Protocol: HTTP
      Tags:
        - Key: project
          Value: datagrok
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /api/admin/health
      Matcher:
        HttpCode: 200
      UnhealthyThresholdCount: 5
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  DatagrokTCP80Listener:
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref DatagrokTCP8080TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTPS
      Certificates:
        - ${DATAGROK_AWS_ACM_CERTIFICATE}
    Type: AWS::ElasticLoadBalancingV2::Listener
  DatagrokTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-east-2.compute.internal
            - datagrok.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: datagrok
          Name: Datagrok_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Datagrok_ResolvConf_InitContainer
          Environment:
            - Name: GROK_MODE
              Value: auto
            - Name: GROK_PARAMETERS
              Value: '{ "amazonStorageRegion": "<S3_BUCKET_REGION>", "amazonStorageBucket": "<S3_BUCKET_NAME>", "dbServer": "<RDS_ENDPOINT>", "db": "datagrok", "dbLogin": "datagrok", "dbPassword": "SoMeVeRyCoMpLeXpAsSwOrD", "dbAdminLogin": "postgres", "dbAdminPassword": "postgres", "dbSsl": false }'
          Essential: true
          Image: docker.io/datagrok/datagrok:latest@sha256:70077b322b2f6f70d911e1781dfef8b47fb69c1c8b066e724061ca1193870416
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: datagrok
          MemoryReservation: 2048
          Name: datagrok
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
      Cpu: "4096"
      ExecutionRoleArn: !Ref DatagrokTaskExecutionRole
      Family: datagrok-datagrok
      Memory: "8192"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref DatagrokTaskRole
    Type: AWS::ECS::TaskDefinition
  DatagrokTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: project
          Value: datagrok
        - Key: service
          Value: datagrok
    Type: AWS::IAM::Role
  DatagrokTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Tags:
        - Key: project
          Value: datagrok
        - Key: service
          Value: datagrok
    Type: AWS::IAM::Role
  GrokconnectService:
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: DatagrokNetwork
          Subnets:
            - subnet-391d5843
            - subnet-01b5f78ef745cbc05
            - subnet-998825d5
            - subnet-e5939f8d
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - GrokconnectServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: project
          Value: datagrok
        - Key: service
          Value: grok_connect
      TaskDefinition: !Ref GrokconnectTaskDefinition
    Type: AWS::ECS::Service
  GrokconnectServiceDiscoveryEntry:
    Properties:
      Description: '"grok_connect" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: grok_connect
      NamespaceId: !Ref CloudMap
    Type: AWS::ServiceDiscovery::Service
  GrokconnectTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Command:
            - us-east-2.compute.internal
            - datagrok.local
          Essential: false
          Image: docker/ecs-searchdomain-sidecar:1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: datagrok
          Name: Grokconnect_ResolvConf_InitContainer
        - DependsOn:
            - Condition: SUCCESS
              ContainerName: Grokconnect_ResolvConf_InitContainer
          Essential: true
          Image: docker.io/datagrok/grok_connect:latest@sha256:f5a0e3c9b78c8445866de39026a9509959a0207c773133cb235e00162eeabcb3
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: datagrok
          MemoryReservation: 200
          Name: grok_connect
      Cpu: "512"
      ExecutionRoleArn: !Ref GrokconnectTaskExecutionRole
      Family: datagrok-grok_connect
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
    Type: AWS::ECS::TaskDefinition
  GrokconnectTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: project
          Value: datagrok
        - Key: service
          Value: grok_connect
    Type: AWS::IAM::Role
  LoadBalancer:
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Ref: DatagrokNetwork
      Subnets:
        - subnet-391d5843
        - subnet-01b5f78ef745cbc05
        - subnet-998825d5
        - subnet-e5939f8d
      Tags:
        - Key: project
          Value: datagrok
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/datagrok
    Type: AWS::Logs::LogGroup
