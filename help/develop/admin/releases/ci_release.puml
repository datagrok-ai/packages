@startuml

start
scale 800*500
:Developers;
:Commit and push code;
if (Release version?) then (Yes)
if (Release level) then (Patch)
:Create branch release/X.Y.Z
from release/X.Y.Z-1 branch;
else (Minor or Major)
:Create branch release/X.Y.Z
from master branch;
endif
else (No)
endif
:Set new version X.Y.Z;
:Install dart dependencies;
:Build autogenerated dart code;
split
:Dart Unit tests;
split again
:Dart Static Analysis;
end split;
if (Checks passed?) then (No)
:Create report;
:Notify the developer;
:Make changes in code;
if (Release version?) then (Yes)
:Cherry-pick commit to branch release/X.Y.Z;
endif
:Start the flow from the beginning;
end
else (Yes)
:Upgrade all dependencies to latest version;
:Build docker image;
:Check vulnerabilities in docker image using Snyk;
if (Vulnerabilities were detected?) then (Yes)
:Create report;
:Notify the developer;
:Make changes in code;
if (Release version?) then (Yes)
:Cherry-pick commit to branch release/X.Y.Z;
endif
:Start the flow from the beginning;
end
else (No)
if (Create docker-compose file for local testing?) then (Yes)
:Create docker-compose file from template;
:Save docker-compose file as artifact;
end
else(No)
:Deploy docker image to stand;
if (Release version?) then (Yes)
:Redeploy database;
else (No)
endif
split
:Test manually by QA engineer;
split again
:Run dart integration tests;
split again
:Install ApiTests package;
:Run API and UI tests;
split again
:Install all packages;
:Run packages tests;
end split
if (Tests passed?) then (No)
:Create report;
:Notify the developer;
:Make changes in code;
if (Release version?) then (Yes)
:Cherry-pick commit to branch release/X.Y.Z;
endif
:Start the flow from the beginning;
end
else (Yes)
if (Release version?) then (Yes)
:Push docker image to Docker Hub;
:Create release notes;
:Publish new JS API version;
:Upgrade datagrok-api dependency version in packages where necessary;
:Upgrade production instance: public.datagrok.ai;
stop
else (No)
stop
endif
@enduml
