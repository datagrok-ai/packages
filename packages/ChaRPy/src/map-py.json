{
  "plotScripts": {
    "scatterplot": "import plotly.express as px\nimport pandas as pd\ndata.dropna(axis = 'rows',inplace = True, subset = '!(groupByList)'.split(','))\nfig = px.scatter(data,!(xColumnName)!(yColumnName)!(colorColumnName)!(sizeColumnName)!(showRegressionLine)!(markerMaxSize)!(xColumnNames)!(yColumnNames)!(xAxisType)!(yAxisType))\nfig.update_traces(marker=dict(line=dict(width=0.5,color='DarkSlateGrey')!(markerType)),selector=dict(mode='markers'))",
    "histogram": "import plotly.express as px\nimport pandas as pd\ndata.dropna(axis = 'rows',inplace = True, subset = '!(groupByList)'.split(','))\nfig = px.histogram(data, !(valueColumnName)!(colorColumnName)!(xColumnNames)!(yColumnNames)!(bins), marginal=\"violin\", barmode='overlay', opacity = 0.8)\nfig.update_layout(bargap=0.1)",
    "barchart": "import plotly.express as px\nimport pandas as pd\ndata[!(splitColumnName)].fillna('NAs',inplace = True)\nfig = px.bar(data.groupby('!(groupByList)'.split(','),as_index=False).agg(!(valueAggrType)), \n             !(splitColumnName)!(valueColumnName)!(colorColumnName)!(xColumnNames)!(yColumnNames),barmode='stack')\nfig.update_layout(xaxis={'categoryorder':!(barSortOrder)})",
    "boxplot": "import plotly.express as px\nimport pandas as pd\ndata.dropna(axis = 'rows',inplace = True, subset = '!(groupByList)'.split(','))\nfig = px.box(data,!(categoryColumnName)!(valueColumnName)!(binColorColumnName)!(xColumnNames)!(yColumnNames))\nfig.update_traces(quartilemethod=\"exclusive\")",
    "correlationplot": "import seaborn as sn\ntoCorr = !(xColumnNames).split(',')\ndata.dropna(axis = 'rows',inplace = True, subset = toCorr)\ncorrMatrix = data[toCorr].corr(!(correlationType))\nplt = sn.heatmap(corrMatrix, annot=True)\nprint(plt)",
    "linechart": "from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\ntoLine = !(yColumnNames).split(',')\nfuns = [!(yAggrTypes)]\ndata.dropna(axis = 'rows',inplace = True, subset = toLine.append(!(xColumnName)))\nfig = make_subplots(rows=len(toLine), cols=1)\n\nfor i in range(0,len(toLine)-1):\n    summaryDf = data.groupby([!(xColumnName)],as_index=False).agg(funs[i])\n    fig.add_trace(go.Scatter(x=summaryDf[!(xColumnName)], y=summaryDf[toLine[i]], mode='lines', name=toLine[i]),row=i+1, col=1)",
    "matrixplot": "import plotly.express as px\ntoScCorr = '!(xColumnNames)'.split(',')\nfig = px.scatter_matrix(data,dimensions=toScCorr)\nfig.update_traces(marker=dict(line=dict(width=0.5,color='DarkSlateGrey'),symbol = 0,opacity = 0.8))"
  },
  "additionalOps" : {
    "scatterplot": {
      "xColumnName": "x = '!(xColumnName)'",
      "yColumnName": ", y = '!(yColumnName)'",
      "sizeColumnName": ", size = '!(sizeColumnName)'",
      "colorColumnName": ", color = '!(colorColumnName)'",
      "markerType": ", symbol = !(markerType)",
      "markerMaxSize": ", size_max = !(markerMaxSize)",
      "showRegressionLine": " , trendline='ols'",
      "xAxisType": ", log_x = True",
      "yAxisType": ", log_y = True",
      "xColumnNames": ", facet_col = '!(xColumnNames)'",
      "yColumnNames": ", facet_row = '!(yColumnNames)'"
    },
    "histogram": {
      "valueColumnName": "x = '!(valueColumnName)'",
      "colorColumnName": ", color = '!(colorColumnName)'",
      "bins": ", nbins = !(bins)",
      "xColumnNames": ", facet_col = '!(xColumnNames)'",
      "yColumnNames": ", facet_row = '!(yColumnNames)'"
    },
    "barchart": {
      "splitColumnName": "'!(splitColumnName)'",
      "valueColumnName": ", '!(valueColumnName)'",
      "colorColumnName": ", '!(colorColumnName)'",
      "valueAggrType": "!(valueAggrType)",
      "barSortOrder": "'!(barSortOrder)'",
      "xColumnNames": ", facet_col = '!(xColumnNames)'",
      "yColumnNames": ", facet_row = '!(yColumnNames)'"
    },
    "boxplot" : {
      "categoryColumnName": "x = '!(categoryColumnName)'",
      "valueColumnName" : ", y = '!(valueColumnName)'",
      "binColorColumnName": ", color = '!(binColorColumnName)'",
      "xColumnNames": ", facet_col = '!(xColumnNames)'",
      "yColumnNames": ", facet_row = '!(yColumnNames)'"
    },
    "correlationplot": {
      "xColumnNames": "'!(xColumnNames)'",
      "correlationType": "method = '!(correlationType)'"
    },
    "linechart": {
      "yAggrTypes": "!(yAggrTypes)",
      "xColumnName": "'!(xColumnName)'",
      "yColumnNames": "'!(yColumnNames)'"
    },

    "matrixplot": {
      "xColumnNames": "!(xColumnNames)"
    }

  },
  "miscCodes" : {
    "square": 1,
    "circle": 0,
    "circle border": 100,
    "dot": 200,
    "desc": "total ascending",
    "asc": "total descending",
    "count": "lambda x: x.dropna().count()",
    "unique": "lambda x: x.dropna().nunique()",
    "nulls": "lambda x: x.dropna().sum()",
    "min": "lambda x: x.dropna().min()",
    "max": "lambda x: x.dropna().max()",
    "med": "lambda x: x.dropna().median()",
    "avg": "lambda x: x.dropna().mean()",
    "stdev": "lambda x: x.dropna().std()",
    "variance": "lambda x: x.dropna().var()",
    "skew": "lambda x: x.dropna().skew()",
    "kurt": "lambda x: x.dropna().kurt()",
    "q1": "lambda x: x.dropna().quantile(q = 0.25)",
    "q2": "lambda x: x.dropna().quantile(q = 0.5)",
    "q3": "lambda x: x.dropna().quantile(q = 0.75)",
    "Spearman": "spearman",
    "Pearson": "pearson"
  },
  "header" : "#name: Plot\n#language: python\n#input: dataframe data\n#output: graphics plt\n\n",
  "tail": "\nfig.write_image(\"temp.png\")\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport os\nimage = mpimg.imread(\"temp.png\")\nos.remove(\"temp.png\")\nplt.imshow(image)\nplt = plt.show()",
  "dateConvert": "!(dateConvert)"
}