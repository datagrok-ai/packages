

//name: error
//input: dataframe df
//input: column col1
//input: column col2
//output: double mad 
export function error(df: DG.DataFrame, col1: DG.Column, col2: DG.Column): number {
  return _error(df, col1, col2);
}

//name: errorInWebWorker
//input: dataframe df
//input: column col1
//input: column col2
//output: double mad 
export async function errorInWebWorker(df: DG.DataFrame, col1: DG.Column, col2: DG.Column): Promise<number> {
  let _output: any;
  let _promise = _errorInWebWorker(df, col1, col2);

  await _promise.then(
    _result => {  _output = _result; },
    _error => {  throw new Error (`Error: ${_error}`); }
  );

  return _output;
}

//name: partialLeastSquareRegression
//input: dataframe table
//input: column_list features
//input: column predict
//input: int componentsCount
export function partialLeastSquareRegression(table: DG.DataFrame, features: DG.ColumnList, predict: DG.Column, componentsCount: number): any {
  return _partialLeastSquareRegression(table, features, predict, componentsCount);
}

//name: partialLeastSquareRegressionInWebWorker
//input: dataframe table
//input: column_list features
//input: column predict
//input: int componentsCount
export async function partialLeastSquareRegressionInWebWorker(table: DG.DataFrame, features: DG.ColumnList, predict: DG.Column, componentsCount: number): Promise<any> {
  let _output: any;
  let _promise = _partialLeastSquareRegressionInWebWorker(table, features, predict, componentsCount);

  await _promise.then(
    _result => {  _output = _result; },
    _error => {  throw new Error (`Error: ${_error}`); }
  );

  return _output;
}

//name: generateDataset
//input: int kernel
//input: column kernelParams
//input: int samplesCount
//input: int featuresCount
//input: double min
//input: double max
//input: double violatorsPercentage
export function generateDataset(kernel: number, kernelParams: DG.Column, samplesCount: number, featuresCount: number, min: number, max: number, violatorsPercentage: number): any {
  return _generateDataset(kernel, kernelParams, samplesCount, featuresCount, min, max, violatorsPercentage);
}

//name: generateDatasetInWebWorker
//input: int kernel
//input: column kernelParams
//input: int samplesCount
//input: int featuresCount
//input: double min
//input: double max
//input: double violatorsPercentage
export async function generateDatasetInWebWorker(kernel: number, kernelParams: DG.Column, samplesCount: number, featuresCount: number, min: number, max: number, violatorsPercentage: number): Promise<any> {
  let _output: any;
  let _promise = _generateDatasetInWebWorker(kernel, kernelParams, samplesCount, featuresCount, min, max, violatorsPercentage);

  await _promise.then(
    _result => {  _output = _result; },
    _error => {  throw new Error (`Error: ${_error}`); }
  );

  return _output;
}

//name: normalizeDataset
//input: column_list data
export function normalizeDataset(data: DG.ColumnList): any {
  return _normalizeDataset(data);
}

//name: normalizeDatasetInWebWorker
//input: column_list data
export async function normalizeDatasetInWebWorker(data: DG.ColumnList): Promise<any> {
  let _output: any;
  let _promise = _normalizeDatasetInWebWorker(data);

  await _promise.then(
    _result => {  _output = _result; },
    _error => {  throw new Error (`Error: ${_error}`); }
  );

  return _output;
}

//name: trainLSSVM
//input: double gamma
//input: int kernel
//input: column kernelParams
//input: int modelParamsCount
//input: int precomputedWeightsCount
//input: column_list dataset
//input: column labels
export function trainLSSVM(gamma: number, kernel: number, kernelParams: DG.Column, modelParamsCount: number, precomputedWeightsCount: number, dataset: DG.ColumnList, labels: DG.Column): any {
  return _trainLSSVM(gamma, kernel, kernelParams, modelParamsCount, precomputedWeightsCount, dataset, labels);
}

//name: trainLSSVMInWebWorker
//input: double gamma
//input: int kernel
//input: column kernelParams
//input: int modelParamsCount
//input: int precomputedWeightsCount
//input: column_list dataset
//input: column labels
export async function trainLSSVMInWebWorker(gamma: number, kernel: number, kernelParams: DG.Column, modelParamsCount: number, precomputedWeightsCount: number, dataset: DG.ColumnList, labels: DG.Column): Promise<any> {
  let _output: any;
  let _promise = _trainLSSVMInWebWorker(gamma, kernel, kernelParams, modelParamsCount, precomputedWeightsCount, dataset, labels);

  await _promise.then(
    _result => {  _output = _result; },
    _error => {  throw new Error (`Error: ${_error}`); }
  );

  return _output;
}

//name: predictByLSSVM
//input: int kernel
//input: column kernelParams
//input: column_list normalizedData
//input: column labels
//input: column means
//input: column stdDevs
//input: column modelParams
//input: column precomputedWeights
//input: column_list targetData
//output: column prediction
export function predictByLSSVM(kernel: number, kernelParams: DG.Column, normalizedData: DG.ColumnList, labels: DG.Column, means: DG.Column, stdDevs: DG.Column, modelParams: DG.Column, precomputedWeights: DG.Column, targetData: DG.ColumnList): DG.Column {
  return _predictByLSSVM(kernel, kernelParams, normalizedData, labels, means, stdDevs, modelParams, precomputedWeights, targetData);
}

//name: predictByLSSVMInWebWorker
//input: int kernel
//input: column kernelParams
//input: column_list normalizedData
//input: column labels
//input: column means
//input: column stdDevs
//input: column modelParams
//input: column precomputedWeights
//input: column_list targetData
//output: column prediction
export async function predictByLSSVMInWebWorker(kernel: number, kernelParams: DG.Column, normalizedData: DG.ColumnList, labels: DG.Column, means: DG.Column, stdDevs: DG.Column, modelParams: DG.Column, precomputedWeights: DG.Column, targetData: DG.ColumnList): Promise<DG.Column> {
  let _output: any;
  let _promise = _predictByLSSVMInWebWorker(kernel, kernelParams, normalizedData, labels, means, stdDevs, modelParams, precomputedWeights, targetData);

  await _promise.then(
    _result => {  _output = _result; },
    _error => {  throw new Error (`Error: ${_error}`); }
  );

  return _output;
}

//name: trainAndAnalyzeLSSVM
//input: double gamma
//input: int kernel
//input: column kernelParams
//input: int modelParamsCount
//input: int precomputedWeightsCount
//input: int confusionMatrixElementsCount
//input: column_list dataset
//input: column labels
export function trainAndAnalyzeLSSVM(gamma: number, kernel: number, kernelParams: DG.Column, modelParamsCount: number, precomputedWeightsCount: number, confusionMatrixElementsCount: number, dataset: DG.ColumnList, labels: DG.Column): any {
  return _trainAndAnalyzeLSSVM(gamma, kernel, kernelParams, modelParamsCount, precomputedWeightsCount, confusionMatrixElementsCount, dataset, labels);
}

//name: trainAndAnalyzeLSSVMInWebWorker
//input: double gamma
//input: int kernel
//input: column kernelParams
//input: int modelParamsCount
//input: int precomputedWeightsCount
//input: int confusionMatrixElementsCount
//input: column_list dataset
//input: column labels
export async function trainAndAnalyzeLSSVMInWebWorker(gamma: number, kernel: number, kernelParams: DG.Column, modelParamsCount: number, precomputedWeightsCount: number, confusionMatrixElementsCount: number, dataset: DG.ColumnList, labels: DG.Column): Promise<any> {
  let _output: any;
  let _promise = _trainAndAnalyzeLSSVMInWebWorker(gamma, kernel, kernelParams, modelParamsCount, precomputedWeightsCount, confusionMatrixElementsCount, dataset, labels);

  await _promise.then(
    _result => {  _output = _result; },
    _error => {  throw new Error (`Error: ${_error}`); }
  );

  return _output;
}
