import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
dayjs.extend(utc);


export const EXCLUDED = ['Time', 'RandBetween', 'Rnd'];

// See ApiTests/src/functions/
export const FUNC_TESTS: {[f: string]: {[test: string]: any}} = {
  Boolean: {
    'Boolean(true)': true,
    'Boolean("true")': true,
    'Boolean("y")': true,
    'Boolean(1)': true,
    'Boolean(10)': true,
    'Boolean(DateParse("20200131T132700"))': true,
    'Boolean(false)': false,
    'Boolean("false")': false,
    'Boolean("n")': false,
    'Boolean("abc")': false,
    'Boolean("")': false,
    'Boolean(null)': false,
    'Boolean(0)': false,
  },
  ParseFloat: {
    'ParseFloat("2025")': 2025,
    'ParseFloat("12.78")': 12.78,
    'ParseFloat("-012.150")': -12.15,
  },
  ParseInt: {
    'ParseInt("2025")': 2025,
    'ParseInt("-012")': -12,
    'ParseInt(" 0101 ")': 101,
  },
  ParseQnum: {
    'ParseQnum("100")': 100.00000000000003,
    'ParseQnum("<100")': 100.00000000000001,
    'ParseQnum(">100")': 100.00000000000004,
    'ParseQnum("   100 ")': 100.00000000000003,
    'ParseQnum(" < 100 ")': 100.00000000000001,
    'ParseQnum(" > 100 ")': 100.00000000000004,
    'Qualifier(ParseQnum("100"))': '=',
    'Qualifier(ParseQnum("<100"))': '<',
    'Qualifier(ParseQnum(">100"))': '>',
    'QnumToString(ParseQnum(" < 100 "))': '<100',
    'ParseQnum("10")': 10.000000000000004,
    'ParseQnum("<10")': 10.000000000000002,
    'ParseQnum(">10")': 10.000000000000005,
    'ParseQnum(" < 10")': 10.000000000000002,
    'ParseQnum(">  10")': 10.000000000000005,
  },
  Qnum: {
    'ToString(Qnum(1.5, "="))': '1.5000000000000004',
    'ToString(Qnum(1.5, "<"))': '1.5000000000000002',
    'ToString(Qnum(1.5, ">"))': '1.5000000000000007',
    'ToString(Qnum(-1, "="))': '-1.0000000000000004',
    'ToString(Qnum(-1, "<"))': '-1.0000000000000002',
    'ToString(Qnum(-1, ">"))': '-1.0000000000000007',
  },
  QnumToString: {
    'QnumToString(Qnum(1.5, "="))': '1.50',
    'QnumToString(Qnum(1.5, "<"))': '<1.50',
    'QnumToString(Qnum(1.5, ">"))': '>1.50',
    'QnumToString(Qnum(1.115, "="))': '1.11',
    'QnumToString(Qnum(1.115, "<"))': '<1.11',
    'QnumToString(Qnum(1.115, ">"))': '>1.11',
  },
  Qualifier: {
    'Qualifier(Qnum(1.5, "="))': '=',
    'Qualifier(Qnum(1.5, "<"))': '<',
    'Qualifier(Qnum(1.5, ">"))': '>',
    'Qualifier(1)': '=',
  },
  ToString: {
    'ToString(1)': '1',
    'ToString(3.14)': '3.14',
    'ToString(true)': 'true',
  },
  Date: {
    'Date(2020, 1, 1)': dayjs.utc('2020-01-01'),
    'Date(2000, 10, 1)': dayjs.utc('2000-10-01'),
    'Date(2040, 1, 30)': dayjs.utc('2040-01-30'),
  },
  DateAdd: {
    'DateAdd(Date(2020, 1, 1), 86400000)': dayjs.utc('2020-01-01').add(1, 'd'),
    'DateAdd(Date(2020, 1, 1), 10800000)': dayjs.utc('2020-01-01').add(3, 'h'),
    'DateAdd(Date(2020, 1, 1), 3605000)': dayjs.utc('2020-01-01').add(1, 'h').add(5, 's'),
  },
  DateDiff: {
    'DateDiff(Date(2020, 1, 2), Date(2020, 1, 1))': 86400000,
    'DateDiff(Date(2020, 1, 1), Date(2020, 1, 2))': -86400000,
    'DateDiff(Date(2020, 1, 1), Date(2020, 1, 1))': 0,
    'DateDiff(DateTime(2020, 1, 1, 0, 0, 0, 125), Date(2020, 1, 1))': 125,
  },
  DateTime: {
    'DateTime(2020, 1, 1, 23, 59, 45, 999)': dayjs.utc('2020-1-1 23:59:45.999'),
    'DateTime(2050, 10, 10, 0, 15, 5, 0)': dayjs.utc('2050-10-10 0:15:5'),
  },
  DayOfMonth: {
    'DayOfMonth(Date(2020, 6, 15))': 15,
    'DayOfMonth(Date(2020, 6, 1))': 1,
    'DayOfMonth(Date(2020, 6, 30))': 30,
  },
  DayOfWeek: {
    'DayOfWeek(Date(2020, 12, 31))': 4,
    'DayOfWeek(Date(2020, 1, 1))': 3,
    'DayOfWeek(Date(2020, 1, 5))': 7,
  },
  DayOfYear: {
    'DayOfYear(Date(2020, 1, 1))': 1,
    'DayOfYear(Date(2020, 2, 25))': 56,
    'DayOfYear(Date(2020, 12, 31))': 366,
  },
  Hour: {
    'Hour(DateTime(2020, 1, 1, 23, 59, 45, 999))': 23,
    'Hour(DateTime(2020, 1, 1, 0, 59, 45, 999))': 0,
    'Hour(DateTime(2020, 1, 1, 12, 0, 0, 0))': 12,
  },
  Millisecond: {
    'Millisecond(DateTime(2020, 1, 1, 0, 0, 0, 0))': 0,
    'Millisecond(DateTime(2020, 1, 1, 0, 0, 0, 100))': 100,
    'Millisecond(DateTime(2020, 1, 1, 0, 0, 0, 909))': 909,
  },
  Minute: {
    'Minute(DateTime(2020, 1, 1, 0, 0, 0, 0))': 0,
    'Minute(DateTime(2020, 1, 1, 0, 5, 50, 50))': 5,
    'Minute(DateTime(2020, 1, 1, 0, 59, 0, 0))': 59,
  },
  Month: {
    'Month(Date(2020, 1, 1))': 1,
    'Month(Date(2020, 3, 15))': 3,
    'Month(Date(2020, 12, 15))': 12,
  },
  Quarter: {
    'Quarter(Date(2020, 1, 1))': 1,
    'Quarter(Date(2020, 2, 10))': 1,
    'Quarter(Date(2020, 3, 15))': 1,
    'Quarter(Date(2020, 4, 1))': 2,
    'Quarter(Date(2020, 5, 1))': 2,
    'Quarter(Date(2020, 6, 1))': 2,
    'Quarter(Date(2020, 7, 1))': 3,
    'Quarter(Date(2020, 8, 1))': 3,
    'Quarter(Date(2020, 9, 1))': 3,
    'Quarter(Date(2020, 10, 1))': 4,
    'Quarter(Date(2020, 11, 1))': 4,
    'Quarter(Date(2020, 12, 1))': 4,
  },
  Second: {
    'Second(DateTime(2020, 1, 1, 23, 59, 59, 999))': 59,
    'Second(DateTime(2020, 1, 1, 23, 59, 45, 999))': 45,
    'Second(DateTime(2020, 1, 1, 23, 59, 0, 999))': 0,
  },
  Time: {
    // The function returns a datetime with a special insignificant date `01-01-00`.
    // 2-digit year is replaced in expected dates with 4-digit format to address offset inconsistency
    'Time(23, 59, 45, 999)': dayjs('2000-01-01 23:59:45.999'),
    'Time(10, 35, 15, 500)': dayjs('2000-01-01 10:35:15.500'),
    'Time(5, 5, 5, 5)': dayjs('2000-01-01 5:5:5.5'),
    'Time(0, 0, 0, 0)': dayjs('2000-01-01 0:0:0.0'),
  },
  Today: {
    'Today()': dayjs().utc().hour(0).minute(0).second(0).millisecond(0),
  },
  Weeknum: {
    'Weeknum(Date(2020, 1, 1))': 0,
    'Weeknum(Date(2020, 2, 3))': 5,
    'Weeknum(Date(2020, 12, 31))': 53,
  },
  Year: {
    'Year(Date(2020, 1, 1))': 2020,
    'Year(Date(1999, 1, 1))': 1999,
    'Year(Date(2100, 1, 1))': 2100,
  },
  And: {
    'And(true, true)': true,
    'And(true, false)': false,
    'And(false, true)': false,
    'And(false, false)': false,
    'And(5 == 5, 10 < 20)': true,
    'And(2, 3)': undefined,
    'And(0, 1)': undefined,
    'And(1, 1)': undefined,
  },
  Not: {
    'Not(true)': false,
    'Not(false)': true,
    'Not(1)': undefined,
    'Not(0)': undefined,
  },
  Or: {
    'Or(true, true)': true,
    'Or(true, false)': true,
    'Or(false, true)': true,
    'Or(false, false)': false,
    'Or(5 == 6, 20 < 10)': false,
    'Or(2, 3)': undefined,
    'Or(0, 1)': undefined,
    'Or(1, 1)': undefined,
  },
  Xor: {
    'Xor(true, true)': false,
    'Xor(true, false)': true,
    'Xor(false, true)': true,
    'Xor(false, false)': false,
    'Xor(5 == 6, 20 < 10)': false,
    'Xor(5 == 5, 10 < 20)': false,
    'Xor(2, 3)': undefined,
    'Xor(2, 2)': undefined,
    'Xor(1, 0)': undefined,
    'Xor(1, 1)': undefined,
  },
  Abs: {
    'Abs(-10)': 10,
    'Abs(10)': 10,
    'Abs(0)': 0,
  },
  Acos: {
    'Acos(-1)': 3.142,
    'Acos(0)': 1.571,
    'Acos(0.5)': 1.047,
    'Acos(1)': 0,
  },
  Add: {
    'Add(2, 10)': 12,
    'Add(24.06, 100.101)': 124.161,
    'Add(-70, 25)': -45,
    'Add(-11, -22)': -33,
    'Add(999, 0)': 999,
    'Add(0, -12)': -12,
    'Add("bitter", "sweet")': 'bittersweet',
    'Add("", "right")': 'right',
    'Add("left", "")': 'left',
    'Add("", "")': '',
  },
  Asin: {
    'Asin(-1)': -1.571,
    'Asin(0)': 0,
    'Asin(0.5)': 0.524,
    'Asin(1)': 1.571,
  },
  Atan: {
    'Atan(0)': 0,
    'Atan(1)': 0.785,
    'Atan(1.5)': 0.983,
    'Atan(-1)': -0.785,
  },
  Atan2: {
    'Atan2(1, 0)': 1.5707,
    'Atan2(0, 1)': 0,
    'Atan2(-1, 2)': -0.464,
    'Atan2(1, -2)': 2.678,
  },
  Ceil: {
    'Ceil(3.5)': 4,
    'Ceil(-3.5)': -3,
    'Ceil(1.1)': 2,
    'Ceil(-1.1)': -1,
    'Ceil(10)': 10,
  },
  Cos: {
    'Cos(0)': 1,
    'Cos(PI / 6)': 0.866,
    'Cos(PI / 4)': 0.707,
    'Cos(PI / 3)': 0.5,
    'Cos(PI / 2)': 0.0001,
  },
  Div: {
    'Div(7.542, 2)': 3.771,
    'Div(-12, 3)': -4,
    'Div(4321, 1)': 4321,
    'Div(0, 4)': 0,
    // 'Div(1, 0)': Infinity,
  },
  Eq: {
    'Eq(5, 5)': true,
    'Eq(-1, 1)': false,
    'Eq(-0, 0)': true,
    'Eq(3.142, 3.142)': true,
    'Eq("1", 1)': false,
    'Eq(0, null)': false,
    'Eq(null, null)': true,
    'Eq("sky", "sky")': true,
    'Eq("", "")': true,
    'Eq("SKY", "sky")': false,
    'Eq(" sky ", "sky")': false,
    'Eq("", null)': false,
  },
  Exp: {
    'Exp(1)': 2.718,
    'Exp(2)': 7.389,
    'Eq(Exp(1), E)': true,
  },
  Floor: {
    'Floor(3.5)': 3,
    'Floor(-3.5)': -4,
    'Floor(1.1)': 1,
    'Floor(-1.1)': -2,
    'Floor(10)': 10,
  },
  Greater: {
    'Greater(5, 4)': true,
    'Greater(-5, -10)': true,
    'Greater(5, 5)': false,
    'Greater(4, 5)': false,
  },
  If: {
    'If(true, "a", "b")': 'a',
    'If(false, "a", "b")': 'b',
    'If(true, If(true, "a", "b"), "c")': 'a',
    'If(false, "a", If(false, "b", "c"))': 'c',
    'If(Eq(10, 10), 1, 0)': 1,
    'If(Eq(10, 50), 1, 0)': 0,
    'If(Boolean(1), Boolean(1), Boolean(0))': true,
    'If(Boolean(0), Boolean(1), Boolean(0))': false,
  },
  Ln: {
    'Ln(1)': 0,
    'Ln(E)': 1,
    'Ln(5)': 1.609,
  },
  Log: {
    'Log(25, 5)': 2,
    'Log(100, 10)': 2,
    'Log(2, 10)': 0.301,
  },
  Log10: {
    'Log10(1)': 0,
    'Log10(10)': 1,
    'Log10(100)': 2,
    'Log10(5)': 0.699,
    'Log10(32)': 1.505,
  },
  Mod: {
    'Mod(8, 3)': 2,
    'Mod(9, 3)': 0,
    'Mod(1, 3)': 1,
    'Mod(7, 7)': 0,
  },
  Mul: {
    'Mul(10, 1.5)': 15,
    'Mul(12, 30)': 360,
    'Mul(0, 13.27)': 0,
    'Mul(123, 1)': 123,
  },
  Neg: {
    'Neg(-5)': 5,
    'Neg(11)': -11,
    'Neg(-0)': 0,
    'Neg(+1)': -1,
  },
  NotEq: {
    'NotEq(5, 5)': false,
    'NotEq(-1, 1)': true,
    'NotEq(-0, 0)': false,
    'NotEq(3.142, 3.142)': false,
    'NotEq("sky", "sky")': false,
    'NotEq("", "")': false,
    'NotEq("SKY", "sky")': true,
    'NotEq(" sky ", "sky")': true,
  },
  NotGreater: {
    'NotGreater(4, 5)': true,
    'NotGreater(5, 5)': true,
    'NotGreater(6, 5)': false,
    'NotGreater(-5, -7)': false,
  },
  NotSmaller: {
    'NotSmaller(5, 5)': true,
    'NotSmaller(6, 5)': true,
    'NotSmaller(5, 6)': false,
    'NotSmaller(-1, 0)': false,
  },
  Pow: {
    'Pow(2, 0)': 1,
    'Pow(7, 1)': 7,
    'Pow(2, 3)': 8,
    'Pow(2, -2)': 0.25,
  },
  RandBetween: {
    'RandBetween(5, 7)': [5, 7],
    'RandBetween(-2, 2)': [-2, 2],
    'RandBetween(0, 35)': [0, 35],
    'RandBetween(-100, -50)': [-100, -50],
    'RandBetween(1, 2)': [1, 2],
  },
  Rnd: {
    'Rnd(80)': [0, 80],
    'Rnd(2)': [0, 2],
    'Rnd(-2)': [0, 2],
  },
  Round: {
    'Round(3.4)': 3,
    'Round(3.5)': 4,
    'Round(1)': 1,
    'Round(-3.5)': -4,
    'Round(-3.4)': -3,
  },
  Round10: {
    'Round10(12345.12345, 6)': 12345.12345,
    'Round10(12345.12345, 4)': 12345.1235,
    'Round10(12345.12345, 0)': 12345,
    'Round10(PI, 2)': 3.14,
    'Round10(0.5, 0)': 1,
    'Round10(0.3, 0)': 0,
    'Round10(-0.5, 0)': -1,
    'Round10(175, -1)': 180,
    'Round10(170, -1)': 170,
    'Round10(175, -2)': 200,
    'Round10(125, -2)': 100,
    'Round10(12340.12345, -3.8)': 12000,
    'Round10(12340.12345, -4.2)': 10000,
    'Round10(12340.12345, -5)': 0,
    'Round10(null, 2)': undefined,
  },
  Sin: {
    'Sin(0)': 0,
    'Sin(PI / 6)': 0.5,
    'Sin(PI / 4)': 0.707,
    'Sin(PI / 3)': 0.866,
    'Sin(PI / 2)': 1,
  },
  Smaller: {
    'Smaller(4, 5)': true,
    'Smaller(5, 5)': false,
    'Smaller(5, 4)': false,
    'Smaller(-10, -5)': true,
  },
  Sqrt: {
    'Sqrt(1)': 1,
    'Sqrt(4)': 2,
    'Sqrt(9)': 3,
    'Sqrt(6.25)': 2.5,
  },
  Sub: {
    'Sub(10, 3)': 7,
    'Sub(124.161, 24.06)': 100.101,
    'Sub(-50, 25)': -75,
    'Sub(-11, -22)': 11,
    'Sub(999, 0)': 999,
    'Sub(0, -12)': 12,
  },
  Tan: {
    'Tan(0)': 0,
    'Tan(PI / 6)': 0.577,
    'Tan(PI / 4)': 1.0001,
    'Tan(PI / 3)': 1.732,
  },
  Avg: {
    'Avg([1, 2, 3, 4])': 2.5,
    'Avg([null, 0.3, 0.7])': 0.5,
    'Avg([5.123])': 5.123,
    'Avg([-1, -2, 3])': 0,
    'Avg([1, null, 2, 3])': 2,
    'Avg([])': undefined,
    'Avg([null, null])': undefined,
  },
  Kurt: {
    'Kurt([1, 2, 3])': -1.5,
    'Kurt([1, 2, 6])': -1.5,
    'Kurt([1, null, 2, 3])': -1.5,
    'Kurt([null, null])': 0,
  },
  Max: {
    'Max([1, 2, 4, 3])': 4,
    'Max([1, null, 2, 3])': 3,
    'Max([null, 1, 0.7, 0.3])': 1,
    'Max([1.5, -2, 1.9])': 1.9,
    'Max([null, null])': undefined,
  },
  Med: {
    'Med([1, 2, 3])': 2,
    'Med([1, 2, 3, 4])': 2.5,
    'Med([1, null, 2, 3])': 2,
    'Med([-100, null, 100])': 0,
    'Med([null, 0.3, 0.7])': 0.5,
    'Med([null, 1, 0.7, 0.3])': 0.7,
    'Med([null, null])': 0,
  },
  Min: {
    'Min([1.5, -2, 1.9])': -2,
    'Min([1, 2, 4, 3])': 1,
    'Min([2, null, 0, 3])': 0,
    'Min([null, 1, 0.7, 0.3])': 0.3,
    'Min([null, null])': undefined,
  },
  MissingValueCount: {
    'MissingValueCount([1, 2, 3])': 0,
    'MissingValueCount([10, null, 7])': 1,
    'MissingValueCount([2, null, 0, null, 3])': 2,
    'MissingValueCount([null, null, null])': 3,
  },
  Percentile: {
    'Percentile([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 0.25)': 3,
    'Percentile([1, 2, 3, 4], 0.25)': 2,
    'Percentile([1, 2, 3, 4], 0.40)': 2,
    'Percentile([1, 2, 3, 4], 0.75)': 4,
    'Percentile([1, 2, null, 3, 4], 0.25)': 2,
    'Percentile([null], 0.4)': undefined,
    'Percentile([], 0.4)': undefined,
  },
  Q1: {
    'Q1([-5, -3, -1, 0, 1, 3, 5])': -3,
    'Q1([5, -5, 1, -1, 3, -3, 0])': -3,
    'Q1([1, 2, 3])': 1,
    'Q1([1, null, 2, 3])': 1,
    'Q1([null, null])': 0,
  },
  Q2: {
    'Q2([1, 2, 3])': 2,
    'Q2([1, 2, 3, 4])': 2.5,
    'Q2([1, null, 2, 3])': 2,
    'Q2([-100, null, 100])': 0,
    'Q2([null, 0.3, 0.7])': 0.5,
    'Q2([null, 1, 0.7, 0.3])': 0.7,
    'Q2([null, null])': 0,
  },
  Q3: {
    'Q3([-5, -3, -1, 0, 1, 3, 5])': 3,
    'Q3([5, -5, 1, -1, 3, -3, 0])': 3,
    'Q3([1, 2, 3])': 3,
    'Q3([1, null, 2, 3])': 3,
    'Q3([null, null])': 0,
  },
  Skew: {
    'Skew([1, 2, 3])': 0,
    'Skew([1, 2, 6])': 0.595,
    'Skew([1, null, 2, 3])': 0,
    'Skew([null, null])': 0,
  },
  StDev: {
    'StDev([1, 2, 3])': 1,
    'StDev([1, null, 2, 3])': 1,
    'StDev([null, null])': 0,
    'StDev([7, 14, 21])': 7,
    'StDev([-15, -5, 5, 15])': 12.91,
  },
  Sum: {
    'Sum([1, 2, 4, 3])': 10,
    'Sum([-1, 4, 12, 5])': 20,
    'Sum([2, null, 0, 3])': 5,
    'Sum([null, 1, 0.7, 0.3])': 2,
    'Sum([null, null])': 0,
    'Sum([-0])': 0,
  },
  TotalCount: {
    'TotalCount([2, null, 0, 3])': 4,
    'TotalCount([1, 2, 4])': 3,
    'TotalCount([null, null])': 2,
    'TotalCount([100])': 1,
    'TotalCount([])': 0,
    'TotalCount(null)': undefined,
  },
  ValueCount: {
    'ValueCount([1, 2, 4, 3])': 4,
    'ValueCount([2, null, 0, 3])': 3,
    'ValueCount([1, 2, 4])': 3,
    'ValueCount([null, null])': 0,
    'ValueCount([100])': 1,
    'ValueCount([])': 0,
    'ValueCount(null)': undefined,
  },
  Variance: {
    'Variance([1, 2, 3])': 1,
    'Variance([1, null, 2, 3])': 1,
    'Variance([null, null])': 0,
    'Variance([7, 14, 21])': 49,
    'Variance([-15, -5, 5, 15])': 166.667,
  },
  Contains: {
    'Contains("stormy weather", "weather")': true,
    'Contains("stormy weather", "sunny")': false,
    'Contains("empty", "")': true,
    'Contains("Case", "case")': false,
  },
  EndsWith: {
    'EndsWith("White Christmas", "Christmas")': true,
    'EndsWith("White Christmas", "White")': false,
    'EndsWith("White Christmas", "")': true,
  },
  IsEmpty: {
    'IsEmpty("")': true,
    'IsEmpty(null)': true,
    'IsEmpty("dream")': false,
    'IsEmpty("     ")': false,
  },
  IsNotEmpty: {
    'IsNotEmpty("")': false,
    'IsNotEmpty(null)': false,
    'IsNotEmpty("dream")': true,
    'IsNotEmpty("     ")': true,
  },
  Length: {
    'Length("supercalifragilisticexpialidocious")': 34,
    'Length("bright dawn")': 11,
    'Length("")': 0,
  },
  RegExpContains: {
    'RegExpContains("stormy weather", "weather")': true,
    'RegExpContains("stormy weather", "sunny")': false,
    'RegExpContains("empty", "")': true,
    'RegExpContains("Case", "case")': false,
    'RegExpContains("name@gmail.com", "[\w.\-]{0,25}@(hotmail|gmail)\.com")': true,
  },
  RegExpExtract: {
    'RegExpExtract("Hello, world!", "l+", 0)': 'll',
    'RegExpExtract("Hello, world!", "l+", 1)': 'l',
  },
  RegExpReplace: {
    'RegExpReplace("Hello, world!", "l+", "LL")': 'HeLLo, worLLd!',
  },
  ReplaceAll: {
    'ReplaceAll("New York", "York", "Orleans")': 'New Orleans',
    'ReplaceAll("day-to-day", "-", " ")': 'day to day',
    'ReplaceAll("spaceless", " ", "-")': 'spaceless',
  },
  SplitString: {
    'SplitString("a,b,c,d", ",", 0)': 'a',
    'SplitString("devil-may-care", "-", 1)': 'may',
  },
  StartsWith: {
    'StartsWith("Sunrise", "Sun")': true,
    'StartsWith("Sunrise", "sun")': false,
    'StartsWith("Sunrise", "moon")': false,
    'StartsWith("Sunrise", "")': true,
  },
  StrFind: {
    'StrFind("Hello, world!", "Hello")': 0,
    'StrFind("Hello, world!", "hello")': -1,
    'StrFind("Hello, world!", "world")': 7,
    'StrFind("Hello, world!", "sun")': -1,
    'StrFind("Hello, world!", "Hello, world!")': 0,
    'StrFind("", "moon")': -1,
    'StrFind("moon", "")': -1,
    'StrFind("", "")': -1,
  },
  StrLeft: {
    'StrLeft("crystal", 100)': 'crystal',
    'StrLeft("crystal", 3)': 'cry',
    'StrLeft("crystal", 0)': '',
    'StrLeft("", 3)': '',
    'StrLeft("crystal", -1)': 'crysta',
    'StrLeft("crystal", -7)': '',
    'StrLeft("crystal", -10)': '',
  },
  StrRight: {
    'StrRight("crystal", 100)': 'crystal',
    'StrRight("crystal", 3)': 'tal',
    'StrRight("crystal", 0)': '',
    'StrRight("", 3)': '',
    'StrRight("crystal", -1)': 'rystal',
    'StrRight("crystal", -7)': '',
    'StrRight("crystal", -10)': '',
  },
  StrRepeat: {
    'StrRepeat("a", 5)': 'aaaaa',
    'StrRepeat("ma", 2)': 'mama',
    'StrRepeat("", 2)': '',
    'StrRepeat("day", 1)': 'day',
    'StrRepeat("light", 0)': '',
  },
  Substring: {
    'Substring("Snow storm", 5, 10)': 'storm',
    'Substring("stars", 0, 5)': 'stars',
    'Substring("galaxy", 0, 0)': '',
    'Substring("", 0, 0)': '',
  },
  ToLowerCase: {
    'ToLowerCase("ICE")': 'ice',
    'ToLowerCase("snow")': 'snow',
    'ToLowerCase("Wind")': 'wind',
  },
  ToUpperCase: {
    'ToUpperCase("home")': 'HOME',
    'ToUpperCase("CAT")': 'CAT',
    'ToUpperCase("Toy")': 'TOY',
  },
  Trim: {
    'Trim("   Outer space   ")': 'Outer space',
    'Trim("spacecraft")': 'spacecraft',
    'Trim("   ")': '',
    'Trim("")': '',
  },
};
