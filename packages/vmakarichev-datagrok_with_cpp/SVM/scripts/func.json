{
    "api.cpp": {
        "generateDataset": {
            "arguments": {
                "featuresCount": {
                    "type": "num"
                },
                "samplesCount": {
                    "type": "num"
                },
                "min": {
                    "type": "num"
                },
                "max": {
                    "type": "num"
                },
                "violatorsPercentage": {
                    "type": "num"
                },
                "dataset": {
                    "type": "newFloatColumns",
                    "numOfRows": {
                        "ref": "samplesCount",
                        "value": "data"
                    },
                    "numOfColumns": {
                        "ref": "featuresCount",
                        "value": "data"
                    }
                },
                "labels": {
                    "type": "newFloatColumn",
                    "numOfRows": {
                        "ref": "samplesCount",
                        "value": "data"
                    }
                }
            },
            "output": {
                "type": "objects",
                "source": "['dataset', 'labels']"
            },
            "annotation": [
                "//name: generateDataset",
                "//input: int featuresCount",
                "//input: int samplesCount",
                "//input: double min",
                "//input: double max",
                "//input: double violatorsPercentage"
            ],
            "prototype": "generateDataset(featuresCount, samplesCount, min, max, violatorsPercentage)",
            "prototypeForWebWorker": "generateDatasetInWebWorker(featuresCount, samplesCount, min, max, violatorsPercentage)",
            "callArgs": "[featuresCount, samplesCount, min, max, violatorsPercentage]"
        },
        "demoLinearKernel": {
            "arguments": {
                "gamma": {
                    "type": "num"
                },
                "datasetTrain": {
                    "type": "floatColumns"
                },
                "labelsTrain": {
                    "type": "floatColumn"
                },
                "datasetTest": {
                    "type": "floatColumns"
                },
                "weightsCount": {
                    "type": "num"
                },
                "paramsCount": {
                    "type": "num"
                },
                "labelsTrainPredicted": {
                    "type": "newFloatColumn",
                    "numOfRows": {
                        "ref": "datasetTrain",
                        "value": "numOfRows"
                    }
                },
                "labelsTestPredicted": {
                    "type": "newFloatColumn",
                    "numOfRows": {
                        "ref": "datasetTest",
                        "value": "numOfRows"
                    }
                },
                "means": {
                    "type": "newFloatColumn",
                    "numOfRows": {
                        "ref": "datasetTrain",
                        "value": "numOfColumns"
                    }
                },
                "stdDevs": {
                    "type": "newFloatColumn",
                    "numOfRows": {
                        "ref": "datasetTrain",
                        "value": "numOfColumns"
                    }
                },
                "weights": {
                    "type": "newFloatColumn",
                    "numOfRows": {
                        "ref": "weightsCount",
                        "value": "data"
                    }
                },
                "modelParams": {
                    "type": "newFloatColumn",
                    "numOfRows": {
                        "ref": "paramsCount",
                        "value": "data"
                    }
                }
            },
            "output": {
                "type": "objects",
                "source": "['labelsTrainPredicted', 'labelsTestPredicted', 'means', 'stdDevs', 'weights', 'modelParams']"
            },
            "annotation": [
                "//name: demoLinearKernel",
                "//input: double gamma",
                "//input: dataframe dfTrain",
                "//input: column_list datasetTrain",
                "//input: column labelsTrain",
                "//input: dataframe dfTest",
                "//input: column_list datasetTest",
                "//input: int weightsCount",
                "//input: int paramsCount"
            ],
            "prototype": "demoLinearKernel(gamma, dfTrain, datasetTrain, labelsTrain, dfTest, datasetTest, weightsCount, paramsCount)",
            "prototypeForWebWorker": "demoLinearKernelInWebWorker(gamma, dfTrain, datasetTrain, labelsTrain, dfTest, datasetTest, weightsCount, paramsCount)",
            "callArgs": "[gamma, datasetTrain, labelsTrain, datasetTest, weightsCount, paramsCount]"
        }
    }
}
