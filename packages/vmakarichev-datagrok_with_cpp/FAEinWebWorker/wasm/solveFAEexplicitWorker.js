// Worker for solving the problem FAE

// Import of JS-code generated by Emscripten
import {exportFAEexplicit} from './FAEexplicitForWebWorker';

// Import utilities
import {allocateMemoryForBuffer, clearMemoryForBuffer,
    putDataToBuffer, getDataFromBuffer,
    getArrOfWasmParams, getArrOfWasmTypes} from './wasmUtils';

onmessage = async function (evt) {
    exportFAEexplicit().then(module => 
    {   
        // get C++-function name        
        let cFuncName = evt.data.cFuncName;

        // extract inputs for C++-function
        let args = evt.data.cppFuncInputs;

        // allocate memory for arrays that are passed to C++-function
        allocateMemoryForBuffer(module, args);

        // put data (just column(s)) to allocated buffers
        putDataToBuffer(module, args);

        // create array of parameters that are passed to C++-function
        let params = getArrOfWasmParams(args);

        // create array of parameters' types that are passed to C++-function
        let types = getArrOfWasmTypes(args);        

        // call wasm-function
        let result = module.ccall(cFuncName, 'number', types, params);        

        // get data from buffers (just column(s))
        getDataFromBuffer(module, args);        

        // clear memory that was previousely allocated
        clearMemoryForBuffer(module, args);

        // post results
        postMessage({'callResult': result, 'args': args});
    } )
}