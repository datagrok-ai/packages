import * as grok from 'datagrok-api/grok';
import * as ui from 'datagrok-api/ui';
import * as DG from 'datagrok-api/dg';

export const SEQ_COL_NAMES = {
  [DG.SEMTYPE.MOLECULE]: 'Molecules',
  [DG.SEMTYPE.MACROMOLECULE]: 'Sequences'
}

const GRID_PARAMS = {
  'X': 30,
  'Y': 30,
  'Z': 30
}

export class AutodockBaseFuncEditor {
  tableInput: DG.InputBase;
  molColInput: DG.InputBase;
  molColInputRoot: HTMLElement;
  macromoleculeInput: DG.InputBase;
  macromoleculeSettingsIcon: HTMLElement;
  macromoleculeSettingsDiv = ui.inputs([]);
  funcParamsDiv: HTMLDivElement;
  
  constructor(semtype: DG.SemType) {
    this.tableInput = ui.tableInput('Data', grok.shell.tv.dataFrame, undefined, () => {
      this.onTableInputChanged(semtype);
    });
    //@ts-ignore
    this.molColInput = ui.columnInput(SEQ_COL_NAMES[semtype], this.tableInput.value!, this.tableInput.value!.columns.bySemType(semtype), null, { filter: (col: DG.Column) => col.semType === semtype } as ColumnInputOptions);
    this.molColInputRoot = this.molColInput.root;
    this.molColInput.onChanged(() => this.onColumnInputChanged(semtype));
    this.macromoleculeSettingsIcon = ui.icons.settings(() => {
      settingsOpened = !settingsOpened;
      if (!settingsOpened)
        ui.empty(this.macromoleculeSettingsDiv);
      else
        this.createAlgorithmSettingsDiv(this.macromoleculeSettingsDiv);
    }, 'Modify methods parameters');
    this.macromoleculeInput = ui.choiceInput('Macromolecule', '1pbq - all molecule', ['autogenerate', '1pbq - all molecule', '1pbq - ligand-binding pocket'], () => {        
      const isAutogenerated = this.macromoleculeInput.stringValue === 'autogenerate';
      if (isAutogenerated) {
        this.macromoleculeInput.root.prepend(this.macromoleculeSettingsIcon);
        if (settingsOpened)
          this.createAlgorithmSettingsDiv(this.macromoleculeSettingsDiv);
      } else {
        this.macromoleculeInput.root.removeChild(this.macromoleculeSettingsIcon);
      }
    });
      
    let settingsOpened = false;
    this.macromoleculeSettingsDiv = ui.inputs([]);  
    this.funcParamsDiv = ui.div([
      this.tableInput,
      this.molColInput,
      this.macromoleculeInput,
      this.macromoleculeSettingsDiv
    ], { style: { minWidth: '320px' }, classes: 'ui-form' });
        
    setTimeout(() => {
      this.onColumnInputChanged(semtype);
    });
  }      

  get funcParams(): any {
    return {table: this.tableInput.value!, molecules: this.molColInput.value!, macromolecules: this.macromoleculeInput};
  }
    
  get paramsUI(): HTMLDivElement{
    return this.funcParamsDiv;
  }

  createAlgorithmSettingsDiv(paramsForm: HTMLElement): HTMLElement {
    ui.empty(paramsForm);
    Object.keys(GRID_PARAMS).forEach((param: any) => {
      const value = (GRID_PARAMS as any)[param];
      const input = ui.floatInput(param, value);
      ui.tooltip.bind(input.root, `${param} coordinate`);
      paramsForm.append(input.root);
    });
    return paramsForm;
  }

  onTableInputChanged(semtype: DG.SemType) {
    this.molColInput = ui.columnInput(SEQ_COL_NAMES[semtype], this.tableInput.value!, this.tableInput.value!.columns.bySemType(semtype));
    this.molColInput.onChanged(() => this.onColumnInputChanged(semtype));
    ui.empty(this.molColInputRoot);
    Array.from(this.molColInput.root.children).forEach((it) => this.molColInputRoot.append(it));
    this.onColumnInputChanged(semtype);
  }

  onColumnInputChanged(semtype: DG.SemType) {
    const col: DG.Column | null | undefined = this.molColInput.value;
    if (!col) return;
  }
}