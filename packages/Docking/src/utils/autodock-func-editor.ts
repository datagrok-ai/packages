import * as grok from 'datagrok-api/grok';
import * as ui from 'datagrok-api/ui';
import * as DG from 'datagrok-api/dg';

export const SEQ_COL_NAMES = {
  [DG.SEMTYPE.MOLECULE]: 'Molecules',
  [DG.SEMTYPE.MACROMOLECULE]: 'Sequences'
}

const GRID_PARAMS = {
  'X': 30,
  'Y': 30,
  'Z': 30
}

const TARGET_PATH = 'System:AppData/Docking/targets';

export class AutodockBaseFuncEditor {
  tableInput: DG.InputBase | undefined;
  molColInput: DG.InputBase | undefined;
  molColInputRoot: HTMLElement | undefined;
  macromoleculeInput: DG.InputBase | undefined;
  macromoleculeSettingsIcon: HTMLElement | undefined;
  macromoleculeSettingsDiv = ui.inputs([]);
  funcParamsDiv!: HTMLDivElement;
  gpfFiles: string[] = [];

  constructor(semtype: DG.SemType) {
    (async () => {
      await this.init(semtype);
    })();
  }

  async init(semtype: DG.SemType) {
    await this.configFiles();

    this.tableInput = ui.tableInput('Data', grok.shell.tv.dataFrame, undefined, () => {
      this.onTableInputChanged(semtype);
    });

    this.molColInput = ui.columnInput(SEQ_COL_NAMES[semtype], this.tableInput?.value, this.tableInput?.value?.columns.bySemType(semtype));
    this.molColInputRoot = this.molColInput?.root;
    this.molColInput?.onChanged(() => this.onColumnInputChanged(semtype));

    this.macromoleculeSettingsIcon = ui.icons.settings(() => {
      if (this.macromoleculeSettingsDiv && this.macromoleculeSettingsIcon) {
        settingsOpened = !settingsOpened;
        if (!settingsOpened)
          ui.empty(this.macromoleculeSettingsDiv);
        else
          this.createAlgorithmSettingsDiv(this.macromoleculeSettingsDiv);
      }
    }, 'Modify methods parameters');

    this.macromoleculeInput = ui.choiceInput('Macromolecule', this.gpfFiles[0], [...this.gpfFiles, 'Autogenerate'], () => {
      const isAutogenerated = this.macromoleculeInput?.stringValue === 'Autogenerate';
      if (isAutogenerated) {
        if (this.macromoleculeInput?.root && this.macromoleculeSettingsIcon) {
          this.macromoleculeInput.root.prepend(this.macromoleculeSettingsIcon);
          if (settingsOpened && this.macromoleculeSettingsDiv)
            this.createAlgorithmSettingsDiv(this.macromoleculeSettingsDiv);
        }
      } else {
        if (this.macromoleculeInput?.root && this.macromoleculeSettingsIcon)
          this.macromoleculeInput.root.removeChild(this.macromoleculeSettingsIcon);
      }
    });

    let settingsOpened = false;

    this.macromoleculeSettingsDiv = ui.inputs([]);
    this.funcParamsDiv = ui.div([
      this.tableInput,
      this.molColInput,
      this.macromoleculeInput,
      this.macromoleculeSettingsDiv
    ], { style: { minWidth: '320px' }, classes: 'ui-form' });

    setTimeout(() => {
      this.onColumnInputChanged(semtype);
    });

    return Promise.resolve();
  }

  get funcParams(): any {
    return { table: this.tableInput?.value, molecules: this.molColInput?.value, macromolecules: this.macromoleculeInput };
  }

  get paramsUI(): HTMLDivElement {
    return this.funcParamsDiv;
  }

  async configFiles(): Promise<void> {
    const targetsFiles: DG.FileInfo[] = await grok.dapi.files.list(TARGET_PATH, true);
    this.gpfFiles = targetsFiles.filter(file => file.isFile && file.name.endsWith('.gpf')).map(file => file.path);
  }

  createAlgorithmSettingsDiv(paramsForm: HTMLElement): HTMLElement {
    ui.empty(paramsForm);
    Object.keys(GRID_PARAMS).forEach((param: any) => {
      const value = (GRID_PARAMS as any)[param];
      const input = ui.floatInput(param, value);
      ui.tooltip.bind(input.root, `${param} coordinate`);
      paramsForm.append(input.root);
    });
    return paramsForm;
  }

  onTableInputChanged(semtype: DG.SemType) {
    this.molColInput = ui.columnInput(SEQ_COL_NAMES[semtype], this.tableInput?.value, this.tableInput?.value?.columns.bySemType(semtype));
    this.molColInput?.onChanged(() => this.onColumnInputChanged(semtype));
    if (this.molColInputRoot)
      ui.empty(this.molColInputRoot);
    Array.from(this.molColInput?.root?.children || []).forEach((it) => this.molColInputRoot?.append(it));
    this.onColumnInputChanged(semtype);
  }

  onColumnInputChanged(semtype: DG.SemType) {
    const col: DG.Column | null | undefined = this.molColInput?.value;
    if (!col) return;
  }
}