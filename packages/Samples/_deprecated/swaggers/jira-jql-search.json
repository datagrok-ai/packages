{
  "swagger": "2.0",
  "info": {
    "description": "Jira JQL Search",
    "version": "1001.0.0-SNAPSHOT",
    "title": "Jira Reddata JQL Search",
    "termsOfService": "http://atlassian.com/terms/",
    "contact": {
      "email": "ecosystem@atlassian.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "reddata.atlassian.net",
  "basePath": "/rest",
  "schemes": ["https"],
  "paths": {
    "/api/2/search": {
      "get": {
        "summary": "Search for issues using JQL (GET)",
        "description": "Searches for issues using <a href=\"https://confluence.atlassian.com/x/egORLQ\">JQL</a>.\n <p>\n If the JQL query expression is too large to be encoded as a query parameter, use the\n <a href=\"#api-api-2-search-post\">POST</a> version of this resource.\n <p>\n <b><a href=\"#permissions\">Permissions</a> required:</b>\n Permission to access Jira.",
        "summary": "Jira JQL Search",
        "schemes": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jql",
            "in": "query",
            "default": "project=GROK AND Type='Bug' AND 'Test Case' is not EMPTY ORDER BY updated DESC",
            "description": "The <a href=\"https://confluence.atlassian.com/x/egORLQ\">JQL</a> that defines the search. If no JQL expression is provided, all issues are returned.\n                      Note that <code>username</code> and <code>userkey</code> have been deprecated as search terms for this parameter.\n                      See the <a href=\"https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/\">migration guide</a> for details.\n                      Use <code>accountId</code> instead.",
            "required": true,
            "type": "string",
            "x-example": "{jql}"
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The index of the first item to return in the page of results (page offset).",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "\nThe maximum number of items to return per page. The maximum is <code>100</code>.",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "validateQuery",
            "in": "query",
            "description": "Determines how to validate the JQL query and treat the validation results. Supported values are:\n                      <ul>\n                      <li><code>strict</code> Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).</li>\n                      <li><code>warn</code> Returns all errors as warnings.</li>\n                      <li><code>none</code> No validation is performed.</li>\n                      <li><code>true</code> <em>Deprecated</em> A legacy synonym for <code>strict</code>.</li>\n                      <li><code>false</code> <em>Deprecated</em> A legacy synonym for <code>warn</code>.</li>\n                      </ul>\n                      <p>\n                      Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the <code>validateQuery</code> value.",
            "required": false,
            "type": "string",
            "default": "strict",
            "enum": [
              "strict",
              "warn",
              "none",
              "true",
              "false"
            ]
          },
          {
            "name": "fields",
            "default": "summary,assignee,customfield_10406,created,status,priority",
            "in": "query",
            "description": "A comma-separated list of fields to return for each issue, use it to retrieve a subset of fields. Allowed values:\n                      <ul>\n                      <li><code>*all</code> Returns all fields.</li>\n                      <li><code>*navigable</code> Returns navigable fields.</li>\n                      <li>Any issue field, prefixed with a minus to exclude.</li>\n                      </ul>\n                      Examples:\n                      <ul>\n                      <li><code>summary,comment</code> Returns only the summary and comments fields.</li>\n                      <li><code>-description</code> Returns all navigable (default) fields except description.</li>\n                      <li><code>*all,-comment</code> Returns all fields except comments.</li>\n                      </ul>\n                      <p>\n                      This parameter may be specified multiple times. For example, <code>fields=field1,field2&fields=field3</code>.\n                      <p>\n                      Note: All navigable fields are returned by default. This differs from\n                      <a href=\"#api-api-2-issue-issueIdOrKey-get\">GET issue</a>\n                      where the default is all fields.",
            "required": false,
            "type": "string",
            "collectionFormat": "multi"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Use <a href=\"#expansion\">expand</a> to include additional information about issues in the response. This parameter accepts multiple values separated by a comma:\n                      <ul>\n                      <li><code>renderedFields</code> Returns field values rendered in HTML format.</li>\n                      <li><code>names</code> Returns the display name of each field.</li>\n                      <li><code>schema</code> Returns the schema describing a field type.</li>\n                      <li><code>transitions</code> Returns all possible transitions for the issue.</li>\n                      <li><code>operations</code> Returns all possible operations for the issue.</li>\n                      <li><code>editmeta</code> Returns information about how each field can be edited.</li>\n                      <li><code>changelog</code> Returns a list of recent updates to an issue, sorted by date, starting from the most recent.</li>\n                      <li><code>versionedRepresentations</code> Returns a JSON array for each version of a field's value, with the\n                      highest number representing the most recent version. Note: When included in the request, the <code>fields</code>\n                      parameter is ignored.</li>\n                      </ul>",
            "required": false,
            "type": "string"
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A comma-separated list of issue property keys for issue properties to include in the results.\n                      This parameter may be specified multiple times. For example, <code>properties=prop1,prop2&properties=prop3</code>.\n                      A maximum of 5 issue property keys can be specified.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fieldsByKeys",
            "in": "query",
            "description": "Reference fields by their key (rather than ID).",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the request is successful.",
            "examples": {
              "application/json": "{\"expand\":\"names,schema\",\"startAt\":0,\"maxResults\":50,\"total\":1,\"issues\":[{\"expand\":\"\",\"id\":\"10001\",\"self\":\"http://your-domain.atlassian.net/rest/api/2/issue/10001\",\"key\":\"HSP-1\"}],\"warningMessages\":[\"The value 'splat' does not exist for the field 'Foo'.\"]}"
            },
            "schema": {
              "$ref": "#/definitions/SearchResults"
            }
          },
          "400": {
            "description": "Returned if the JQL query is invalid."
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing."
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:jira-work"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/api/2/issue": {
      "post": {
        "summary": "Jira Create Issue",
        "description": "Creates an issue or, where the option to create sub-tasks is enabled in Jira, a sub-task. A transition may be\n applied, to move the issue or sub-task to a workflow step other than the default start step, and issue properties\n set.\n <p>\n The content of the issue or sub-task is defined using <code>update</code> and <code>fields</code>. The fields\n that can be set in the issue or sub-task are determined using the <a href=\"#api-api-2-issue-createmeta-get\">\n Get create issue metadata</a>. These are the same fields that appear on the issue's create screen.\n <p>\n Creating a sub-task differs from creating an issue as follows:\n <ul>\n <li><code>issueType</code> must be set to a sub-task issue type (use <a href=\"#api-api-2-issue-createmeta-get\">\n Get create issue metadata</a> to find sub-task issue types).</li>\n <li><code>parent</code> the must contain the ID or key of the parent issue.</li>\n </ul>\n <b><a href=\"#permissions\">Permissions</a> required:</b>\n <em>Browse projects</em> and <em>Create issues</em> <a href=\"https://confluence.atlassian.com/x/yodKLg\">project\n permissions</a> for the project in which the issue or sub-task is created. ",
        "summary": "Jira Create Issue",
        "schemes": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "updateHistory",
            "in": "query",
            "description": "\nIndicates whether the project in which the issue is created is added to the user's <b>Recently\n                      viewed</b> project list, as shown under <b>Projects</b> in Jira.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "createRequest",
            "required": true,
            "type": "string",
            "x-examples": {
              "application/json": "{\"update\":{\"worklog\":[{\"add\":{\"started\":\"2011-07-05T11:05:00.000+0000\",\"timeSpent\":\"60m\"}}]},\"fields\":{\"project\":{\"id\":\"10000\"},\"summary\":\"something's wrong\",\"issuetype\":{\"id\":\"10000\"},\"assignee\":{\"name\":\"homer\"},\"reporter\":{\"name\":\"smithers\"},\"priority\":{\"id\":\"20000\"},\"labels\":[\"bugfix\",\"blitz_test\"],\"timetracking\":{\"originalEstimate\":\"10\",\"remainingEstimate\":\"5\"},\"security\":{\"id\":\"10000\"},\"versions\":[{\"id\":\"10000\"}],\"environment\":\"environment\",\"description\":\"description\",\"duedate\":\"2011-03-11\",\"fixVersions\":[{\"id\":\"10001\"}],\"components\":[{\"id\":\"10000\"}],\"customfield_30000\":[\"10000\",\"10002\"],\"customfield_80000\":{\"value\":\"red\"},\"customfield_20000\":\"06/Jul/11 3:25 PM\",\"customfield_40000\":\"this is a text field\",\"customfield_70000\":[\"jira-administrators\",\"jira-software-users\"],\"customfield_60000\":\"jira-software-users\",\"customfield_50000\":\"this is a text area. big text.\",\"customfield_10000\":\"09/Jun/81\"}}"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returned if the request is successful.",
            "examples": {
              "application/json": "{\"id\":\"10000\",\"key\":\"TST-24\",\"self\":\"http://your-domain.atlassian.net/rest/api/2/issue/10000\",\"transition\":{\"status\":200,\"errorCollection\":{\"errorMessages\":[],\"errors\":{}}}}"
            },
            "schema": {
              "$ref": "#/definitions/CreatedIssue"
            }
          },
          "400": {
            "description": "Returned if the request:\n <ul>\n <li>is missing required fields.</li>\n <li>contains invalid field values.</li>\n <li>contains fields that cannot be set for the issue type.</li>\n <li>is by a user who does not have the necessary permissions.</li>\n <li>is to create a subtype in a project different that of the the parent issue.</li>\n <li>is for a sub-task when the option to create sub-tasks is disabled.</li>\n <li>is invalid for any other reason.</li>\n </ul>",
            "examples": {
              "application/json": "{\"errorMessages\":[\"Field 'priority' is required\"],\"errors\":{}}"
            },
            "schema": {
              "$ref": "#/definitions/ErrorCollection"
            }
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing.",
            "schema": {
              "$ref": "#/definitions/ErrorCollection"
            }
          },
          "403": {
            "description": "Returned if the user is not permitted to access the application.",
            "schema": {
              "$ref": "#/definitions/ErrorCollection"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:jira-work"
            ]
          }
        ],
        "deprecated": false
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "description": "You can access this resource via basic auth.",
      "type": "basic",
      "contentType": "application/json"
    },
    "OAuth2": {
      "description": "OAuth2 scopes for Jira",
      "type": "oauth2",
      "authorizationUrl": "https://accounts.atlassian.com/authorize",
      "tokenUrl": "https://accounts.atlassian.com/access-token",
      "flow": "application",
      "scopes": {
        "read:jira-user": "View user information in Jira that you have access to, including usernames, email addresses, and avatars.",
        "read:jira-work": "Read project and issue data. Search for issues and objects associated with issues (such as attachments and worklogs).",
        "write:jira-work": "Create and edit issues in Jira, post comments, create worklogs, and delete issues.",
        "manage:jira-project": "Create and edit project settings and create new project-level objects, for example, versions, components.",
        "manage:jira-configuration": "Configure Jira settings that require the Jira administrators permission, for example, create projects and custom fields, view workflows, manage issue link types."
      }
    }
  },
  "definitions": {
    "Locale": {
      "type": "object",
      "properties": {
        "locale": {
          "type": "string",
          "description": "The locale code. The Java the locale format is used: a two character language code (ISO 639), an  underscore, and two letter country code (ISO 3166). For example, en_US represents a locale of English (United States). Required on create."
        }
      },
      "description": "Details of a locale."
    },
    "ProjectType": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the project type.",
          "readOnly": true
        },
        "formattedKey": {
          "type": "string",
          "description": "The formatted key of the project type.",
          "readOnly": true
        },
        "descriptionI18nKey": {
          "type": "string",
          "description": "The key of the project type's description.",
          "readOnly": true
        },
        "icon": {
          "type": "string",
          "description": "The icon of the project type.",
          "readOnly": true
        },
        "color": {
          "type": "string",
          "description": "The color of the project type.",
          "readOnly": true
        }
      },
      "description": "Details about a project type."
    },
    "Component": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the component.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The unique identifier for the component.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters."
        },
        "description": {
          "type": "string",
          "description": "The description for the component. Optional when creating or updating a component."
        },
        "lead": {
          "description": "The user details for the component's lead user.",
          "readOnly": true,
          "$ref": "#/definitions/User"
        },
        "leadUserName": {
          "type": "string",
          "description": "This property has been deprecated in favour of <code>leadAccountId</code> due to privacy changes. See the <a href=\"https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/\">migration guide</a> for details. <br>The username of the component's lead user. Optional when creating or updating a component. Cannot be provided with <code>leadAccountId</code>."
        },
        "leadAccountId": {
          "type": "string",
          "description": "The accountId of the component's lead user. The accountId uniquely identifies the user across all Atlassian products. For example, <em>384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192</em>.Optional when creating or updating a component. Cannot be provided with <code>leadUserName</code>."
        },
        "assigneeType": {
          "type": "string",
          "description": "The nominal user type used to determine the assignee for issues created with this component. See <code>realAssigneeType</code> for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:<ul><li><code>PROJECT_LEAD</code> the assignee to any issues created with this component is nominally the lead for the project the component is in.</li><li><code>COMPONENT_LEAD</code> the assignee to any issues created with this component is nominally the lead for the component.</li><li><code>UNASSIGNED</code> an assignee is not set for issues created with this component.</li><li><code>PROJECT_DEFAULT</code> the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.</li></ul>Default value: <code>PROJECT_DEFAULT</code>.<br>Optional when creating or updating a component.",
          "enum": [
            "PROJECT_DEFAULT",
            "COMPONENT_LEAD",
            "PROJECT_LEAD",
            "UNASSIGNED"
          ]
        },
        "assignee": {
          "description": "The details of the user associated with <code>assigneeType</code>, if any. See <code>realAssignee</code> for details of the user assigned to issues created with this component.",
          "readOnly": true,
          "$ref": "#/definitions/User"
        },
        "realAssigneeType": {
          "type": "string",
          "description": "The actual type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the <code>assigneeType</code>. For example, <code>assigneeType</code> is set to <code>COMPONENT_LEAD</code> but no component lead is set. This property is set to one of the following values:<ul><li><code>PROJECT_LEAD</code> when <code>assigneeType</code> is <code>PROJECT_LEAD</code> and the project lead has permission to be assigned issues in the project that the component is in.</li> <li><code>COMPONENT_LEAD</code> when <code>assignee</code>Type is <code>COMPONENT_LEAD</code> and the component lead has permission to be assigned issues in the project that the component is in.</li> <li><code>UNASSIGNED</code> when <code>assigneeType</code> is <code>UNASSIGNED</code> and Jira is configured to allow unassigned issues.</li> <li><code>PROJECT_DEFAULT</code> when none of the preceding cases are true.</li></ul>",
          "readOnly": true,
          "enum": [
            "PROJECT_DEFAULT",
            "COMPONENT_LEAD",
            "PROJECT_LEAD",
            "UNASSIGNED"
          ]
        },
        "realAssignee": {
          "description": "The user assigned to issues created with this component, when <code>assigneeType</code> does not identify a valid assignee.",
          "readOnly": true,
          "$ref": "#/definitions/User"
        },
        "isAssigneeTypeValid": {
          "type": "boolean",
          "description": "Whether or not a user is associated with <code>assigneeType</code>. For example, if the <code>assigneeType</code> is set to <code>COMPONENT_LEAD</code> but the component lead is not set, then <code>false</code> is returned.",
          "readOnly": true
        },
        "project": {
          "type": "string",
          "description": "The key of the project to which the component is assigned. Required when creating a component. Can't be updated."
        },
        "projectId": {
          "type": "integer",
          "format": "int64",
          "description": "Not used."
        }
      },
      "xml": {
        "name": "component"
      },
      "description": "Details about a project component."
    },
    "ApplicationRole": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the application role."
        },
        "groups": {
          "type": "array",
          "description": "The groups associated with the application role.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "description": "The display name of the application role."
        },
        "defaultGroups": {
          "type": "array",
          "description": "The groups that are granted default access for this application role.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "selectedByDefault": {
          "type": "boolean",
          "description": "Determines whether this application role should be selected by default on user creation."
        },
        "defined": {
          "type": "boolean",
          "description": "Deprecated."
        },
        "numberOfSeats": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum count of users on your license."
        },
        "remainingSeats": {
          "type": "integer",
          "format": "int32",
          "description": "The count of users remaining on your license."
        },
        "userCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of users counting against your license."
        },
        "userCountDescription": {
          "type": "string",
          "description": "The  <a href=\"https://confluence.atlassian.com/x/lRW3Ng\">type of users</a> being counted against your license."
        },
        "hasUnlimitedSeats": {
          "type": "boolean"
        },
        "platform": {
          "type": "boolean",
          "description": "Indicates if the application role belongs to Jira platform (<code>jira-core</code>)."
        }
      },
      "description": "Details of an application role."
    },
    "AvatarUrls": {
      "type": "object",
      "properties": {
        "16x16": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the item's 16x16 pixel avatar.",
          "readOnly": true
        },
        "24x24": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the item's 24x24 pixel avatar.",
          "readOnly": true
        },
        "32x32": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the item's 32x32 pixel avatar.",
          "readOnly": true
        },
        "48x48": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the item's 48x48 pixel avatar.",
          "readOnly": true
        }
      },
      "description": "Details about the avatars for an item."
    },
    "GroupName": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of group."
        },
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL for these group details.",
          "readOnly": true
        }
      },
      "description": "Details about a group name."
    },
    "ListWrapperCallback": {
      "type": "object"
    },
    "ListWrapperCallbackApplicationRole": {
      "type": "object"
    },
    "ListWrapperCallbackGroupName": {
      "type": "object"
    },
    "ListWrapperCallbackObject": {
      "type": "object"
    },
    "SimpleListWrapper": {
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "max-results": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "items": {
          "type": "array",
          "items": {
            "xml": {
              "name": "items"
            }
          }
        },
        "pagingCallback": {
          "$ref": "#/definitions/ListWrapperCallbackObject"
        },
        "callback": {
          "$ref": "#/definitions/ListWrapperCallbackObject"
        }
      },
      "xml": {
        "name": "list"
      }
    },
    "SimpleListWrapperApplicationRole": {
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "max-results": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "items": {
          "type": "array",
          "items": {
            "xml": {
              "name": "items"
            },
            "$ref": "#/definitions/ApplicationRole"
          }
        },
        "pagingCallback": {
          "$ref": "#/definitions/ListWrapperCallbackApplicationRole"
        },
        "callback": {
          "$ref": "#/definitions/ListWrapperCallbackApplicationRole"
        }
      },
      "xml": {
        "name": "list"
      }
    },
    "SimpleListWrapperGroupName": {
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "max-results": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          }
        },
        "items": {
          "type": "array",
          "items": {
            "xml": {
              "name": "items"
            },
            "$ref": "#/definitions/GroupName"
          }
        },
        "pagingCallback": {
          "$ref": "#/definitions/ListWrapperCallbackGroupName"
        },
        "callback": {
          "$ref": "#/definitions/ListWrapperCallbackGroupName"
        }
      },
      "xml": {
        "name": "list"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the user.",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "This property has been deprecated in favour of <code>accountId</code> due to privacy changes. See the <a href=\"https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/\">migration guide</a> for details. <br>The key of the user. In requests, required unless <code>accountId</code> or <code>name</code> is specified."
        },
        "accountId": {
          "type": "string",
          "description": "The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, <em>384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192</em>. In requests, required unless <code>name</code> or <code>key</code> is specified."
        },
        "name": {
          "type": "string",
          "description": "This property has been deprecated in favour of <code>accountId</code> due to privacy changes. See the <a href=\"https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/\">migration guide</a> for details. <br>The username of the user. In requests, required unless <code>accountId</code> or <code>key</code> is specified."
        },
        "emailAddress": {
          "type": "string",
          "description": "The email address of the user. Depending on the user’s privacy setting, this may be returned as null.",
          "readOnly": true
        },
        "avatarUrls": {
          "type": "object",
          "description": "The avatars of the user.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/AvatarUrls"
            }
          ]
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.",
          "readOnly": true
        },
        "active": {
          "type": "boolean",
          "description": "Indicates whether the user is active.",
          "readOnly": true
        },
        "timeZone": {
          "type": "string",
          "description": "The time zone specified in the user's profile. Depending on the user’s privacy setting, this may be returned as null.",
          "readOnly": true
        },
        "locale": {
          "type": "string",
          "description": "The locale of the user. Depending on the user’s privacy setting, this may be returned as null.",
          "readOnly": true
        },
        "groups": {
          "type": "object",
          "description": "The groups that the user belongs to.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/SimpleListWrapperGroupName"
            }
          ]
        },
        "applicationRoles": {
          "type": "object",
          "description": "The application roles the user is assigned to.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/SimpleListWrapperApplicationRole"
            }
          ]
        },
        "expand": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "description": "Details of expands available for the user details.",
          "readOnly": true
        }
      },
      "xml": {
        "name": "user"
      },
      "description": "A user."
    },
    "ComponentIssuesCount": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL for this count of issues for a component.",
          "readOnly": true
        },
        "issueCount": {
          "type": "integer",
          "format": "int64",
          "description": "The count of issues assigned to a component.",
          "readOnly": true
        }
      },
      "xml": {
        "name": "component"
      },
      "description": "Count of issues assigned to a component."
    },
    "Field": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the field."
        },
        "key": {
          "type": "string",
          "description": "The key of the field."
        },
        "name": {
          "type": "string",
          "description": "The name of the field."
        },
        "custom": {
          "type": "boolean",
          "description": "Indicates whether the field is a custom field."
        },
        "orderable": {
          "type": "boolean",
          "description": "Indicates whether the content of the field can be used to order lists."
        },
        "navigable": {
          "type": "boolean",
          "description": "Indicates whether the field can be used as a column on the issue navigator."
        },
        "searchable": {
          "type": "boolean",
          "description": "Indicates whether the content of the field can be searched."
        },
        "clauseNames": {
          "type": "array",
          "description": "The names that can be used to reference the field in an advanced search. For more information,  see <a href=\"https://confluence.atlassian.com/x/gwORLQ\">Advanced searching - fields reference</a>.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "type": "object",
          "description": "The scope of the field.",
          "allOf": [
            {
              "$ref": "#/definitions/Scope"
            }
          ]
        },
        "schema": {
          "type": "object",
          "description": "The data schema for the field.",
          "allOf": [
            {
              "$ref": "#/definitions/JsonTypeBean"
            }
          ]
        }
      },
      "xml": {
        "name": "field"
      },
      "description": "Details about a field."
    },
    "JsonTypeBean": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The data type of the field.",
          "readOnly": true
        },
        "items": {
          "type": "string",
          "description": "When the data type is an array, the name of the field items within the array.",
          "readOnly": true
        },
        "system": {
          "type": "string",
          "description": "If the field is a system field, the name of the field.",
          "readOnly": true
        },
        "custom": {
          "type": "string",
          "description": "If the field is a custom field, the URI of the field.",
          "readOnly": true
        },
        "customId": {
          "type": "integer",
          "format": "int64",
          "description": "If the field is a custom field, the custom ID of the field.",
          "readOnly": true
        }
      },
      "description": "The schema of a field."
    },
    "ProjectForScope": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of the project details.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the project."
        },
        "key": {
          "type": "string",
          "description": "The key of the project.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the project.",
          "readOnly": true
        },
        "projectTypeKey": {
          "type": "string",
          "description": "The <a href=\"https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes\">project type</a> of the project.",
          "readOnly": true,
          "enum": [
            "ops",
            "software",
            "service_desk",
            "business"
          ]
        },
        "avatarUrls": {
          "type": "object",
          "description": "The URLs of the project's avatars.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/AvatarUrls"
            }
          ]
        },
        "projectCategory": {
          "type": "object",
          "description": "The category the project belongs to.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/UpdatedProjectCategory"
            }
          ]
        }
      },
      "description": "Details about a next-gen project."
    },
    "Scope": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of scope.",
          "readOnly": true,
          "enum": [
            "PROJECT",
            "TEMPLATE"
          ]
        },
        "project": {
          "type": "object",
          "description": "The project the entity has scope in.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ProjectForScope"
            }
          ]
        }
      },
      "description": "The scope of an entity. Indicated for entities associated with <a href=\"https://confluence.atlassian.com/x/loMyO\">next-gen projects</a>."
    },
    "UpdatedProjectCategory": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of the project category.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the project category.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The name of the project category.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The description of the project category.",
          "readOnly": true
        }
      },
      "description": "A project category."
    },
    "CustomFieldDefinitionJsonBean": {
      "type": "object",
      "required": [
        "name",
        "searcherKey",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the custom field, which is displayed in the UI. This is not the unique identifier."
        },
        "description": {
          "type": "string",
          "description": "The description of the custom field, which is displayed in the UI."
        },
        "type": {
          "type": "string",
          "description": "The type of the custom field. For example, <i>com.atlassian.jira.plugin.system.customfieldtypes:grouppicker</i>.<ul><li><code>cascadingselect</code>: Allows multiple values to be selected using two select lists</li><li><code>datepicker</code>: Stores a date using a picker control</li><li><code>datetime</code>: Stores a date with a time component</li><li><code>float</code>: Stores and validates a numeric (floating point) input</li><li><code>grouppicker</code>: Stores a user group using a picker control</li><li><code>importid</code>: A read-only field that stores the previous ID of the issue from the system that it was imported from</li><li><code>labels</code>: Stores labels</li><li><code>multicheckboxes</code>: Stores multiple values using checkboxes<li><code>multigrouppicker</code>: Stores multiple user groups using a picker control</li><li><code>multiselect</code>: Stores multiple values using a select list</li><li><code>multiuserpicker</code>: Stores multiple users using a picker control</li><li><code>multiversion</code>: Stores multiple versions from the versions available in a project using a picker control</li><li><code>project</code>: Stores a project from a list of projects that the user is permitted to view</li><li><code>radiobuttons</code>: Stores a value using radio buttons</li><li><code>readonlyfield</code>: Stores a read-only text value, which can only be populated via the API</li><li><code>select</code>: Stores a value from a configurable list of options</li><li><code>textarea</code>: Stores a long text string using a multiline text area</li><li><code>textfield</code>: Stores a text string using a single line text box</li><li><code>url</code>: Stores a URL</li><li><code>userpicker</code>: Stores a user using a picker control</li><li><code>version</code>: Stores a version using a picker control</li></ul>",
          "enum": [
            "com.atlassian.jira.plugin.system.customfieldtypes:cascadingselect",
            "com.atlassian.jira.plugin.system.customfieldtypes:datepicker",
            "com.atlassian.jira.plugin.system.customfieldtypes:datetime",
            "com.atlassian.jira.plugin.system.customfieldtypes:float",
            "com.atlassian.jira.plugin.system.customfieldtypes:grouppicker",
            "com.atlassian.jira.plugin.system.customfieldtypes:importid",
            "com.atlassian.jira.plugin.system.customfieldtypes:labels",
            "com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes",
            "com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker",
            "com.atlassian.jira.plugin.system.customfieldtypes:multiselect",
            "com.atlassian.jira.plugin.system.customfieldtypes:multiuserpicker",
            "com.atlassian.jira.plugin.system.customfieldtypes:multiversion",
            "com.atlassian.jira.plugin.system.customfieldtypes:project",
            "com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons",
            "com.atlassian.jira.plugin.system.customfieldtypes:readonlyfield",
            "com.atlassian.jira.plugin.system.customfieldtypes:select",
            "com.atlassian.jira.plugin.system.customfieldtypes:textarea",
            "com.atlassian.jira.plugin.system.customfieldtypes:textfield",
            "com.atlassian.jira.plugin.system.customfieldtypes:url",
            "com.atlassian.jira.plugin.system.customfieldtypes:userpicker",
            "com.atlassian.jira.plugin.system.customfieldtypes:version"
          ]
        },
        "searcherKey": {
          "type": "string",
          "description": "The searcher defines the way the field is searched in Jira. For example, <i>com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher</i>.<br>The search UI (basic search and JQL search) will display different operations and values for the field, based on the field searcher. You must specify a searcher that is valid for the field type, as listed below (abbreviated values shown):<ul><li><code>cascadingselect</code>: <code>cascadingselectsearcher</code></li><li><code>datepicker</code>: <code>daterange</code></li><li><code>datetime</code>: <code>datetimerange</code></li><li><code>float</code>: <code>exactnumber</code> or <code>numberrange</code></li><li><code>grouppicker</code>: <code>grouppickersearcher</code></li><li><code>importid</code>: <code>exactnumber</code> or <code>numberrange</code></li><li><code>labels</code>: <code>labelsearcher</code></li><li><code>multicheckboxes</code>: <code>multiselectsearcher</code></li><li><code>multigrouppicker</code>: <code>multiselectsearcher</code></li><li><code>multiselect</code>: <code>multiselectsearcher</code></li><li><code>multiuserpicker</code>: <code>userpickergroupsearcher</code></li><li><code>multiversion</code>: <code>versionsearcher</code></li><li><code>project</code>: <code>projectsearcher</code></li><li><code>radiobuttons</code>: <code>multiselectsearcher</code></li><li><code>readonlyfield</code>: <code>textsearcher</code></li><li><code>select</code>: <code>multiselectsearcher</code></li><li><code>textarea</code>: <code>textsearcher</code></li><li><code>textfield</code>: <code>textsearcher</code></li><li><code>url</code>: <code>exacttextsearcher</code></li><li><code>userpicker</code>: <code>userpickergroupsearcher</code></li><li><code>version</code>: <code>versionsearcher</code></li></ul>",
          "enum": [
            "com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher",
            "com.atlassian.jira.plugin.system.customfieldtypes:daterange",
            "com.atlassian.jira.plugin.system.customfieldtypes:datetimerange",
            "com.atlassian.jira.plugin.system.customfieldtypes:exactnumber",
            "com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher",
            "com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher",
            "com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher",
            "com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher",
            "com.atlassian.jira.plugin.system.customfieldtypes:numberrange",
            "com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher",
            "com.atlassian.jira.plugin.system.customfieldtypes:textsearcher",
            "com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher",
            "com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher"
          ]
        }
      }
    },
    "Resolution": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the issue resolution."
        },
        "id": {
          "type": "string",
          "description": "The ID of the issue resolution."
        },
        "description": {
          "type": "string",
          "description": "The description of the issue resolution."
        },
        "name": {
          "type": "string",
          "description": "The name of the issue resolution."
        }
      },
      "xml": {
        "name": "resolution"
      },
      "description": "Details of an issue resolution."
    },
    "StatusCategory": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of the status category.",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the status category.",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "The key of the status category.",
          "readOnly": true
        },
        "colorName": {
          "type": "string",
          "description": "The name of the color used to represent the status category.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the status category.",
          "readOnly": true
        }
      },
      "description": "A status category."
    },
    "StatusDetails": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of the status.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The description of the status.",
          "readOnly": true
        },
        "iconUrl": {
          "type": "string",
          "description": "The URL of the icon used to represent the status.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the status.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the status.",
          "readOnly": true
        },
        "statusCategory": {
          "type": "object",
          "description": "The category assigned to the status.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/StatusCategory"
            }
          ]
        }
      },
      "description": "A status."
    },
    "FoundUsersAndGroups": {
      "type": "object",
      "properties": {
        "users": {
          "$ref": "#/definitions/FoundUsers"
        },
        "groups": {
          "$ref": "#/definitions/FoundGroups"
        }
      },
      "description": "List of users and groups found in a search."
    },
    "FoundGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the group."
        },
        "html": {
          "type": "string",
          "description": "The group name with the matched query string highlighted with the HTML bold tag."
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupLabel"
          }
        }
      },
      "xml": {
        "name": "group"
      },
      "description": "A group found in a search."
    },
    "FoundGroups": {
      "type": "object",
      "properties": {
        "header": {
          "type": "string",
          "description": "Header text indicating the number of groups in the response and the total number of groups found in the search."
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of groups found in the search."
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FoundGroup"
          }
        }
      },
      "xml": {
        "name": "groupsuggestions"
      },
      "description": "The list of groups found in a search, including header text (Showing X of Y matching groups) and total of matched groups."
    },
    "FoundUsers": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserPickerUser"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of users found in the search."
        },
        "header": {
          "type": "string",
          "description": "Header text indicating the number of users in the response and the total number of users found in the search."
        }
      },
      "description": "The list of users found in a search, including header text (Showing X of Y matching users) and total of matched users."
    },
    "GroupLabel": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "The group label name."
        },
        "title": {
          "type": "string",
          "description": "The title of the group label."
        },
        "type": {
          "type": "string",
          "description": "The type of the group label.",
          "enum": [
            "ADMIN",
            "SINGLE",
            "MULTIPLE"
          ]
        }
      },
      "xml": {
        "name": "grouplabel"
      },
      "description": "A group label."
    },
    "UserPickerUser": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "description": "The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, <em>384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192</em>."
        },
        "name": {
          "type": "string",
          "description": "This property has been deprecated in favour of <code>accountId</code> due to privacy changes. See the <a href=\"https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/\">migration guide</a> for details. <br>The username of the user."
        },
        "key": {
          "type": "string",
          "description": "This property has been deprecated in favour of <code>accountId</code> due to privacy changes. See the <a href=\"https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/\">migration guide</a> for details. <br>The key of the user."
        },
        "html": {
          "type": "string",
          "description": "The display name, email address, and key of the user with the matched query string highlighted with the HTML bold tag."
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the user. Depending on the user’s privacy setting, this may be returned as null."
        },
        "avatarUrl": {
          "type": "string",
          "format": "uri",
          "description": "The avatar URL of the user."
        }
      },
      "description": "A user found in a search."
    },
    "Version": {
      "type": "object",
      "properties": {
        "expand": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "description": "Use <a href=\"em>#expansion\">expand</a> to include additional information about version in the response. This parameter accepts multiple values separated by a comma:\n<ul>\n<li><code>operations</code> Returns the list of operations available for this version.</li>\n<li><code>remotelinks</code> Returns the list of remote links stored against this version.</li>\n<li><code>issuesstatus</code> Returns the count of issues in this version for each of the status categories <em>to do</em>, <em>in progress</em>, <em>done</em>, and <em>unmapped</em>. The <em>unmapped</em> property contains a count of issues with a status other than <em>to do</em>, <em>in progress</em>, and <em>done</em>.</li>\n</ul>\nOptional for create and update."
        },
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the version.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the version.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The description of the version. Optional when creating or updating a version."
        },
        "name": {
          "type": "string",
          "description": "The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters."
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates that the version is archived. Optional when creating or updating a version."
        },
        "released": {
          "type": "boolean",
          "description": "Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version."
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "description": "The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version."
        },
        "releaseDate": {
          "type": "string",
          "format": "date",
          "description": "The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version."
        },
        "overdue": {
          "type": "boolean",
          "description": "Indicates that the version is overdue.",
          "readOnly": true
        },
        "userStartDate": {
          "type": "string",
          "description": "The date on which work on this version is expected to start, expressed in the instance's <em>Day/Month/Year Format</em> date format.",
          "readOnly": true
        },
        "userReleaseDate": {
          "type": "string",
          "description": "The date on which work on this version is expected to finish, expressed in the instance's <em>Day/Month/Year Format</em> date format.",
          "readOnly": true
        },
        "project": {
          "type": "string",
          "description": "Deprecated. Use <code>projectId</code>."
        },
        "projectId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version."
        },
        "moveUnfixedIssuesTo": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version."
        },
        "operations": {
          "type": "array",
          "description": "If the expand option <code>operations</code> is used, returns the list of operations available for this version.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SimpleLink"
          }
        },
        "remotelinks": {
          "type": "array",
          "description": "If the expand option <code>remotelinks</code> is used, returns the list of remote links stored against this version.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RemoteLinkDetails"
          }
        },
        "issuesStatusForFixVersion": {
          "description": "If the expand option <code>issuesstatus</code> is used, returns the count of issues in this version for each of the status categories <em>to do</em>, <em>in progress</em>, <em>done</em>, and <em>unmapped</em>. The <em>unmapped</em> property contains a count of issues with a status other than <em>to do</em>, <em>in progress</em>, and <em>done</em>.",
          "readOnly": true,
          "$ref": "#/definitions/VersionIssuesStatus"
        }
      },
      "xml": {
        "name": "version"
      },
      "description": "Details about a project version."
    },
    "RemoteLinkDetails": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the remote link details.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the remote link.",
          "readOnly": true
        },
        "link": {
          "description": "The URL of the remote link.",
          "readOnly": true
        }
      },
      "description": "Details about a remote link."
    },
    "SimpleLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "styleClass": {
          "type": "string"
        },
        "iconClass": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "xml": {
        "name": "link"
      },
      "description": "Details about the operations available in this version."
    },
    "VersionIssuesStatus": {
      "type": "object",
      "properties": {
        "unmapped": {
          "type": "integer",
          "format": "int64",
          "description": "Count of issues with a status other than <em>to do</em>, <em>in progress</em>, and <em>done</em>.",
          "readOnly": true
        },
        "toDo": {
          "type": "integer",
          "format": "int64",
          "description": "Count of issues with status <em>to do</em>.",
          "readOnly": true
        },
        "inProgress": {
          "type": "integer",
          "format": "int64",
          "description": "Count of issues with status <em>in progress</em>.",
          "readOnly": true
        },
        "done": {
          "type": "integer",
          "format": "int64",
          "description": "Count of issues with status <em>done</em>.",
          "readOnly": true
        }
      },
      "description": "Counts of the number of issues in various statuses."
    },
    "CustomFieldReplacement": {
      "type": "object",
      "properties": {
        "customFieldId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the custom field in which to replace the version number."
        },
        "moveTo": {
          "type": "integer",
          "format": "int64",
          "description": "The version number to use as a replacement for the deleted version."
        }
      },
      "description": "Details about the replacement for a deleted version."
    },
    "DeleteAndReplaceVersionBean": {
      "type": "object",
      "properties": {
        "moveFixIssuesTo": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the version to update <code>fixVersion</code> to when the field \ncontains the deleted version."
        },
        "moveAffectedIssuesTo": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the version to update <code>affectedVersion</code> to when the \nfield contains the deleted version."
        },
        "customFieldReplacementList": {
          "type": "array",
          "description": "An array of custom field IDs &#40;<code>customFieldId</code>&#41; and version IDs \n&#40;<code>moveTo</code>&#41; to update when the fields contain the deleted version.",
          "items": {
            "$ref": "#/definitions/CustomFieldReplacement"
          }
        }
      }
    },
    "VersionIssueCounts": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of these count details.",
          "readOnly": true
        },
        "issuesFixedCount": {
          "type": "integer",
          "format": "int64",
          "description": "Count of issues where the <code>fixVersion</code> is set to the version.",
          "readOnly": true
        },
        "issuesAffectedCount": {
          "type": "integer",
          "format": "int64",
          "description": "Count of issues where the <code>affectedVersion</code> is set to the version.",
          "readOnly": true
        },
        "issueCountWithCustomFieldsShowingVersion": {
          "type": "integer",
          "format": "int64",
          "description": "Count of issues where a version custom field is set to the version.",
          "readOnly": true
        },
        "customFieldUsage": {
          "type": "array",
          "description": "List of custom fields using the version.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/VersionUsageInCustomField"
          }
        }
      },
      "xml": {
        "name": "version"
      },
      "description": "Various counts of issues within a version."
    },
    "VersionUsageInCustomField": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string",
          "description": "The name of the custom field.",
          "readOnly": true
        },
        "customFieldId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the custom field.",
          "readOnly": true
        },
        "issueCountWithVersionInCustomField": {
          "type": "integer",
          "format": "int64",
          "description": "Count of the issues where the custom field contains the version.",
          "readOnly": true
        }
      },
      "description": "List of custom fields using the version."
    },
    "VersionUnresolvedIssuesCount": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of these count details.",
          "readOnly": true
        },
        "issuesUnresolvedCount": {
          "type": "integer",
          "format": "int64",
          "description": "Count of unresolved issues.",
          "readOnly": true
        },
        "issuesCount": {
          "type": "integer",
          "format": "int64",
          "description": "Count of issues.",
          "readOnly": true
        }
      },
      "xml": {
        "name": "version"
      },
      "description": "Count of a version's unresolved issues."
    },
    "VersionMoveBean": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "format": "uri",
          "description": "The URL (self link) of the version after which to place the moved version. Cannot be used with <code>position</code>."
        },
        "position": {
          "type": "string",
          "description": "An absolute position in which to place the moved version. Cannot be used with <code>after</code>.",
          "enum": [
            "Earlier",
            "Later",
            "First",
            "Last"
          ]
        }
      },
      "xml": {
        "name": "version"
      }
    },
    "Transitions": {
      "type": "object",
      "properties": {
        "expand": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "description": "Details of expands available for the transitions list.",
          "readOnly": true
        },
        "transitions": {
          "type": "array",
          "description": "List of issue transitions.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Transition"
          }
        }
      },
      "description": "List of issue transitions."
    },
    "FieldMetadata": {
      "type": "object",
      "required": [
        "key",
        "name",
        "operations",
        "required",
        "schema"
      ],
      "properties": {
        "required": {
          "type": "boolean",
          "description": "Indicates whether the field is required.",
          "readOnly": true
        },
        "schema": {
          "type": "object",
          "description": "The data type of the field.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/JsonTypeBean"
            }
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the field.",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "The key of the field.",
          "readOnly": true
        },
        "autoCompleteUrl": {
          "type": "string",
          "description": "The URL that can be used to automatically complete the field.",
          "readOnly": true
        },
        "hasDefaultValue": {
          "type": "boolean",
          "description": "Indicates whether the field has a default value.",
          "readOnly": true
        },
        "operations": {
          "type": "array",
          "description": "The list of operations that can be performed on the field.",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "allowedValues": {
          "type": "array",
          "description": "The list of values allowed in the field.",
          "readOnly": true,
          "items": {}
        },
        "defaultValue": {
          "description": "The default value of the field.",
          "readOnly": true
        }
      },
      "xml": {
        "name": "availableField"
      },
      "description": "The metadata describing an issue field."
    },
    "Transition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the issue transition. Required when specifying a transition to undertake."
        },
        "name": {
          "type": "string",
          "description": "The name of the issue transition.",
          "readOnly": true
        },
        "to": {
          "type": "object",
          "description": "Details of the issue status after the transition.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/StatusDetails"
            }
          ]
        },
        "hasScreen": {
          "type": "boolean",
          "description": "Indicates whether there is a screen associated with the issue transition.",
          "readOnly": true
        },
        "isGlobal": {
          "type": "boolean",
          "description": "Indicates whether the issue transition is global, that is, the transition can be applied to issues regardless of their status.",
          "readOnly": true
        },
        "isInitial": {
          "type": "boolean",
          "description": "Indicates whether this is the initial issue transition for the workflow.",
          "readOnly": true
        },
        "isConditional": {
          "type": "boolean",
          "description": "Indicates whether the issue has to meet certain criteria before the issue transition can be applied.",
          "readOnly": true
        },
        "fields": {
          "type": "object",
          "description": "Details of the fields associated with the issue transition screen. Use this information to populate <code>fields</code> and <code>update</code> in a transition request.",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "#/definitions/FieldMetadata"
          }
        },
        "expand": {
          "type": "string",
          "description": "Details of expands available for the transition details.",
          "readOnly": true
        }
      },
      "description": "Details of an issue transition."
    },
    "IssuePickerSuggestions": {
      "type": "object",
      "properties": {
        "sections": {
          "type": "array",
          "description": "A list of issues for an issue type suggested for use in auto-completion.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/IssuePickerSuggestionsIssueType"
          }
        }
      },
      "description": "A list of issues suggested for use in auto-completion."
    },
    "IssuePickerSuggestionsIssueType": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "The label of the type of issues suggested for use in auto-completion.",
          "readOnly": true
        },
        "sub": {
          "type": "string",
          "description": "If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the type of issues suggested for use in auto-completion.",
          "readOnly": true
        },
        "msg": {
          "type": "string",
          "description": "If no issue suggestions are found, returns a message indicating no suggestions were found,",
          "readOnly": true
        },
        "issues": {
          "type": "array",
          "description": "A list of issues suggested for use in auto-completion.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SuggestedIssue"
          }
        }
      },
      "description": "A type of issue suggested for use in auto-completion."
    },
    "SuggestedIssue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the issue.",
          "readOnly": true
        },
        "keyHtml": {
          "type": "string",
          "description": "The key of the issue in HTML format.",
          "readOnly": true
        },
        "img": {
          "type": "string",
          "description": "The URL of the issue type's avatar.",
          "readOnly": true
        },
        "summary": {
          "type": "string",
          "description": "The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.",
          "readOnly": true
        },
        "summaryText": {
          "type": "string",
          "description": "The phrase containing the query string, as plain text.",
          "readOnly": true
        }
      },
      "description": "An issue suggested for use in the issue picker auto-completion."
    },
    "EntityProperty": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the property. Required on create and update."
        },
        "value": {
          "description": "The value of the property. Required on create and update."
        }
      },
      "description": "An entity property, for more information see <a href=\"https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/\">Entity properties</a>."
    },
    "FieldUpdateOperation": {
      "type": "object",
      "properties": {
        "add": {
          "example": "{ \"labels\": \"Training\", \"issuelinks\": { \"id\": 10001 } }",
          "description": "A map containing the name of a field and the value to add to it."
        },
        "set": {
          "example": "{ \"summary\": \"A new summary\", \"issuetype\": { \"id\": 10010 } }",
          "description": "A map containing the name of a field and the value to set in it."
        },
        "remove": {
          "example": "{ \"labels\": \"Training\", \"components\": { \"id\": 10017 }}",
          "description": "A map containing the name of a field and the value to removed from it."
        },
        "edit": {
          "example": "{ \"timetracking\": { \"key\": \"JIRA\" } }",
          "description": "A map containing the name of a field and the value to edit in it."
        }
      },
      "description": "Details of an operation to perform on a field."
    },
    "HistoryMetadata": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the history record."
        },
        "description": {
          "type": "string",
          "description": "The description of the history record."
        },
        "activityDescription": {
          "type": "string",
          "description": "The activity described in the history record."
        },
        "activityDescriptionKey": {
          "type": "string",
          "description": "This property is deprecated."
        },
        "emailDescription": {
          "type": "string",
          "description": "The description of the email address associated the history record."
        },
        "emailDescriptionKey": {
          "type": "string",
          "description": "This property is deprecated."
        },
        "actor": {
          "type": "object",
          "description": "Details of the user whose action created the history record.",
          "allOf": [
            {
              "$ref": "#/definitions/HistoryMetadataParticipant"
            }
          ]
        },
        "generator": {
          "type": "object",
          "description": "Details of the system that generated the history record.",
          "allOf": [
            {
              "$ref": "#/definitions/HistoryMetadataParticipant"
            }
          ]
        },
        "cause": {
          "type": "object",
          "description": "Details of the cause that triggered the creation the history record.",
          "allOf": [
            {
              "$ref": "#/definitions/HistoryMetadataParticipant"
            }
          ]
        },
        "extraData": {
          "type": "object",
          "description": "Additional arbitrary information about the history record.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "Details of issue history metadata."
    },
    "HistoryMetadataParticipant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the user or system associated with a history record."
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the user or system associated with a history record."
        },
        "displayNameKey": {
          "type": "string",
          "description": "This property is deprecated."
        },
        "type": {
          "type": "string",
          "description": "The type of the user or system associated with a history record."
        },
        "avatarUrl": {
          "type": "string",
          "description": "The URL to an avatar for the user or system associated with a history record."
        },
        "url": {
          "type": "string",
          "description": "The URL of the user or system associated with a history record."
        }
      },
      "description": "Details of user or system associated with a issue history metadata item."
    },
    "IssueUpdateDetails": {
      "type": "object",
      "properties": {
        "transition": {
          "description": "Details of a transition. Required when performing a transition, optional when creating or editing an issue.",
          "$ref": "#/definitions/Transition"
        },
        "fields": {
          "type": "object",
          "description": "List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a single sub-field. When multiple sub-fields or other operations are required, use <code>update</code>. Fields included in here cannot be included in <code>update</code>.",
          "additionalProperties": {}
        },
        "update": {
          "type": "object",
          "description": "List of operations to perform on issue screen fields. Note that fields included in here cannot be included in <code>fields</code>.",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FieldUpdateOperation"
            }
          }
        },
        "historyMetadata": {
          "description": "Additional issue history details.",
          "$ref": "#/definitions/HistoryMetadata"
        },
        "properties": {
          "type": "array",
          "description": "Details of issue properties to be add or update.",
          "items": {
            "$ref": "#/definitions/EntityProperty"
          }
        }
      },
      "description": "Details of an issue update request."
    },
    "Votes": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of these issue vote details.",
          "readOnly": true
        },
        "votes": {
          "type": "integer",
          "format": "int64",
          "description": "The number of votes on the issue.",
          "readOnly": true
        },
        "hasVoted": {
          "type": "boolean",
          "description": "Indicates whether the user making this request has voted on the issue.",
          "readOnly": true
        },
        "voters": {
          "type": "array",
          "description": "List of the users who have voted on this issue. An empty list is returned when the calling user doesn't have the <em>View voters and watchers</em> project permission.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      },
      "description": "The details of votes on an issue."
    },
    "Issue": {
      "type": "object",
      "properties": {
        "expand": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "description": "Details of the expands available for an issue.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the issue.",
          "readOnly": true
        },
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the issue details.",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "The key of the issue.",
          "readOnly": true
        },
        "renderedFields": {
          "type": "object",
          "description": "The rendered value of each field present on the issue.",
          "readOnly": true,
          "additionalProperties": {}
        },
        "properties": {
          "type": "object",
          "description": "Details of the issue properties identified in the request.",
          "readOnly": true,
          "additionalProperties": {}
        },
        "names": {
          "type": "object",
          "description": "The display name of each field present on the issue.",
          "readOnly": true,
          "additionalProperties": {
            "type": "string"
          }
        },
        "schema": {
          "type": "object",
          "description": "The schema describing each field present on the issue.",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "#/definitions/JsonTypeBean"
          }
        },
        "transitions": {
          "type": "array",
          "description": "The transitions that can be performed on the issue.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Transition"
          }
        },
        "operations": {
          "type": "object",
          "description": "The operations that can be performed on the issue.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/Operations"
            }
          ]
        },
        "editmeta": {
          "type": "object",
          "description": "The metadata for the fields on the issue that can be amended.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/IssueUpdateMetadata"
            }
          ]
        },
        "changelog": {
          "type": "object",
          "description": " Details of changelogs associated with the issue.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/PageOfChangelogs"
            }
          ]
        },
        "versionedRepresentations": {
          "type": "object",
          "description": "The versions of each field on the issue.",
          "readOnly": true,
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {}
          }
        },
        "fields": {
          "type": "object",
          "additionalProperties": {}
        }
      },
      "xml": {
        "name": "issue"
      },
      "description": "Details about an issue."
    },
    "ChangeDetails": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "description": "The name of the field changed.",
          "readOnly": true
        },
        "fieldtype": {
          "type": "string",
          "description": "The type of the field changed.",
          "readOnly": true
        },
        "fieldId": {
          "type": "string",
          "description": "The ID of the field changed.",
          "readOnly": true
        },
        "from": {
          "type": "string",
          "description": "The details of the original value.",
          "readOnly": true
        },
        "fromString": {
          "type": "string",
          "description": "The details of the original value as a string.",
          "readOnly": true
        },
        "to": {
          "type": "string",
          "description": "The details of the new value.",
          "readOnly": true
        },
        "toString": {
          "type": "string",
          "description": "The details of the new value as a string.",
          "readOnly": true
        }
      },
      "description": "A change item."
    },
    "Changelog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the changelog.",
          "readOnly": true
        },
        "author": {
          "type": "object",
          "description": "The user who made the change.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/UserDetails"
            }
          ]
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date on which the change took place.",
          "readOnly": true
        },
        "items": {
          "type": "array",
          "description": "The list of items changed.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ChangeDetails"
          }
        },
        "historyMetadata": {
          "type": "object",
          "description": "The history metadata associated with the changed.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/HistoryMetadata"
            }
          ]
        }
      },
      "description": "A changelog."
    },
    "IssueUpdateMetadata": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "description": "A list of editable field details.",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "#/definitions/FieldMetadata"
          }
        }
      },
      "description": "A list of editable field details."
    },
    "LinkGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "styleClass": {
          "type": "string"
        },
        "header": {
          "$ref": "#/definitions/SimpleLink"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimpleLink"
          }
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkGroup"
          }
        }
      },
      "description": "Details a link group, which defines issue operations."
    },
    "Operations": {
      "type": "object",
      "properties": {
        "linkGroups": {
          "type": "array",
          "description": "Details of the link groups defining issue operations.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/LinkGroup"
          }
        }
      },
      "description": "Details of the operations that can be performed on the issue."
    },
    "PageOfChangelogs": {
      "type": "object",
      "properties": {
        "startAt": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the first item returned on the page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of results that could be on the page.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The number of results on the page.",
          "readOnly": true
        },
        "histories": {
          "type": "array",
          "description": "The list of changelogs.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Changelog"
          }
        }
      },
      "description": "A page of changelogs."
    },
    "UserDetails": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of the user.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "This property has been deprecated in favour of <code>accountId</code> due to privacy changes. See the <a href=\"https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/\">migration guide</a> for details. <br>The username of the user.",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "This property has been deprecated in favour of <code>accountId</code> due to privacy changes. See the <a href=\"https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/\">migration guide</a> for details. <br>The key of the user.",
          "readOnly": true
        },
        "accountId": {
          "type": "string",
          "description": "The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, <em>384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192</em>.",
          "readOnly": true
        },
        "emailAddress": {
          "type": "string",
          "description": "The email address of the user. Depending on the user’s privacy setting, this may be returned as null.",
          "readOnly": true
        },
        "avatarUrls": {
          "type": "object",
          "description": "The avatars of the user.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/AvatarUrls"
            }
          ]
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.",
          "readOnly": true
        },
        "active": {
          "type": "boolean",
          "description": "Whether the user is active.",
          "readOnly": true
        },
        "timeZone": {
          "type": "string",
          "description": "The time zone specified in the user's profile. Depending on the user’s privacy setting, this may be returned as null.",
          "readOnly": true
        }
      },
      "description": "User details. Note, cannot be specified as a body parameter in <a href=\"#api-api-2-issue-issue-issueIdOrKey-worklog-post\">Add worklog</a> or <a href=\"#api-api-2-issue-issueIdOrKey-worklog-id-put\">Update worklog</a>."
    },
    "Watchers": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of these issue watcher details.",
          "readOnly": true
        },
        "isWatching": {
          "type": "boolean",
          "description": "Indicates whether the calling user is watching this issue.",
          "readOnly": true
        },
        "watchCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of users watching this issue.",
          "readOnly": true
        },
        "watchers": {
          "type": "array",
          "description": "Details of the users watching this issue.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/UserDetails"
          }
        }
      },
      "xml": {
        "name": "watchers"
      },
      "description": "The details of watchers on an issue."
    },
    "ErrorCollection": {
      "type": "object",
      "properties": {
        "errorMessages": {
          "type": "array",
          "description": "The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"",
          "items": {
            "type": "string"
          }
        },
        "errors": {
          "type": "object",
          "description": "The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "Error messages from an operation."
    },
    "CreatedIssue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the created issue or sub-task.",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "The key of the created issue or sub-task.",
          "readOnly": true
        },
        "self": {
          "type": "string",
          "description": "The URL of the created issue or sub-task.",
          "readOnly": true
        },
        "transition": {
          "type": "object",
          "description": "The response code and messages related to any requested transition.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/NestedResponse"
            }
          ]
        }
      },
      "description": "Details about a created issue or sub-task."
    },
    "NestedResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "errorCollection": {
          "$ref": "#/definitions/ErrorCollection"
        }
      }
    },
    "IssuesUpdateBean": {
      "type": "object",
      "properties": {
        "issueUpdates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IssueUpdateDetails"
          }
        }
      }
    },
    "CreatedIssues": {
      "type": "object",
      "properties": {
        "issues": {
          "type": "array",
          "description": "Details of the issues created.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/CreatedIssue"
          }
        },
        "errors": {
          "type": "array",
          "description": "Error details for failed issue creation requests.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/BulkOperationErrorResult"
          }
        }
      },
      "description": "Details about the issues created and the errors for requests that failed."
    },
    "BulkOperationErrorResult": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "elementErrors": {
          "$ref": "#/definitions/ErrorCollection"
        },
        "failedElementNumber": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "IssueCreateMetadata": {
      "type": "object",
      "properties": {
        "expand": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "description": "Details of the expands available for the project list.",
          "readOnly": true
        },
        "projects": {
          "type": "array",
          "description": "List of projects and their issue creation metadata.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ProjectIssueCreateMetadata"
          }
        }
      },
      "description": "The wrapper for the issue creation metadata for a list of projects."
    },
    "IssueTypeIssueCreateMetadata": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of these issue type details.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the issue type.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The description of the issue type.",
          "readOnly": true
        },
        "iconUrl": {
          "type": "string",
          "description": "The URL of the issue type's avatar.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the issue type.",
          "readOnly": true
        },
        "subtask": {
          "type": "boolean",
          "description": "Indicates whether this issue type can be used to create subtasks.",
          "readOnly": true
        },
        "avatarId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the issue type's avatar.",
          "readOnly": true
        },
        "scope": {
          "type": "object",
          "description": "Details of the next-gen projects the issue type is available in.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/Scope"
            }
          ]
        },
        "expand": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "description": "Details of expands available for the issue type issue create metadata.",
          "readOnly": true
        },
        "fields": {
          "type": "object",
          "description": "List of the fields available when creating an issue for the issue type.",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "#/definitions/FieldMetadata"
          }
        }
      },
      "description": "Details of the issue creation metadata for an issue type."
    },
    "ProjectIssueCreateMetadata": {
      "type": "object",
      "properties": {
        "expand": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "description": "Details of expands available for the project issue create metadata.",
          "readOnly": true
        },
        "self": {
          "type": "string",
          "description": "The URL of the project.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the project.",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "The key of the project.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the project.",
          "readOnly": true
        },
        "avatarUrls": {
          "type": "object",
          "description": "List of the project's avatars, returning the avatar size and associated URL.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/AvatarUrls"
            }
          ]
        },
        "issuetypes": {
          "type": "array",
          "description": "List of the issue types supported by the project.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/IssueTypeIssueCreateMetadata"
          }
        }
      },
      "description": "Details of the issue creation metadata for a project."
    },
    "RemoteIssueLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the link."
        },
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the link."
        },
        "globalId": {
          "type": "string",
          "description": "The global ID of the link, such as the ID of the item on the remote system."
        },
        "application": {
          "type": "object",
          "description": "Details of the remote application the linked item is in.",
          "allOf": [
            {
              "$ref": "#/definitions/Application"
            }
          ]
        },
        "relationship": {
          "type": "string",
          "description": "Description of the relationship between the issue and the linked item."
        },
        "object": {
          "type": "object",
          "description": "Details of the item linked to.",
          "allOf": [
            {
              "$ref": "#/definitions/RemoteObject"
            }
          ]
        }
      },
      "description": "Details of an issue remote link."
    },
    "Application": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The name-spaced type of the application, used by registered rendering apps."
        },
        "name": {
          "type": "string",
          "description": "The name of the application."
        }
      },
      "description": "The application the linked item is in."
    },
    "IconBean": {
      "type": "object",
      "properties": {
        "url16x16": {
          "type": "string",
          "description": "The URL of a 16x16 pixel icon."
        },
        "title": {
          "type": "string",
          "description": "The title of the icon, for use as a tooltip on the icon."
        },
        "link": {
          "type": "string",
          "description": "The URL of the tooltip, used only for a status icon."
        }
      },
      "xml": {
        "name": "icon"
      },
      "description": "An icon."
    },
    "RemoteObject": {
      "type": "object",
      "required": [
        "title",
        "url"
      ],
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the item."
        },
        "title": {
          "type": "string",
          "description": "The title of the item."
        },
        "summary": {
          "type": "string",
          "description": "The summary details of the item."
        },
        "icon": {
          "description": "Details of the icon for the item.",
          "$ref": "#/definitions/Icon"
        },
        "status": {
          "description": "The status of the item.",
          "$ref": "#/definitions/Status"
        }
      },
      "description": "The linked item."
    },
    "Status": {
      "type": "object",
      "properties": {
        "resolved": {
          "type": "boolean",
          "description": "Indicates whether the item is resolved."
        },
        "icon": {
          "description": "Details of the icon representing the status.",
          "$ref": "#/definitions/Icon"
        }
      },
      "description": "The status of the item."
    },
    "Icon": {
      "type": "object",
      "properties": {
        "url16x16": {
          "type": "string",
          "description": "The URL of a 16x16 pixel icon."
        },
        "title": {
          "type": "string",
          "description": "The title of the icon, for use as a tooltip on the icon."
        },
        "link": {
          "type": "string",
          "description": "The URL of the tooltip, used only for a status icon."
        }
      },
      "description": "An icon."
    },
    "RemoteIssueLinkRequest": {
      "type": "object",
      "required": [
        "object"
      ],
      "properties": {
        "globalId": {
          "type": "string",
          "description": "The global ID of the link, such as the ID of the item on the remote system. The maximum length is 255 characters."
        },
        "application": {
          "description": "Details of the remote application the linked item is in. For example, trello.",
          "$ref": "#/definitions/Application"
        },
        "relationship": {
          "type": "string",
          "description": "Description of the relationship between the issue and the linked item."
        },
        "object": {
          "description": "Details of the item linked to.",
          "$ref": "#/definitions/RemoteObject"
        }
      },
      "description": "Details of a remote issue link."
    },
    "RemoteIssueLinkIdentifies": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "description": "The ID of the remote issue link, such as the ID of the item on the remote system.",
          "readOnly": true
        },
        "self": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "description": "The URL of the remote issue link.",
          "readOnly": true
        }
      },
      "description": "Details of the identifiers for a created or updated remote issue link."
    },
    "Notification": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string",
          "description": "The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary."
        },
        "textBody": {
          "type": "string",
          "description": "The plain text body of the email notification for the issue."
        },
        "htmlBody": {
          "type": "string",
          "description": "The HTML body of the email notification for the issue."
        },
        "to": {
          "description": "The recipients of the email notification for the issue.",
          "$ref": "#/definitions/NotificationRecipients"
        },
        "restrict": {
          "description": "Restricts the notifications to users with the specified permissions.",
          "$ref": "#/definitions/NotificationRecipientsRestrictions"
        }
      },
      "description": "Details about a notification."
    },
    "NotificationRecipients": {
      "type": "object",
      "properties": {
        "reporter": {
          "type": "boolean",
          "description": "Indicates whether the notification should be sent to the issue's reporter."
        },
        "assignee": {
          "type": "boolean",
          "description": "Indicates whether the notification should be sent to the issue's assignees."
        },
        "watchers": {
          "type": "boolean",
          "description": "Indicates whether the notification should be sent to the issue's watchers."
        },
        "voters": {
          "type": "boolean",
          "description": "Indicates whether the notification should be sent to the issue's voters."
        },
        "users": {
          "type": "array",
          "description": "List of users to receive the notification.",
          "items": {
            "$ref": "#/definitions/UserDetails"
          }
        },
        "groups": {
          "type": "array",
          "description": "List of groups to receive the notification.",
          "items": {
            "$ref": "#/definitions/GroupName"
          }
        }
      },
      "description": "Details of the users and groups to receive the notification."
    },
    "NotificationRecipientsRestrictions": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "description": "List of group memberships required to receive the notification.",
          "items": {
            "$ref": "#/definitions/GroupName"
          }
        },
        "permissions": {
          "type": "array",
          "description": "List of permissions required to receive the notification.",
          "items": {
            "$ref": "#/definitions/RestrictedPermission"
          }
        }
      },
      "description": "Details of the group membership or permissions needed to receive the notification."
    },
    "RestrictedPermission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the permission. Either <code>id</code> or <code>key</code> must be specified. Use <a href=\"#api-api-2-permissions-get\">Get all permissions</a> to get the list of permissions."
        },
        "key": {
          "type": "string",
          "description": "The key of the permission. Either <code>id</code> or <code>key</code> must be specified. Use <a href=\"#api-api-2-permissions-get\">Get all permissions</a> to get the list of permissions."
        }
      },
      "description": "Details of the permission."
    },
    "ProjectCategory": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the project category.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the project category.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the project category. Required on create, optional on update."
        },
        "description": {
          "type": "string",
          "description": "The description of the project category. Required on create, optional on update."
        }
      },
      "description": "A project category."
    },
    "PropertyKeys": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "description": "Property key details.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PropertyKey"
          }
        }
      },
      "description": "List of property keys."
    },
    "PropertyKey": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of the property.",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "The key of the property.",
          "readOnly": true
        }
      },
      "description": "Property key details."
    },
    "ScreenableTab": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the screen tab.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the screen tab. Required on create and update. The maximum length is 255 characters."
        }
      },
      "description": "A screen tab."
    },
    "PageOfScreen": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the page.",
          "readOnly": true
        },
        "nextPage": {
          "type": "string",
          "format": "uri",
          "description": "If there is another page of results, the URL of the next page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that could be returned.",
          "readOnly": true
        },
        "startAt": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the first item returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned.",
          "readOnly": true
        },
        "isLast": {
          "type": "boolean",
          "description": "Indicates whether this is the last page.",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Screen"
          }
        }
      },
      "description": "A page of items."
    },
    "PageOf": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the page.",
          "readOnly": true
        },
        "nextPage": {
          "type": "string",
          "format": "uri",
          "description": "If there is another page of results, the URL of the next page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that could be returned.",
          "readOnly": true
        },
        "startAt": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the first item returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned.",
          "readOnly": true
        },
        "isLast": {
          "type": "boolean",
          "description": "Indicates whether this is the last page.",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {}
        }
      },
      "description": "A page of items."
    },
    "Screen": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the screen.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the screen.",
          "readOnly": true
        }
      },
      "description": "A screen."
    },
    "ScreenableField": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the screen tab field.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the screen tab field. Required on create and update. The maximum length is 255 characters."
        }
      },
      "description": "A screen tab field."
    },
    "MoveFieldBean": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "format": "uri",
          "description": "The ID of the screen tab field after which to place the moved screen tab field. Required if <code>position</code> isn't provided."
        },
        "position": {
          "type": "string",
          "description": "The named position to which the screen tab field should be moved. Required if <code>after</code> isn't provided.",
          "enum": [
            "Earlier",
            "Later",
            "First",
            "Last"
          ]
        }
      }
    },
    "AddFieldBean": {
      "type": "object",
      "required": [
        "fieldId"
      ],
      "properties": {
        "fieldId": {
          "type": "string",
          "description": "The ID of the field to add."
        }
      }
    },
    "SystemAvatars": {
      "type": "object",
      "properties": {
        "system": {
          "type": "array",
          "description": "A list of avatar details.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Avatar"
          }
        }
      },
      "description": "List of system avatars."
    },
    "Avatar": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the avatar. Required when setting the project avatar."
        },
        "owner": {
          "type": "string",
          "description": "The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the key for a user.",
          "readOnly": true
        },
        "isSystemAvatar": {
          "type": "boolean",
          "description": "Indicates whether the avatar is a system avatar.",
          "readOnly": true
        },
        "isSelected": {
          "type": "boolean",
          "description": "Indicates whether the avatar is used in Jira. For example, shown as a project's avatar.",
          "readOnly": true
        },
        "isDeletable": {
          "type": "boolean",
          "description": "Indicates whether the avatar can be deleted.",
          "readOnly": true
        },
        "fileName": {
          "type": "string",
          "description": "The file name of the avatar icon. Returned for system avatars.",
          "readOnly": true
        },
        "urls": {
          "type": "object",
          "description": "The list of avatar icon URLs.",
          "readOnly": true,
          "additionalProperties": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "description": "Details of an avatar."
    },
    "Avatars": {
      "type": "object",
      "properties": {
        "system": {
          "type": "array",
          "description": "System avatars list.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Avatar"
          }
        },
        "custom": {
          "type": "array",
          "description": "Custom avatars list.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Avatar"
          }
        }
      },
      "description": "Details about system and custom avatars."
    },
    "Group": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of group."
        },
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL for these group details.",
          "readOnly": true
        },
        "users": {
          "type": "object",
          "description": "A paginated list of the users that are members of the group. A maximum of 50 users is returned in the list, to access additional users append <code>[start-index:end-index]</code> to the expand request. For example, to access the next 50 users, use<code>?expand=users[51:100]</code>.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/PagedListUserDetailsApplicationUser"
            }
          ]
        },
        "expand": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "description": "Details of the expands available for the group list.",
          "readOnly": true
        }
      }
    },
    "PagedList": {
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The number of items on the page.",
          "readOnly": true
        },
        "max-results": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The maximum number of results that could be on the page.",
          "readOnly": true
        },
        "start-index": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The index of the first item returned on the page.",
          "readOnly": true
        },
        "end-index": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The index of the last item returned on the page.",
          "readOnly": true
        },
        "items": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "xml": {
              "name": "items"
            }
          }
        }
      },
      "description": "A paged list. To access additional details append <code>[start-index:end-index]</code> to the expand request. For example, <code>?expand=sharedUsers[10:40]</code> returns a list starting at item 10 and finishing at item 40."
    },
    "PagedListUserDetailsApplicationUser": {
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The number of items on the page.",
          "readOnly": true
        },
        "max-results": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The maximum number of results that could be on the page.",
          "readOnly": true
        },
        "start-index": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The index of the first item returned on the page.",
          "readOnly": true
        },
        "end-index": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The index of the last item returned on the page.",
          "readOnly": true
        },
        "items": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "xml": {
              "name": "items"
            },
            "$ref": "#/definitions/UserDetails"
          }
        }
      },
      "description": "A paged list. To access additional details append <code>[start-index:end-index]</code> to the expand request. For example, <code>?expand=sharedUsers[10:40]</code> returns a list starting at item 10 and finishing at item 40."
    },
    "PageOfUserDetails": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the page.",
          "readOnly": true
        },
        "nextPage": {
          "type": "string",
          "format": "uri",
          "description": "If there is another page of results, the URL of the next page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that could be returned.",
          "readOnly": true
        },
        "startAt": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the first item returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned.",
          "readOnly": true
        },
        "isLast": {
          "type": "boolean",
          "description": "Indicates whether this is the last page.",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/UserDetails"
          }
        }
      },
      "description": "A page of items."
    },
    "AddGroupBean": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the group."
        }
      }
    },
    "UpdateUserToGroupBean": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The username of the user.<br>This property has been deprecated in favour of <code>accountId</code> due to privacy changes. See the <a href=\"https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/\">migration guide</a> for details. Cannot be provided if <code>accountId</code> is provided."
        },
        "accountId": {
          "type": "string",
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, <em>384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192</em>.<br>Cannot be provided if <code>name</code> is provided."
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "expand": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "description": "Details of expands available for project details.",
          "readOnly": true
        },
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the project details.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the project."
        },
        "key": {
          "type": "string",
          "description": "The key of the project.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "A brief description of the project.",
          "readOnly": true
        },
        "lead": {
          "description": "The username of the project lead.",
          "readOnly": true,
          "$ref": "#/definitions/User"
        },
        "components": {
          "type": "array",
          "description": "List of the components contained in the project.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Component"
          }
        },
        "issueTypes": {
          "type": "array",
          "description": "List of the issue types available in the project.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/IssueType"
          }
        },
        "url": {
          "type": "string",
          "description": "A link to information about this project, such as project documentation.",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "description": "An email address associated with the project."
        },
        "assigneeType": {
          "type": "string",
          "description": "The default assignee when creating issues for this project.",
          "readOnly": true,
          "enum": [
            "PROJECT_LEAD",
            "UNASSIGNED"
          ]
        },
        "versions": {
          "type": "array",
          "description": "The versions defined in the project. For more information, see <a href=\"#api-api-2-version-post\">Create version</a>.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Version"
          }
        },
        "name": {
          "type": "string",
          "description": "The name of the project.",
          "readOnly": true
        },
        "roles": {
          "type": "object",
          "description": "The roles defined in the project. For more information, see <a href=\"#api-api-2-role-post\">Create project role</a>.",
          "readOnly": true,
          "additionalProperties": {
            "type": "string",
            "format": "uri"
          }
        },
        "avatarUrls": {
          "description": "The URLs of the project's avatars.",
          "readOnly": true,
          "$ref": "#/definitions/AvatarUrls"
        },
        "projectCategory": {
          "description": "The category the project belongs to.",
          "readOnly": true,
          "$ref": "#/definitions/ProjectCategory"
        },
        "projectTypeKey": {
          "type": "string",
          "description": "The <a href=\"https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes\">project type</a> of the project.",
          "readOnly": true,
          "enum": [
            "ops",
            "software",
            "service_desk",
            "business"
          ]
        },
        "simplified": {
          "type": "boolean",
          "description": "Indicates whether the project is simplified.",
          "readOnly": true
        },
        "style": {
          "type": "string",
          "description": "The type of the project.",
          "readOnly": true,
          "enum": [
            "classic",
            "next-gen"
          ]
        },
        "isPrivate": {
          "type": "boolean",
          "description": "Indicates whether the project is private.",
          "readOnly": true
        }
      },
      "xml": {
        "name": "project"
      },
      "description": "Details about a project."
    },
    "IssueType": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of these issue type details.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the issue type.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The description of the issue type.",
          "readOnly": true
        },
        "iconUrl": {
          "type": "string",
          "description": "The URL of the issue type's avatar.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the issue type.",
          "readOnly": true
        },
        "subtask": {
          "type": "boolean",
          "description": "Indicates whether this issue type can be used to create subtasks.",
          "readOnly": true
        },
        "avatarId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the issue type's avatar.",
          "readOnly": true
        },
        "scope": {
          "type": "object",
          "description": "Details of the next-gen projects the issue type is available in.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/Scope"
            }
          ]
        }
      },
      "description": "Details about an issue type."
    },
    "ProjectInputBean": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters. Required when creating a project. Optional when updating a project."
        },
        "name": {
          "type": "string",
          "description": "The name of the project. Required when creating a project. Optional when updating a project."
        },
        "projectTypeKey": {
          "type": "string",
          "description": "The <a href=\" https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes\">project type</a>, which dictates the application-specific feature set. Required when creating a project. Not applicable for the Update project resource. See the <a href=\"#api-api-2-project-projectIdOrKey-type-newProjectTypeKey-put\">Update project type</a> resource instead.",
          "enum": [
            "business",
            "ops",
            "service_desk",
            "software"
          ]
        },
        "projectTemplateKey": {
          "type": "string",
          "description": "A prebuilt configuration for a project. The type of the <code>projectTemplateKey</code> must match with the type of the <code>projectTypeKey</code>. Required when creating a project. Not applicable for the Update project resource.",
          "enum": [
            "com.pyxis.greenhopper.jira:gh-simplified-agility-kanban",
            "com.pyxis.greenhopper.jira:gh-simplified-agility-scrum",
            "com.pyxis.greenhopper.jira:gh-simplified-basic",
            "com.pyxis.greenhopper.jira:gh-simplified-kanban-classic",
            "com.pyxis.greenhopper.jira:gh-simplified-scrum-classic",
            "com.atlassian.servicedesk:simplified-it-service-desk",
            "com.atlassian.servicedesk:simplified-internal-service-desk",
            "com.atlassian.servicedesk:simplified-external-service-desk",
            "com.atlassian.jira-core-project-templates:jira-core-simplified-content-management",
            "com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval",
            "com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking",
            "com.atlassian.jira-core-project-templates:jira-core-simplified-process-control",
            "com.atlassian.jira-core-project-templates:jira-core-simplified-procurement",
            "com.atlassian.jira-core-project-templates:jira-core-simplified-project-management",
            "com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment",
            "com.atlassian.jira-core-project-templates:jira-core-simplified-task-trackingcom.atlassian.jira.jira-incident-management-plugin:im-incident-management"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the project."
        },
        "lead": {
          "type": "string",
          "description": "This parameter has been deprecated due to privacy changes. Use <code>leadAccountId</code> instead. See the <a href=\"https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/\">migration guide</a> for details.\nThe user name of the project lead. Either <code>lead</code> or <code>leadAccountId</code> must be set when creating a project. Optional when updating a project. Cannot be provided with <code>leadAccountId</code>."
        },
        "leadAccountId": {
          "type": "string",
          "description": "The account id of the project lead. Either <code>lead</code> or <code>leadAccountId</code> must be set when creating a project. Optional when updating a project. Cannot be provided with <code>lead</code>."
        },
        "url": {
          "type": "string",
          "description": "A link to information about this project, such as project documentation"
        },
        "assigneeType": {
          "type": "string",
          "description": "The default assignee when creating issues for this project.",
          "enum": [
            "PROJECT_LEAD",
            "UNASSIGNED"
          ]
        },
        "avatarId": {
          "type": "integer",
          "format": "int64",
          "description": "An integer value for the project's avatar."
        },
        "issueSecurityScheme": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the <a href=\"#api-api-2-issuesecurityschemes-get\">Get issue security schemes</a> resource to get all issue security scheme IDs."
        },
        "permissionScheme": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the permission scheme for the project. Use the <a href=\"#api-api-2-permissionscheme-get\">Get all permission schemes</a> resource to see a list of all permission scheme IDs."
        },
        "notificationScheme": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the notification scheme for the project. Use the <a href=\"#api-api-2-notificationscheme-get\">Get notification schemes</a> resource to get a list of notification scheme IDs."
        },
        "categoryId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the project's category. A complete list of category IDs can be found using the <a href=\"#api-api-2-projectCategory-get\">Get all project categories</a> resource."
        }
      }
    },
    "ProjectIdentifiers": {
      "type": "object",
      "required": [
        "id",
        "key",
        "self"
      ],
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the created project.",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the created project.",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "The key of the created project.",
          "readOnly": true
        }
      },
      "description": "Identifiers for a project."
    },
    "PageOfVersion": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the page.",
          "readOnly": true
        },
        "nextPage": {
          "type": "string",
          "format": "uri",
          "description": "If there is another page of results, the URL of the next page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that could be returned.",
          "readOnly": true
        },
        "startAt": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the first item returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned.",
          "readOnly": true
        },
        "isLast": {
          "type": "boolean",
          "description": "Indicates whether this is the last page.",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Version"
          }
        }
      },
      "description": "A page of items."
    },
    "PageOfComponentWithIssueCount": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the page.",
          "readOnly": true
        },
        "nextPage": {
          "type": "string",
          "format": "uri",
          "description": "If there is another page of results, the URL of the next page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that could be returned.",
          "readOnly": true
        },
        "startAt": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the first item returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned.",
          "readOnly": true
        },
        "isLast": {
          "type": "boolean",
          "description": "Indicates whether this is the last page.",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ComponentWithIssueCount"
          }
        }
      },
      "description": "A page of items."
    },
    "ComponentWithIssueCount": {
      "type": "object",
      "properties": {
        "issueCount": {
          "type": "integer",
          "format": "int64",
          "description": "Count of issues for the component.",
          "readOnly": true
        },
        "project": {
          "type": "string",
          "description": "The key of the project to which the component is assigned.",
          "readOnly": true
        },
        "isAssigneeTypeValid": {
          "type": "boolean",
          "description": "Whether or not a user is associated with <code>assigneeType</code>. For example, if the <code>assigneeType</code> is set to <code>COMPONENT_LEAD</code> but the component lead is not set, then <code>false</code> is returned.",
          "readOnly": true
        },
        "assignee": {
          "type": "object",
          "description": "The details of the user associated with <code>assigneeType</code>, if any. See <code>realAssignee</code> for details of the user assigned to issues created with this component.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/User"
            }
          ]
        },
        "realAssignee": {
          "type": "object",
          "description": "The user assigned to issues created with this component, when <code>assigneeType</code> does not identify a valid assignee.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/User"
            }
          ]
        },
        "realAssigneeType": {
          "type": "string",
          "description": "The actual type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the <code>assigneeType</code>. For example, <code>assigneeType</code> is set to <code>COMPONENT_LEAD</code> but no component lead is set. This property is set to one of the following values:<ul><li><code>PROJECT_LEAD</code> when <code>assigneeType</code> is <code>PROJECT_LEAD</code> and the project lead has permission to be assigned issues in the project that the component is in.</li> <li><code>COMPONENT_LEAD</code> when <code>assignee</code>Type is <code>COMPONENT_LEAD</code> and the component lead has permission to be assigned issues in the project that the component is in.</li> <li><code>UNASSIGNED</code> when <code>assigneeType</code> is <code>UNASSIGNED</code> and Jira is configured to allow unassigned issues.</li> <li><code>PROJECT_DEFAULT</code> when none of the preceding cases are true.</li></ul>",
          "readOnly": true,
          "enum": [
            "PROJECT_DEFAULT",
            "COMPONENT_LEAD",
            "PROJECT_LEAD",
            "UNASSIGNED"
          ]
        },
        "assigneeType": {
          "type": "string",
          "description": "The nominal user type used to determine the assignee for issues created with this component. See <code>realAssigneeType</code> for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:<ul><li><code>PROJECT_LEAD</code> the assignee to any issues created with this component is nominally the lead for the project the component is in.</li><li><code>COMPONENT_LEAD</code> the assignee to any issues created with this component is nominally the lead for the component.</li><li><code>UNASSIGNED</code> an assignee is not set for issues created with this component.</li><li><code>PROJECT_DEFAULT</code> the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.</li></ul>",
          "readOnly": true,
          "enum": [
            "PROJECT_DEFAULT",
            "COMPONENT_LEAD",
            "PROJECT_LEAD",
            "UNASSIGNED"
          ]
        },
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL for this count of the issues contained in the component.",
          "readOnly": true
        },
        "projectId": {
          "type": "integer",
          "format": "int64",
          "description": "Not used.",
          "readOnly": true
        },
        "lead": {
          "type": "object",
          "description": "The user details for the component's lead user.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/User"
            }
          ]
        },
        "description": {
          "type": "string",
          "description": "The description for the component.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name for the component.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The unique identifier for the component.",
          "readOnly": true
        }
      },
      "description": "Details about a component with a count of the issues it contains."
    },
    "PageOfProject": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the page.",
          "readOnly": true
        },
        "nextPage": {
          "type": "string",
          "format": "uri",
          "description": "If there is another page of results, the URL of the next page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that could be returned.",
          "readOnly": true
        },
        "startAt": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the first item returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned.",
          "readOnly": true
        },
        "isLast": {
          "type": "boolean",
          "description": "Indicates whether this is the last page.",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Project"
          }
        }
      },
      "description": "A page of items."
    },
    "ProjectAvatars": {
      "type": "object",
      "properties": {
        "system": {
          "type": "array",
          "description": "List of avatars included with Jira. These avatars cannot be deleted.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Avatar"
          }
        },
        "custom": {
          "type": "array",
          "description": "List of avatars added to Jira. These avatars may be deleted.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Avatar"
          }
        }
      },
      "description": "List of project avatars."
    },
    "IssueTypeWithStatus": {
      "type": "object",
      "required": [
        "id",
        "name",
        "self",
        "statuses",
        "subtask"
      ],
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of the issue type's status details.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the issue type.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the issue type.",
          "readOnly": true
        },
        "subtask": {
          "type": "boolean",
          "description": "Indicates whether this issue type represents sub-tasks.",
          "readOnly": true
        },
        "statuses": {
          "type": "array",
          "description": "List of status details for the issue type.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/StatusDetails"
          }
        }
      },
      "description": "Status details for an issue type."
    },
    "SecurityScheme": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of the issue security scheme.",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the issue security scheme.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the issue security scheme.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The description of the issue security scheme.",
          "readOnly": true
        },
        "defaultSecurityLevelId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the default security level.",
          "readOnly": true
        },
        "levels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityLevel"
          }
        }
      },
      "description": "Details about a security scheme."
    },
    "SecurityLevel": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of the issue level security item.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the issue level security item.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The description of the issue level security item.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the issue level security item.",
          "readOnly": true
        }
      },
      "description": "Details of an issue level security item."
    },
    "SecuritySchemes": {
      "type": "object",
      "properties": {
        "issueSecuritySchemes": {
          "type": "array",
          "description": "List of security schemes.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SecurityScheme"
          }
        }
      },
      "description": "List of security schemes."
    },
    "Comment": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of the comment.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the comment.",
          "readOnly": true
        },
        "author": {
          "type": "object",
          "description": "The ID of the user who created the comment.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/UserDetails"
            }
          ]
        },
        "body": {
          "type": "string",
          "description": "The comment text."
        },
        "renderedBody": {
          "type": "string",
          "description": "The rendered version of the comment.",
          "readOnly": true
        },
        "updateAuthor": {
          "type": "object",
          "description": "The ID of the user who updated the comment last.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/UserDetails"
            }
          ]
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time at which the comment was created.",
          "readOnly": true
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time at which the comment was updated last.",
          "readOnly": true
        },
        "visibility": {
          "type": "object",
          "description": "The group or role to which this comment is visible. Optional on create and update.",
          "allOf": [
            {
              "$ref": "#/definitions/Visibility"
            }
          ]
        },
        "jsdPublic": {
          "type": "boolean",
          "description": "Indicates whether the comment is visible in Jira Service Desk. Optional on create and update. Defaults to true. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on."
        },
        "properties": {
          "type": "array",
          "description": "A list of comment properties. Optional on create and update.",
          "items": {
            "$ref": "#/definitions/EntityProperty"
          }
        }
      },
      "description": "A comment."
    },
    "Fields": {
      "type": "object",
      "properties": {
        "summary": {
          "type": "string",
          "description": "The summary description of the linked issue.",
          "readOnly": true
        },
        "status": {
          "type": "object",
          "description": "The status of the linked issue.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/StatusDetails"
            }
          ]
        },
        "issuetype": {
          "type": "object",
          "description": "The type of the linked issue.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/IssueType"
            }
          ]
        },
        "priority": {
          "type": "object",
          "description": "The priority of the linked issue.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/Priority"
            }
          ]
        },
        "assignee": {
          "type": "object",
          "description": "The assignee of the linked issue.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/UserDetails"
            }
          ]
        }
      },
      "description": "Key fields from the linked issue."
    },
    "IssueLinkType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the issue link type and is used as follows:\n <ul>\n     <li>In the <a href=\"#api-api-2-issueLink-post\">\n     issueLink</a> resource it is the type of issue link. Required on create when <code>name</code> isn't provided.      Otherwise, read only.     <li>In the <a href=\"#api-api-2-issueLinkType-post\">\n     issueLinkType</a> resource it is read only.</li>\n </ul>"
        },
        "name": {
          "type": "string",
          "description": "The name of the issue link type and is used as follows: <ul>\n     <li>In the <a href=\"#api-api-2-issueLink-post\">\n     issueLink</a> resource it is the type of issue link. Required on create when <code>id</code> isn't provided.      Otherwise, read only.     <li>In the <a href=\"#api-api-2-issueLinkType-post\">\n     issueLinkType</a> resource it is required on create and optional on update. Otherwise, read only.</li>\n </ul>"
        },
        "inward": {
          "type": "string",
          "description": "The description of the issue link type inward link and is used as follows: <ul>\n     <li>In the <a href=\"#api-api-2-issueLink-post\">\n     issueLink</a> resource it is read only.     <li>In the <a href=\"#api-api-2-issueLinkType-post\">\n     issueLinkType</a> resource it is required on create and optional on update. Otherwise, read only.</li>\n </ul>"
        },
        "outward": {
          "type": "string",
          "description": "The description of the issue link type outward link and is used as follows: <ul>\n     <li>In the <a href=\"#api-api-2-issueLink-post\">\n     issueLink</a> resource it is read only.     <li>In the <a href=\"#api-api-2-issueLinkType-post\">\n     issueLinkType</a> resource it is required on create and optional on update. Otherwise, read only.</li>\n </ul>"
        },
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the issue link type. Read only.",
          "readOnly": true
        }
      },
      "description": "This object is used as follows:\n <ul>\n     <li>In the <a href=\"#api-api-2-issueLink-post\">\n     issueLink</a> resource it defines and reports on the type of link between the issues. Find a list of issue link types with\n     <a href=\"#api-api-2-issueLinkType-get\">Get issue link types</a>.</li>\n     <li>In the <a href=\"#api-api-2-issueLinkType-post\">\n     issueLinkType</a> resource it defines and reports on issue link types.</li>\n </ul>"
    },
    "LinkIssueRequestJsonBean": {
      "type": "object",
      "required": [
        "inwardIssue",
        "outwardIssue",
        "type"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/IssueLinkType"
        },
        "inwardIssue": {
          "$ref": "#/definitions/LinkedIssue"
        },
        "outwardIssue": {
          "$ref": "#/definitions/LinkedIssue"
        },
        "comment": {
          "$ref": "#/definitions/Comment"
        }
      }
    },
    "LinkedIssue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of an issue. Required if <code>key</code> isn't provided."
        },
        "key": {
          "type": "string",
          "description": "The key of an issue. Required if <code>id</code> isn't provided."
        },
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the issue.",
          "readOnly": true
        },
        "fields": {
          "type": "object",
          "description": "The fields associated with the issue.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/Fields"
            }
          ]
        }
      },
      "description": "The ID or key of a linked issue."
    },
    "Priority": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of the issue priority."
        },
        "statusColor": {
          "type": "string",
          "description": "The color used to indicate the issue priority."
        },
        "description": {
          "type": "string",
          "description": "The description of the issue priority."
        },
        "iconUrl": {
          "type": "string",
          "description": "The URL of the icon for the issue priority."
        },
        "name": {
          "type": "string",
          "description": "The name of the issue priority."
        },
        "id": {
          "type": "string",
          "description": "The ID of the issue priority."
        }
      },
      "description": "An issue priority."
    },
    "RichText": {
      "type": "object",
      "properties": {
        "emptyAdf": {
          "type": "boolean"
        },
        "valueSet": {
          "type": "boolean"
        }
      }
    },
    "Visibility": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Indicates whether visibility of this item is restricted to a group or role.",
          "enum": [
            "group",
            "role"
          ]
        },
        "value": {
          "type": "string",
          "description": "The name of the group or role to which visibility of this item is restricted."
        }
      },
      "description": "The group or role to which this item is visible."
    },
    "IssueLink": {
      "type": "object",
      "required": [
        "inwardIssue",
        "outwardIssue",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the issue link.",
          "readOnly": true
        },
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the issue link.",
          "readOnly": true
        },
        "type": {
          "type": "object",
          "description": "The type of link between the issues.",
          "allOf": [
            {
              "$ref": "#/definitions/IssueLinkType"
            }
          ]
        },
        "inwardIssue": {
          "type": "object",
          "description": "The issue the link joins to.",
          "allOf": [
            {
              "$ref": "#/definitions/LinkedIssue"
            }
          ]
        },
        "outwardIssue": {
          "type": "object",
          "description": "The issue the link originates from.",
          "allOf": [
            {
              "$ref": "#/definitions/LinkedIssue"
            }
          ]
        }
      },
      "xml": {
        "name": "issueLinks"
      },
      "description": "Details of a link between issues."
    },
    "PageOfComments": {
      "type": "object",
      "properties": {
        "startAt": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the first item returned.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that could be returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned.",
          "readOnly": true
        },
        "comments": {
          "type": "array",
          "description": "The list of comments.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Comment"
          }
        }
      },
      "description": "A page of comments."
    },
    "IssueTypeCreateBean": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique name for the issue type. The maximum length is 60 characters. Required."
        },
        "description": {
          "type": "string",
          "description": "The description of the issue type."
        },
        "type": {
          "type": "string",
          "description": "Whether the issue type is <code>subtype</code> or <code>standard</code>. Defaults to <code>standard</code>.",
          "enum": [
            "subtask",
            "standard"
          ]
        }
      }
    },
    "IssueTypeUpdateBean": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique name for the issue type. The maximum length is 60 characters."
        },
        "description": {
          "type": "string",
          "description": "The description of the issue type."
        },
        "avatarId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of an issue type avatar."
        }
      }
    },
    "UserWriteBean": {
      "type": "object",
      "required": [
        "displayName",
        "emailAddress"
      ],
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of the user.",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "The key for the user. When provided with <code>name</code>, overrides the value in <code>name</code> to set both <code>name</code> and <code>key</code>. This property has been deprecated due to privacy changes.See the <a href=\"https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/\">migration guide</a> for details."
        },
        "name": {
          "type": "string",
          "description": "The username for the user. This property has been deprecated due to privacy changes. See the <a href=\"https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/\">migration guide</a> for details."
        },
        "password": {
          "type": "string",
          "description": "A password for the user. If a password is not set, a random password is generated."
        },
        "emailAddress": {
          "type": "string",
          "description": "The email address for the user. Required."
        },
        "displayName": {
          "type": "string",
          "description": "The display name for the user. Required."
        },
        "notification": {
          "type": "string",
          "description": "Sends the user an email confirmation that they have been added to Jira. Default is <code>false</code>."
        },
        "applicationKeys": {
          "type": "array",
          "description": "Deprecated, do not use.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ColumnItem": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "The issue navigator column label."
        },
        "value": {
          "type": "string",
          "description": "The issue navigator column value."
        }
      },
      "description": "Details of an issue navigator column item."
    },
    "IssueCommentListRequestBean": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "description": "The list of comment IDs. A maximum of 1000 IDs can be specified. Required.",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "PageOfComment": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the page.",
          "readOnly": true
        },
        "nextPage": {
          "type": "string",
          "format": "uri",
          "description": "If there is another page of results, the URL of the next page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that could be returned.",
          "readOnly": true
        },
        "startAt": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the first item returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned.",
          "readOnly": true
        },
        "isLast": {
          "type": "boolean",
          "description": "Indicates whether this is the last page.",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Comment"
          }
        }
      },
      "description": "A page of items."
    },
    "PageOfWorklogs": {
      "type": "object",
      "properties": {
        "startAt": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the first item returned on the page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of results that could be on the page.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The number of results on the page.",
          "readOnly": true
        },
        "worklogs": {
          "type": "array",
          "description": "List of worklogs.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Worklog"
          }
        }
      },
      "description": "Paginated list of worklog details"
    },
    "Worklog": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the worklog item.",
          "readOnly": true
        },
        "author": {
          "description": "Details of the user who created the worklog.",
          "readOnly": true,
          "$ref": "#/definitions/UserDetails"
        },
        "updateAuthor": {
          "description": "Details of the user who last updated the worklog.",
          "readOnly": true,
          "$ref": "#/definitions/UserDetails"
        },
        "comment": {
          "type": "string",
          "description": "A comment about the worklog. Optional when creating or updating a worklog."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The datetime on which the worklog was created.",
          "readOnly": true
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "description": "The datetime on which the worklog was last updated.",
          "readOnly": true
        },
        "visibility": {
          "description": "Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog.",
          "$ref": "#/definitions/Visibility"
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "description": "The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog."
        },
        "timeSpent": {
          "type": "string",
          "description": "The time spent working on the issue as days (#d), hours (#h), or minutes (#m or #). Required when creating a worklog if <code>timeSpentSeconds</code> isn't provided. Optional when updating a worklog. Cannot be provided if <code>timeSpentSecond</code> is provided."
        },
        "timeSpentSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The time in seconds spent working on the issue. Required when creating a worklog if <code>timeSpent</code> isn't provided. Optional when updating a worklog. Cannot be provided if <code>timeSpent</code> is provided."
        },
        "id": {
          "type": "string",
          "description": "The ID of the worklog record.",
          "readOnly": true
        },
        "issueId": {
          "type": "string",
          "description": "The ID of the issue this worklog is for.",
          "readOnly": true
        },
        "properties": {
          "type": "array",
          "description": "Details of properties for the worklog. Optional when creating or updating a worklog.",
          "items": {
            "$ref": "#/definitions/EntityProperty"
          }
        }
      },
      "xml": {
        "name": "worklog"
      },
      "description": "Details of a worklog."
    },
    "PageOfChangelog": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the page.",
          "readOnly": true
        },
        "nextPage": {
          "type": "string",
          "format": "uri",
          "description": "If there is another page of results, the URL of the next page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that could be returned.",
          "readOnly": true
        },
        "startAt": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the first item returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned.",
          "readOnly": true
        },
        "isLast": {
          "type": "boolean",
          "description": "Indicates whether this is the last page.",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Changelog"
          }
        }
      },
      "description": "A page of items."
    },
    "IssueLinkTypes": {
      "type": "object",
      "properties": {
        "issueLinkTypes": {
          "type": "array",
          "description": "The issue link type bean.",
          "readOnly": true,
          "items": {
            "xml": {
              "name": "issueLinkTypes"
            },
            "$ref": "#/definitions/IssueLinkType"
          }
        }
      },
      "xml": {
        "name": "issueLinkTypes"
      },
      "description": "A list of issue link type beans."
    },
    "Attachment": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "description": "The URL of the attachment details response.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the attachment.",
          "readOnly": true
        },
        "filename": {
          "type": "string",
          "description": "The file name of the attachment.",
          "readOnly": true
        },
        "author": {
          "description": "Details of the user who added the attachment.",
          "readOnly": true,
          "$ref": "#/definitions/UserDetails"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The datetime the attachment was created.",
          "readOnly": true
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the attachment.",
          "readOnly": true
        },
        "mimeType": {
          "type": "string",
          "description": "The MIME type of the attachment.",
          "readOnly": true
        },
        "content": {
          "type": "string",
          "description": "The content of the attachment.",
          "readOnly": true
        },
        "thumbnail": {
          "type": "string",
          "description": "The URL of a thumbnail representing the attachment.",
          "readOnly": true
        }
      },
      "description": "Details about an attachment."
    },
    "ProjectRole": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL the project role details.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the project role."
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the project role.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The description of the project role.",
          "readOnly": true
        },
        "actors": {
          "type": "array",
          "description": "The list of users who act in this role.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RoleActor"
          }
        },
        "scope": {
          "type": "object",
          "description": "The scope of the role. Indicated for roles associated with <a href=\"https://confluence.atlassian.com/x/loMyO\">next-gen projects</a>.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/Scope"
            }
          ]
        }
      },
      "description": "Details about the roles in a project."
    },
    "ProjectRoleGroupBean": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ProjectRoleUserBean": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "description": "The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, <em>384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192</em>.",
          "readOnly": true
        }
      }
    },
    "RoleActor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.",
          "readOnly": true
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "This property has been deprecated in favour of <code>accountId</code> due to privacy changes. See the <a href=\"https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/\">migration guide</a> for details. <br>The username of the user.",
          "readOnly": true
        },
        "avatarUrl": {
          "type": "string",
          "format": "uri"
        },
        "actorUser": {
          "$ref": "#/definitions/ProjectRoleUserBean"
        },
        "actorGroup": {
          "$ref": "#/definitions/ProjectRoleGroupBean"
        },
        "user": {
          "type": "string"
        }
      },
      "xml": {
        "name": "projectRoleActor"
      },
      "description": "Details about a user assigned to a project role."
    },
    "ProjectRoleActorsUpdateBean": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the project role. Use <a href=\"#api-api-2-role-get\">Get all project roles</a> to get a list of project role IDs.",
          "readOnly": true
        },
        "categorisedActors": {
          "type": "object",
          "description": "The actors to add to the project role for the project. Provide the group name or account ID. User key may be provided instead of account ID when not in GDPR-strict mode, however this is deprecated behavior. Add groups using <code>atlassian-group-role-actor</code>. Add users using <code>atlassian-user-role-actor</code>.",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "xml": {
        "name": "actor"
      }
    },
    "ActorsMap": {
      "type": "object",
      "properties": {
        "user": {
          "type": "array",
          "description": "The user account ID of the user to add.",
          "items": {
            "type": "string"
          }
        },
        "group": {
          "type": "array",
          "description": "The name of the group to add.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateUpdateRoleRequestBean": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the project role. Must be unique. Cannot begin or end with whitespace. The maximum length is 255 characters. Required when creating a project role. Optional when partially updating a project role."
        },
        "description": {
          "type": "string",
          "description": "A description of the project role. Required when fully updating a project role. Optional when creating or partially updating a project role."
        }
      }
    },
    "ActorInputBean": {
      "type": "object",
      "properties": {
        "user": {
          "type": "array",
          "description": "The user account ID of the user to add as a default actor. When not in GDPR-strict-mode this may be user key instead, however this behaviour is deprecated. You can add multiple users separated by a comma. For example, <code>\"user\":[\"12345678-9abc-def1-2345-6789abcdef12\", \"abcdef12-3456-789a-bcde-f123456789ab\"]</code>. test",
          "items": {
            "type": "string"
          }
        },
        "group": {
          "type": "array",
          "description": "The name of the group to add as a default actor. You can add multiple groups separated with a comma. For example, <code>\"group\":[\"project-admin\", \"jira-developers\"]</code>.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CustomFieldOption": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of these custom field option details.",
          "readOnly": true
        },
        "value": {
          "type": "string",
          "description": "The value of the custom field option.",
          "readOnly": true
        }
      },
      "xml": {
        "name": "customFieldOption"
      },
      "description": "Details of a custom option for a field."
    },
    "AttachmentMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the attachment.",
          "readOnly": true
        },
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the attachment metadata details.",
          "readOnly": true
        },
        "filename": {
          "type": "string",
          "description": "The name of the attachment file.",
          "readOnly": true
        },
        "author": {
          "type": "object",
          "description": "Details of the user who attached the file.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/User"
            }
          ]
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The datetime the attachment was created.",
          "readOnly": true
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the attachment.",
          "readOnly": true
        },
        "mimeType": {
          "type": "string",
          "description": "The MIME type of the attachment.",
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "description": "Additional properties of the attachment.",
          "readOnly": true,
          "additionalProperties": {}
        },
        "content": {
          "type": "string",
          "description": "The URL of the attachment.",
          "readOnly": true
        },
        "thumbnail": {
          "type": "string",
          "description": "The URL of a thumbnail representing the attachment.",
          "readOnly": true
        }
      },
      "xml": {
        "name": "attachment"
      },
      "description": "Metadata for an issue attachment."
    },
    "AttachmentSettings": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether the ability to add attachments is enabled.",
          "readOnly": true
        },
        "uploadLimit": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum size of attachments permitted, in bytes.",
          "readOnly": true
        }
      },
      "description": "Details of the instance's attachment settings."
    },
    "AttachmentArchiveMetadata": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "description": "The list of the items included in the archive.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AttachmentArchiveEntry"
          }
        },
        "totalEntryCount": {
          "type": "integer",
          "format": "int32",
          "description": "The  number of items in the archive.",
          "readOnly": true
        }
      },
      "description": "Metadata for the items within an archive (for example a zip)."
    },
    "AttachmentArchiveEntry": {
      "type": "object",
      "properties": {
        "mediaType": {
          "type": "string"
        },
        "entryIndex": {
          "type": "integer",
          "format": "int64"
        },
        "abbreviatedName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AttachmentArchiveMetadataReadable": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the attachment.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the archive file.",
          "readOnly": true
        },
        "entries": {
          "type": "array",
          "description": "The list of the items included in the archive.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AttachmentArchiveItemReadable"
          }
        },
        "totalEntryCount": {
          "type": "integer",
          "format": "int64",
          "description": " The number of items included in the archive.",
          "readOnly": true
        },
        "mediaType": {
          "type": "string",
          "description": "The MIME type of the attachment.",
          "readOnly": true
        }
      },
      "description": "Metadata for an archive (for example a zip)  and its contents."
    },
    "AttachmentArchiveItemReadable": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "The path of the archive item.",
          "readOnly": true
        },
        "index": {
          "type": "integer",
          "format": "int64",
          "description": "The position of the item within the archive.",
          "readOnly": true
        },
        "size": {
          "type": "string",
          "description": "The size of the archive item.",
          "readOnly": true
        },
        "mediaType": {
          "type": "string",
          "description": "The MIME type of the archive item.",
          "readOnly": true
        },
        "label": {
          "type": "string",
          "description": "The label for the archive item.",
          "readOnly": true
        }
      },
      "description": "Metadata for an item in an attachment archive."
    },
    "PageOfIssueFieldOption": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the page.",
          "readOnly": true
        },
        "nextPage": {
          "type": "string",
          "format": "uri",
          "description": "If there is another page of results, the URL of the next page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that could be returned.",
          "readOnly": true
        },
        "startAt": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the first item returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned.",
          "readOnly": true
        },
        "isLast": {
          "type": "boolean",
          "description": "Indicates whether this is the last page.",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/IssueFieldOption"
          }
        }
      },
      "description": "A page of items."
    },
    "GlobalScopeBean": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "array",
          "description": "Defines the behavior of the option in the global context.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "notSelectable",
              "defaultValue"
            ]
          }
        }
      }
    },
    "IssueFieldOption": {
      "type": "object",
      "required": [
        "id",
        "value"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The unique identifier for the option. This is only unique within the select field's set of options."
        },
        "value": {
          "type": "string",
          "description": "The option's name, which is displayed in Jira."
        },
        "properties": {
          "type": "object",
          "description": "The properties can be any arbitrary key value pairs. These properties can be searched using JQL, if the extractions (see <a href=\"https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/\">Issue Field Option Property Index</a>) are defined in the descriptor for the issue field module.",
          "additionalProperties": {}
        },
        "config": {
          "$ref": "#/definitions/IssueFieldOptionConfiguration"
        }
      },
      "description": "Details of the options for a select list issue field."
    },
    "IssueFieldOptionConfiguration": {
      "type": "object",
      "properties": {
        "scope": {
          "type": "object",
          "description": "Defines the projects that the option is available in. If the scope is not defined, then the option will be available in all projects.",
          "allOf": [
            {
              "$ref": "#/definitions/IssueFieldOptionScopeBean"
            }
          ]
        },
        "attributes": {
          "type": "array",
          "description": "DEPRECATED",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "notSelectable",
              "defaultValue"
            ]
          }
        }
      },
      "description": "Details of the projects the option is available in."
    },
    "IssueFieldOptionScopeBean": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "description": "DEPRECATED",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "projects2": {
          "type": "array",
          "description": "Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ProjectScopeBean"
          }
        },
        "global": {
          "type": "object",
          "description": "Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option will be available in all projects.",
          "allOf": [
            {
              "$ref": "#/definitions/GlobalScopeBean"
            }
          ]
        }
      }
    },
    "ProjectScopeBean": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the project that the option's behavior applies to."
        },
        "attributes": {
          "type": "array",
          "description": "Defines the behavior of the option in the project.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "notSelectable",
              "defaultValue"
            ]
          }
        }
      }
    },
    "IssueFieldOptionCreateBean": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "description": "The option's name, which is displayed in the UI."
        },
        "properties": {
          "type": "object",
          "description": "The properties can be any arbitrary key value pairs. These properties can be searched using JQL, if the extractions (see https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/) are defined in the descriptor for the issue field module.",
          "additionalProperties": {}
        },
        "config": {
          "$ref": "#/definitions/IssueFieldOptionConfiguration"
        }
      }
    },
    "TaskProgressRemoveOptionFromIssues": {
      "type": "object",
      "required": [
        "elapsedRuntime",
        "id",
        "lastUpdate",
        "progress",
        "self",
        "started",
        "status",
        "submitted",
        "submittedBy"
      ],
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the task."
        },
        "id": {
          "type": "string",
          "description": "The ID of the task."
        },
        "description": {
          "type": "string",
          "description": "The description of the task."
        },
        "status": {
          "type": "string",
          "description": "The status of the task.",
          "enum": [
            "ENQUEUED",
            "RUNNING",
            "COMPLETE",
            "FAILED",
            "CANCEL_REQUESTED",
            "CANCELLED",
            "DEAD"
          ]
        },
        "message": {
          "type": "string",
          "description": "Information about the progress of the task."
        },
        "result": {
          "type": "object",
          "description": "The result of the task execution.",
          "allOf": [
            {
              "$ref": "#/definitions/RemoveOptionFromIssues"
            }
          ]
        },
        "submittedBy": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the user who submitted the task."
        },
        "progress": {
          "type": "integer",
          "format": "int64",
          "description": "The progress of the task, as a percentage complete."
        },
        "elapsedRuntime": {
          "type": "integer",
          "format": "int64",
          "description": "The execution time of the task, in milliseconds."
        },
        "submitted": {
          "type": "integer",
          "format": "int64",
          "description": "A timestamp recording when the task was submitted."
        },
        "started": {
          "type": "integer",
          "format": "int64",
          "description": "A timestamp recording when the task was started."
        },
        "finished": {
          "type": "integer",
          "format": "int64",
          "description": "A timestamp recording when the task was finished."
        },
        "lastUpdate": {
          "type": "integer",
          "format": "int64",
          "description": "A timestamp recording when the task progress was last updated."
        }
      },
      "description": "Details about a task."
    },
    "RemoveOptionFromIssues": {
      "type": "object",
      "properties": {
        "modifiedIssues": {
          "type": "array",
          "description": "The IDs of the modified issues.",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "unmodifiedIssues": {
          "type": "array",
          "description": "The IDs of the unchanged issues, due to errors preventing modification.",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "errors": {
          "type": "object",
          "description": "A collection of errors related to unchanged issues. The collection size is limited, which means not all errors may be returned.",
          "allOf": [
            {
              "$ref": "#/definitions/SimpleErrorCollection"
            }
          ]
        }
      },
      "description": "Details about the removal and replacement of an issue field option."
    },
    "SimpleErrorCollection": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "errorMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "httpStatusCode": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskProgress": {
      "type": "object",
      "required": [
        "elapsedRuntime",
        "id",
        "lastUpdate",
        "progress",
        "self",
        "started",
        "status",
        "submitted",
        "submittedBy"
      ],
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the task."
        },
        "id": {
          "type": "string",
          "description": "The ID of the task."
        },
        "description": {
          "type": "string",
          "description": "The description of the task."
        },
        "status": {
          "type": "string",
          "description": "The status of the task.",
          "enum": [
            "ENQUEUED",
            "RUNNING",
            "COMPLETE",
            "FAILED",
            "CANCEL_REQUESTED",
            "CANCELLED",
            "DEAD"
          ]
        },
        "message": {
          "type": "string",
          "description": "Information about the progress of the task."
        },
        "result": {
          "description": "The result of the task execution."
        },
        "submittedBy": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the user who submitted the task."
        },
        "progress": {
          "type": "integer",
          "format": "int64",
          "description": "The progress of the task, as a percentage complete."
        },
        "elapsedRuntime": {
          "type": "integer",
          "format": "int64",
          "description": "The execution time of the task, in milliseconds."
        },
        "submitted": {
          "type": "integer",
          "format": "int64",
          "description": "A timestamp recording when the task was submitted."
        },
        "started": {
          "type": "integer",
          "format": "int64",
          "description": "A timestamp recording when the task was started."
        },
        "finished": {
          "type": "integer",
          "format": "int64",
          "description": "A timestamp recording when the task was finished."
        },
        "lastUpdate": {
          "type": "integer",
          "format": "int64",
          "description": "A timestamp recording when the task progress was last updated."
        }
      },
      "description": "Details about a task."
    },
    "ChangedWorklogs": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "description": "Changed worklog list.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ChangedWorklog"
          }
        },
        "since": {
          "type": "integer",
          "format": "int64",
          "description": "The datetime of the first worklog item in the list.",
          "readOnly": true
        },
        "until": {
          "type": "integer",
          "format": "int64",
          "description": "The datetime of the last worklog item in the list.",
          "readOnly": true
        },
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of this changed worklogs list.",
          "readOnly": true
        },
        "nextPage": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the next list of changed worklogs.",
          "readOnly": true
        },
        "lastPage": {
          "type": "boolean"
        }
      },
      "description": "List of changed worklogs."
    },
    "ChangedWorklog": {
      "type": "object",
      "properties": {
        "worklogId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the worklog.",
          "readOnly": true
        },
        "updatedTime": {
          "type": "integer",
          "format": "int64",
          "description": "The datetime of the change.",
          "readOnly": true
        },
        "properties": {
          "type": "array",
          "description": "Details of properties associated with the change.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/EntityProperty"
          }
        }
      },
      "description": "Details of a changed worklog."
    },
    "WorklogIdsRequestBean": {
      "type": "object",
      "required": [
        "ids"
      ],
      "properties": {
        "ids": {
          "type": "array",
          "description": "A list of worklog IDs.",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "ItemIdOrKey": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the referenced item."
        },
        "key": {
          "type": "string",
          "description": "The key of the referenced item."
        }
      },
      "description": "Details of a referenced item's ID or key."
    },
    "JiraExpressionContext": {
      "type": "object",
      "properties": {
        "issue": {
          "description": "The issue that is available under the `issue` variable when evaluating the expression.",
          "$ref": "#/definitions/ItemIdOrKey"
        },
        "project": {
          "description": "The project that is available under the `project` variable when evaluating the expression.",
          "$ref": "#/definitions/ItemIdOrKey"
        },
        "sprint": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the sprint that is available under the `sprint` variable when evaluating the expression."
        },
        "board": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the board that is available under the `board` variable when evaluating the expression."
        }
      },
      "description": "Values for the variables used when evaluating the expression."
    },
    "JiraExpressionEvalRequestBean": {
      "type": "object",
      "required": [
        "expression"
      ],
      "properties": {
        "expression": {
          "type": "string",
          "example": "{ key: issue.key, type: issue.issueType.name, links: issue.links.map(link => link.linkedIssue.id) }",
          "description": "The Jira expression to evaluate."
        },
        "context": {
          "description": "The context in which the Jira expression will be evaluated.",
          "$ref": "#/definitions/JiraExpressionContext"
        }
      }
    },
    "JiraExpressionResult": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "description": "The value of the evaluated expression. It may be a primitive JSON value or a Jira REST API object. (Some expressions do not produce any meaningful results—for example, an expression that returns a lambda function—if that's the case a simple string representation will be returned. These string representations should not be relied upon and may change without notice.)"
        },
        "meta": {
          "type": "object",
          "description": "Contains various characteristics of the performed expression evaluation.",
          "allOf": [
            {
              "$ref": "#/definitions/JiraExpressionEvaluationMetaDataBean"
            }
          ]
        }
      },
      "description": "The result of evaluating a Jira expression."
    },
    "JiraExpressionEvaluationMetaDataBean": {
      "type": "object",
      "properties": {
        "complexity": {
          "type": "object",
          "description": "Contains information about the expression complexity. For example, the number of steps it took to evaluate the expression.",
          "allOf": [
            {
              "$ref": "#/definitions/JiraExpressionsComplexityBean"
            }
          ]
        }
      }
    },
    "JiraExpressionsComplexityBean": {
      "type": "object",
      "properties": {
        "steps": {
          "type": "object",
          "description": "The number of steps it took to evaluate the expression.",
          "allOf": [
            {
              "$ref": "#/definitions/JiraExpressionsComplexityValueBean"
            }
          ]
        },
        "expensiveOperations": {
          "type": "object",
          "description": "The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields.",
          "allOf": [
            {
              "$ref": "#/definitions/JiraExpressionsComplexityValueBean"
            }
          ]
        },
        "beans": {
          "type": "object",
          "description": "The number of Jira REST API beans returned in the response.",
          "allOf": [
            {
              "$ref": "#/definitions/JiraExpressionsComplexityValueBean"
            }
          ]
        },
        "primitiveValues": {
          "type": "object",
          "description": "The number of primitive values returned in the response.",
          "allOf": [
            {
              "$ref": "#/definitions/JiraExpressionsComplexityValueBean"
            }
          ]
        }
      }
    },
    "JiraExpressionsComplexityValueBean": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int32",
          "description": "The complexity value of the current expression."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum allowed complexity. The evaluation will fail if this value is exceeded."
        }
      }
    },
    "Permissions": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "object",
          "description": "List of permissions.",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "#/definitions/UserPermission"
          }
        }
      },
      "description": "Details about permissions."
    },
    "UserPermission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the permission. Either <code>id</code> or <code>key</code> must be specified. Use <a href=\"#api-api-2-permissions-get\">Get all permissions</a> to get the list of permissions."
        },
        "key": {
          "type": "string",
          "description": "The key of the permission. Either <code>id</code> or <code>key</code> must be specified. Use <a href=\"#api-api-2-permissions-get\">Get all permissions</a> to get the list of permissions."
        },
        "name": {
          "type": "string",
          "description": "The name of the permission."
        },
        "type": {
          "type": "string",
          "description": "The type of the permission.",
          "enum": [
            "GLOBAL",
            "PROJECT"
          ]
        },
        "description": {
          "type": "string",
          "description": "The description of the permission."
        },
        "havePermission": {
          "type": "boolean",
          "description": "Indicates whether the permission is available to the user in the queried context."
        },
        "deprecatedKey": {
          "type": "boolean",
          "description": "Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the <code>permissions<code> parameter of <a href=\"#api-api-2-mypermissions-get\">Get my permissions</a>. Deprecated keys are not returned by <a href=\"#api-api-2-permissions-get\">Get all permissions</a>."
        }
      },
      "description": "Details of a permission and its availability to a user."
    },
    "BulkPermissionsRequestBean": {
      "type": "object",
      "properties": {
        "projectPermissions": {
          "type": "array",
          "description": "Project permissions to look up for the user",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/BulkPermissionsRequestGrantBean"
          }
        },
        "globalPermissions": {
          "type": "array",
          "description": "Global permissions to look up for the user",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BulkPermissionsRequestGrantBean": {
      "type": "object",
      "required": [
        "permissions"
      ],
      "properties": {
        "permissions": {
          "type": "array",
          "description": "Permissions to check against the given issues or projects",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "issueIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "projectIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "issues": {
          "type": "array",
          "description": "Issue IDs to look up for the given permissions",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "projects": {
          "type": "array",
          "description": "Project IDs to look up for the given permissions",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "BulkPermissionsJsonBean": {
      "type": "object",
      "required": [
        "globalPermissions",
        "projectPermissions"
      ],
      "properties": {
        "projectPermissions": {
          "type": "array",
          "description": "Entities the user can see and/or modify for the given permission",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/BulkPermissionGrantBean"
          }
        },
        "globalPermissions": {
          "type": "array",
          "description": "Global permissions the user has been granted",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Details of permissions and the grants available for them"
    },
    "BulkPermissionGrantBean": {
      "type": "object",
      "required": [
        "issues",
        "permission",
        "projects"
      ],
      "properties": {
        "permission": {
          "type": "string",
          "description": "Permission that the user has been granted"
        },
        "issues": {
          "type": "array",
          "description": "IDs of the issues which the user has the permission granted",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "projects": {
          "type": "array",
          "description": "IDs of the projects which the user has the permission granted",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "PermissionsKeysBean": {
      "type": "object",
      "required": [
        "permissions"
      ],
      "properties": {
        "permissions": {
          "type": "array",
          "description": "A list of permission keys.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PermittedProjects": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "description": "A list of projects.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ProjectIdentifierBean"
          }
        }
      },
      "description": "A list of projects in which a user is granted permissions."
    },
    "ProjectIdentifierBean": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the project.",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "The key of the project.",
          "readOnly": true
        }
      },
      "description": "The identifiers for a project."
    },
    "IdBean": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the permission scheme to associate with the project. Use the <a href=\"#api-api-2-permissionscheme-get\">Get all permission schemes</a> resource to get a list of permission scheme IDs."
        }
      }
    },
    "PermissionScheme": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "expand": {
          "type": "string",
          "description": "The expand options available for the permission scheme.",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the permission scheme.",
          "readOnly": true
        },
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the permission scheme.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the permission scheme. Must be unique. Required when creating or updating a permission scheme."
        },
        "description": {
          "type": "string",
          "description": "A description for the permission scheme."
        },
        "scope": {
          "type": "object",
          "description": "The scope of the permission scheme.",
          "allOf": [
            {
              "$ref": "#/definitions/Scope"
            }
          ]
        },
        "permissions": {
          "type": "array",
          "description": "The permission scheme to create or update. See <a href=\"em>#about-permission-schemes\">About permission schemes and grants</a> for more information.",
          "items": {
            "$ref": "#/definitions/PermissionGrant"
          }
        }
      },
      "description": "Details of a permission scheme."
    },
    "PermissionGrant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the permission granted details.",
          "readOnly": true
        },
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the permission granted details.",
          "readOnly": true
        },
        "holder": {
          "type": "object",
          "description": "The user or group being granted the permission. It consists of a <code>type</code> and a type-dependent <code>parameter</code>. For more information, see <em>Holder</em> in <a href=\"#api-api-2-permissionscheme-get\">Get all permission schemes</a>.",
          "allOf": [
            {
              "$ref": "#/definitions/PermissionHolder"
            }
          ]
        },
        "permission": {
          "type": "string",
          "description": "The permission to grant. This permission can be one of the built-in permissions or a custom permission added by an app. For more information about the built-in permissions, see <em>Permissions</em> in <a href=\"#api-api-2-permissionscheme-get\">Get all permission schemes</a>. For more information about custom permissions, see the <a href=\"https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/\">project permission</a> and <a href=\"https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/\">global permission</a> module documentation."
        }
      },
      "description": "Details about a permission granted to a user or group."
    },
    "PermissionHolder": {
      "type": "object",
      "required": [
        "parameter",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of permission holder."
        },
        "parameter": {
          "type": "string",
          "description": "The identifier of permission holder."
        },
        "user": {
          "type": "object",
          "description": "The user holding the permission.",
          "allOf": [
            {
              "$ref": "#/definitions/UserDetails"
            }
          ]
        },
        "group": {
          "type": "object",
          "description": "The group holding the permission.",
          "allOf": [
            {
              "$ref": "#/definitions/GroupName"
            }
          ]
        },
        "field": {
          "type": "object",
          "description": "The field holding the permission.",
          "allOf": [
            {
              "$ref": "#/definitions/Field"
            }
          ]
        },
        "projectRole": {
          "type": "object",
          "description": "The project role holding the permission.",
          "allOf": [
            {
              "$ref": "#/definitions/ProjectRole"
            }
          ]
        },
        "expand": {
          "type": "string"
        }
      },
      "description": "Details of a user, group, field, or project role that holds a permission.For more information, see <em>Holder</em> in <a href=\"#api-api-2-permissionscheme-get\">Get all permission schemes</a>."
    },
    "TaskProgressObject": {
      "type": "object",
      "required": [
        "elapsedRuntime",
        "id",
        "lastUpdate",
        "progress",
        "self",
        "started",
        "status",
        "submitted",
        "submittedBy"
      ],
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the task."
        },
        "id": {
          "type": "string",
          "description": "The ID of the task."
        },
        "description": {
          "type": "string",
          "description": "The description of the task."
        },
        "status": {
          "type": "string",
          "description": "The status of the task.",
          "enum": [
            "ENQUEUED",
            "RUNNING",
            "COMPLETE",
            "FAILED",
            "CANCEL_REQUESTED",
            "CANCELLED",
            "DEAD"
          ]
        },
        "message": {
          "type": "string",
          "description": "Information about the progress of the task."
        },
        "result": {
          "description": "The result of the task execution."
        },
        "submittedBy": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the user who submitted the task."
        },
        "progress": {
          "type": "integer",
          "format": "int64",
          "description": "The progress of the task, as a percentage complete."
        },
        "elapsedRuntime": {
          "type": "integer",
          "format": "int64",
          "description": "The execution time of the task, in milliseconds."
        },
        "submitted": {
          "type": "integer",
          "format": "int64",
          "description": "A timestamp recording when the task was submitted."
        },
        "started": {
          "type": "integer",
          "format": "int64",
          "description": "A timestamp recording when the task was started."
        },
        "finished": {
          "type": "integer",
          "format": "int64",
          "description": "A timestamp recording when the task was finished."
        },
        "lastUpdate": {
          "type": "integer",
          "format": "int64",
          "description": "A timestamp recording when the task progress was last updated."
        }
      },
      "description": "Details about a task."
    },
    "PageOfDashboards": {
      "type": "object",
      "properties": {
        "startAt": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the first item returned on the page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of results that could be on the page.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The number of results on the page.",
          "readOnly": true
        },
        "prev": {
          "type": "string",
          "description": "The URL of the previous page of results, if any.",
          "readOnly": true
        },
        "next": {
          "type": "string",
          "description": "The URL of the next page of results, if any.",
          "readOnly": true
        },
        "dashboards": {
          "type": "array",
          "description": "List of dashboards.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Dashboard"
          }
        }
      },
      "description": "A page containing dashboard details."
    },
    "Dashboard": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The ID of the dashboard.",
          "readOnly": true
        },
        "isFavourite": {
          "type": "boolean",
          "description": "Indicates whether the dashboard has been selected as a favorite by the user.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the dashboard.",
          "readOnly": true
        },
        "owner": {
          "type": "object",
          "description": "The owner of the dashboard.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/UserBean"
            }
          ]
        },
        "popularity": {
          "type": "integer",
          "format": "int64",
          "description": "The number of users who have this dashboard as a favorite.",
          "readOnly": true
        },
        "rank": {
          "type": "integer",
          "format": "int32",
          "description": "The rank of this dashboard.",
          "readOnly": true
        },
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of these dashboard details.",
          "readOnly": true
        },
        "sharePermissions": {
          "type": "array",
          "description": "The details of any share permissions for the dashboard.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SharePermission"
          }
        },
        "view": {
          "type": "string",
          "description": "The URL of the dashboard.",
          "readOnly": true
        }
      },
      "description": "Details of a dashboard."
    },
    "SharePermission": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The unique identifier of the share permission.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of share permission:<ul><li><code>group</code> Shared with a group. If set in a request, then specify <code>sharePermission.group</code> as well.</li><li><code>project</code> Shared with a project. If set in a request, then specify <code>sharePermission.project</code> as well.</li><li><code>projectRole</code> Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with <code>projectId</code> and <code>projectRoleId</code>.</li><li><code>global</code> Shared globally. If set in a request, no other <code>sharePermission</code> properties need to be specified.</li><li><code>loggedin</code> Shared with all logged-in users. Note: This value is set in a request by specifying <code>authenticated</code> as the <code>type</code>.</li><li><code>project-unknown</code> Shared with a project that the calling user does not have access to. Cannot be set in a request.</li></ul>",
          "enum": [
            "group",
            "project",
            "projectRole",
            "global",
            "loggedin",
            "authenticated",
            "project-unknown"
          ]
        },
        "project": {
          "description": "The project that the filter is shared with. This is similar to the project object returned by <a href=\"#api-api-2-project-projectIdOrKey-get\">Get project</a> but it contains a subset of the properties, which are: <code>self</code>, <code>id</code>, <code>key</code>, <code>assigneeType</code>, <code>name</code>, <code>roles</code>, <code>avatarUrls</code>, <code>projectType</code>, <code>simplified</code>.<br>For a request, specify the <code>id</code> for the project.",
          "$ref": "#/definitions/Project"
        },
        "role": {
          "description": "The project role that the filter is shared with.<br>For a request, specify the <code>id</code> for the role. You must also specify the <code>project</code> object and <code>id</code> for the project that the role is in.",
          "$ref": "#/definitions/ProjectRole"
        },
        "group": {
          "description": "The group that the filter is shared with. For a request, specify the <code>name</code> property for the group.",
          "$ref": "#/definitions/GroupName"
        }
      },
      "description": "Details of a share permission for the filter."
    },
    "UserBean": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "self": {
          "type": "string",
          "format": "uri"
        },
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "accountId": {
          "type": "string"
        },
        "avatarUrls": {
          "$ref": "#/definitions/UserBeanAvatarUrls"
        }
      }
    },
    "UserBeanAvatarUrls": {
      "type": "object",
      "properties": {
        "16x16": {
          "type": "string",
          "format": "uri"
        },
        "24x24": {
          "type": "string",
          "format": "uri"
        },
        "32x32": {
          "type": "string",
          "format": "uri"
        },
        "48x48": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "PageOfDashboard": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the page.",
          "readOnly": true
        },
        "nextPage": {
          "type": "string",
          "format": "uri",
          "description": "If there is another page of results, the URL of the next page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that could be returned.",
          "readOnly": true
        },
        "startAt": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the first item returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned.",
          "readOnly": true
        },
        "isLast": {
          "type": "boolean",
          "description": "Indicates whether this is the last page.",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Dashboard"
          }
        }
      },
      "description": "A page of items."
    },
    "BulkIssuePropertyUpdateRequest": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the property. The value must be a <a href=\"http://tools.ietf.org/html/rfc4627\">valid</a>, non-empty JSON blob. The maximum length is 32768 characters."
        },
        "filter": {
          "description": "The bulk operation filter.",
          "$ref": "#/definitions/IssueFilterForBulkPropertySet"
        }
      },
      "description": "Bulk issue property update request details."
    },
    "IssueFilterForBulkPropertySet": {
      "type": "object",
      "properties": {
        "entityIds": {
          "type": "array",
          "description": "List of issues to perform the bulk operation on.",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "currentValue": {
          "description": "The value of properties to perform the bulk operation on."
        },
        "hasProperty": {
          "type": "boolean",
          "description": "Indicates whether the bulk operation occurs only when the property is present on or absent  from an issue."
        }
      },
      "description": "Bulk operation filter details."
    },
    "IssueFilterForBulkPropertyDelete": {
      "type": "object",
      "properties": {
        "entityIds": {
          "type": "array",
          "description": "List of issues to perform the bulk delete operation on.",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "currentValue": {
          "description": "The value of properties to perform the bulk operation on."
        }
      },
      "description": "Bulk operation filter details."
    },
    "PageOfUserKey": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the page.",
          "readOnly": true
        },
        "nextPage": {
          "type": "string",
          "format": "uri",
          "description": "If there is another page of results, the URL of the next page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that could be returned.",
          "readOnly": true
        },
        "startAt": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the first item returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned.",
          "readOnly": true
        },
        "isLast": {
          "type": "boolean",
          "description": "Indicates whether this is the last page.",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/UserKey"
          }
        }
      },
      "description": "A page of items."
    },
    "UserKey": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        }
      },
      "description": "List of user keys."
    },
    "PageOfUser": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the page.",
          "readOnly": true
        },
        "nextPage": {
          "type": "string",
          "format": "uri",
          "description": "If there is another page of results, the URL of the next page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that could be returned.",
          "readOnly": true
        },
        "startAt": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the first item returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned.",
          "readOnly": true
        },
        "isLast": {
          "type": "boolean",
          "description": "Indicates whether this is the last page.",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      },
      "description": "A page of items."
    },
    "Filter": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the filter.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The unique identifier for the filter.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the filter. Must be unique."
        },
        "description": {
          "type": "string",
          "description": "A description of the filter."
        },
        "owner": {
          "description": "The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings.",
          "readOnly": true,
          "$ref": "#/definitions/User"
        },
        "jql": {
          "type": "string",
          "description": "The JQL query for the filter. For example, <em>project = SSP AND issuetype = Bug</em>."
        },
        "viewUrl": {
          "type": "string",
          "format": "uri",
          "description": "A URL to view the filter results in Jira, using the ID of the filter. For example, <em>https://your-domain.atlassian.net/issues/?filter=10100</em>.",
          "readOnly": true
        },
        "searchUrl": {
          "type": "string",
          "format": "uri",
          "description": "A URL to view the filter results in Jira, using the <a href=\"#api-api-2-filter-search-get\">Search for issues using JQL</a> operation with the filter's JQL string to return the filter results. For example, <em>https://your-domain.atlassian.net/rest/api/2/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug</em>.",
          "readOnly": true
        },
        "favourite": {
          "type": "boolean",
          "description": "Indicates whether or not the filter is selected as a favorite."
        },
        "favouritedCount": {
          "type": "integer",
          "format": "int64",
          "description": "The count of how many users have selected this filter as a favorite, including the filter owner.",
          "readOnly": true
        },
        "sharePermissions": {
          "type": "array",
          "description": "The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.",
          "items": {
            "$ref": "#/definitions/SharePermission"
          }
        },
        "sharedUsers": {
          "description": "A paginated list of the users that the filter is shared with. This includes users that are members of the groups or can browse the projects that the filter has been shared with.",
          "readOnly": true,
          "$ref": "#/definitions/UserList"
        },
        "subscriptions": {
          "description": "A paginated list of the users that are subscribed to the filter.",
          "readOnly": true,
          "$ref": "#/definitions/FilterSubscriptionsList"
        }
      },
      "xml": {
        "name": "filter"
      },
      "description": "Details about a filter."
    },
    "FilterSubscription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the filter subscription.",
          "readOnly": true
        },
        "user": {
          "description": "The user subscribing to filter.",
          "readOnly": true,
          "$ref": "#/definitions/User"
        },
        "group": {
          "description": "The group subscribing to filter.",
          "readOnly": true,
          "$ref": "#/definitions/GroupName"
        }
      },
      "description": "Details of a user or group subscribing to a filter."
    },
    "FilterSubscriptionsList": {
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The number of items on the page.",
          "readOnly": true
        },
        "max-results": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The maximum number of results that could be on the page.",
          "readOnly": true
        },
        "start-index": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The index of the first item returned on the page.",
          "readOnly": true
        },
        "end-index": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The index of the last item returned on the page.",
          "readOnly": true
        },
        "items": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "xml": {
              "name": "items"
            },
            "$ref": "#/definitions/FilterSubscription"
          }
        }
      },
      "description": "A paginated list of subscriptions to a filter."
    },
    "UserList": {
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The number of items on the page.",
          "readOnly": true
        },
        "max-results": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The maximum number of results that could be on the page.",
          "readOnly": true
        },
        "start-index": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The index of the first item returned on the page.",
          "readOnly": true
        },
        "end-index": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "description": "The index of the last item returned on the page.",
          "readOnly": true
        },
        "items": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "xml": {
              "name": "items"
            },
            "$ref": "#/definitions/User"
          }
        }
      },
      "description": "A paginated list of users sharing the filter. This includes users that are members of the groups or can browse the projects that the filter has been shared with."
    },
    "PageOfFoundFilter": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the page.",
          "readOnly": true
        },
        "nextPage": {
          "type": "string",
          "format": "uri",
          "description": "If there is another page of results, the URL of the next page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that could be returned.",
          "readOnly": true
        },
        "startAt": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the first item returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned.",
          "readOnly": true
        },
        "isLast": {
          "type": "boolean",
          "description": "Indicates whether this is the last page.",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/FoundFilter"
          }
        }
      },
      "description": "A page of items."
    },
    "FoundFilter": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the filter.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The unique identifier for the filter.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the filter. Must be unique."
        },
        "description": {
          "type": "string",
          "description": "A description of the filter."
        },
        "owner": {
          "type": "object",
          "description": "The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/User"
            }
          ]
        },
        "jql": {
          "type": "string",
          "description": "The JQL query for the filter. For example, <em>project = SSP AND issuetype = Bug</em>.",
          "readOnly": true
        },
        "viewUrl": {
          "type": "string",
          "format": "uri",
          "description": "A URL to view the filter results in Jira, using the ID of the filter. For example, <em>https://your-domain.atlassian.net/issues/?filter=10100</em>.",
          "readOnly": true
        },
        "searchUrl": {
          "type": "string",
          "format": "uri",
          "description": "A URL to view the filter results in Jira, using the <a href=\"#api-api-2-filter-search-get\">Search for issues using JQL</a> operation with the filter's JQL string to return the filter results. For example, <em>https://your-domain.atlassian.net/rest/api/2/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug</em>.",
          "readOnly": true
        },
        "favourite": {
          "type": "boolean",
          "description": "Indicates whether or not the filter is selected as a favorite by any users, not including the filter owner.",
          "readOnly": true
        },
        "favouritedCount": {
          "type": "integer",
          "format": "int64",
          "description": "The count of how many users have selected this filter as a favorite, including the filter owner.",
          "readOnly": true
        },
        "sharePermissions": {
          "type": "array",
          "description": "The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.",
          "items": {
            "$ref": "#/definitions/SharePermission"
          }
        },
        "subscriptions": {
          "type": "array",
          "description": "The users that are subscribed to the filter.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/FilterSubscription"
          }
        }
      },
      "description": "Details of a filter identified as part of a search."
    },
    "DefaultShareScope": {
      "type": "object",
      "required": [
        "scope"
      ],
      "properties": {
        "scope": {
          "type": "string",
          "description": "The scope of the default sharing for new filters and dashboards:<ul><li><code>AUTHENTICATED</code> Shared with all logged-in users.</li><li><code>GLOBAL</code> Shared with all logged-in users. This shows as <code>AUTHENTICATED</code> in the response.</li><li><code>PRIVATE</code> Not shared with any users.</li></ul>",
          "enum": [
            "GLOBAL",
            "AUTHENTICATED",
            "PRIVATE"
          ]
        }
      },
      "xml": {
        "name": "defaultShareScope"
      },
      "description": "Details of the scope of the default sharing for new filters and dashboards."
    },
    "SharePermissionInputBean": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the share permission.Specify the type as follows:<ul><li><code>group</code> Share with a group. Specify <code>groupname</code> as well.</li><li><code>project</code> Share with a project. Specify <code>projectId</code> as well.</li><li><code>projectRole</code> Share with a project role in a project. Specify <code>projectId</code> and <code>projectRoleId</code> as well.</li><li><code>global</code> Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions can be set.</li><li><code>authenticated</code> Share with all logged-in users. This shows as <code>loggedin</code> in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions can be set.</li></ul>",
          "enum": [
            "project",
            "group",
            "projectRole",
            "global",
            "authenticated"
          ]
        },
        "projectId": {
          "type": "string",
          "description": "The ID of the project to share the filter with. Set <code>type</code> to <code>project</code>."
        },
        "groupname": {
          "type": "string",
          "description": "The name of the group to share the filter with. Set <code>type</code> to <code>group</code>."
        },
        "projectRoleId": {
          "type": "string",
          "description": "The ID of the project role to share the filter with. Set <code>type</code> to <code>projectRole</code> and the <code>projectId</code> for the project that the role is in."
        }
      }
    },
    "JQLPersonalDataMigrationRequest": {
      "type": "object",
      "properties": {
        "queryStrings": {
          "type": "array",
          "description": "A list of queries with user identifiers. Maximum of 100 queries.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "The JQL queries to be converted."
    },
    "ConvertedJQLQueries": {
      "type": "object",
      "properties": {
        "queryStrings": {
          "type": "array",
          "description": "The list of converted query strings with account IDs in place of user identifiers.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "The converted JQL queries."
    },
    "SearchResults": {
      "type": "object",
      "properties": {
        "expand": {
          "type": "string",
          "description": "Details of the expands available for the search results.",
          "readOnly": true
        },
        "startAt": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the first item returned on the page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of results that could be on the page.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The number of results on the page.",
          "readOnly": true
        },
        "issues": {
          "type": "array",
          "description": "The list of issues found by the search.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Issue"
          }
        },
        "warningMessages": {
          "type": "array",
          "description": "Any warnings related to the JQL query.",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "names": {
          "type": "object",
          "description": "The display name of each field in the search results.",
          "readOnly": true,
          "additionalProperties": {
            "type": "string"
          }
        },
        "schema": {
          "type": "object",
          "description": "The schema describing the field types in the search results.",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "#/definitions/JsonTypeBean"
          }
        }
      },
      "description": "The result of a JQL search."
    },
    "SearchRequestBean": {
      "type": "object",
      "properties": {
        "jql": {
          "type": "string",
          "description": "A <a href=\"https://confluence.atlassian.com/x/egORLQ\">JQL</a> expression."
        },
        "startAt": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the first item to return in the page of results (page offset). The base index is <code>0</code>."
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items to return per page. The default is <code>50</code> and the maximum is <code>100</code>."
        },
        "fields": {
          "type": "array",
          "description": "A comma-separated list of fields to return for each issue, use it to retrieve a subset of fields.\nAllowed values<ul>\n<li><code>*all</code> Returns all fields.</li>\n<li><code>*navigable</code> Returns navigable fields.</li>\n<li>Any issue field, prefixed with a minus to exclude.</li>\n</ul>\nThe default is <code>*navigable</code>.<p>\nExamples:\n<ul>\n<li><code>summary,comment</code> Returns the summary and comments fields only.</li>\n<li><code>-description</code> Returns all navigable (default) fields except description.</li>\n<li><code>*all,-comment</code> Returns all fields except comments.</li>\n</ul>\nMultiple <code>fields</code> parameters can be included in a request.\n<p>\nNote: All navigable fields are returned by default. This differs from <a href=\"#api-api-2-issue-issueIdOrKey-get\">GET issue</a> where the default is all fields.",
          "items": {
            "type": "string"
          }
        },
        "validateQuery": {
          "type": "string",
          "description": "Determines how to validate the JQL query and treat the validation results. Supported values:\n<ul>\n<li><code>strict</code> Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).</li>\n<li><code>warn</code> Returns all errors as warnings.</li>\n<li><code>none</code> No validation is performed.</li>\n<li><code>true</code> <em>Deprecated</em> A legacy synonym for <code>strict</code>.</li>\n<li><code>false</code> <em>Deprecated</em> A legacy synonym for <code>warn</code>.</li>\n</ul>\nThe default is <code>strict</code>.<p>\nNote: If the JQL is not correctly formed a 400 response code is returned, regardless of the <code>validateQuery</code> value.",
          "enum": [
            "strict",
            "warn",
            "none",
            "true",
            "false"
          ]
        },
        "expand": {
          "type": "array",
          "description": "Use <a href=\"em>#expansion\">expand</a> to include additional information about issues in the response. Note that, unlike the majority of instances where <code>expand</code> is specified, <code>expand</code> is defined as a list of values. The expand options are:\n<ul>\n<li><code>renderedFields</code> Returns field values rendered in HTML format.</li>\n<li><code>names</code> Returns the display name of each field.</li>\n<li><code>schema</code> Returns the schema describing a field type.</li>\n<li><code>transitions</code> Returns all possible transitions for the issue.</li>\n<li><code>operations</code> Returns all possible operations for the issue.</li>\n<li><code>editmeta</code> Returns information about how each field can be edited.</li>\n<li><code>changelog</code> Returns a list of recent updates to an issue, sorted by date, starting from the most recent.</li>\n<li><code>versionedRepresentations</code> Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the <code>fields</code> \nparameter is ignored.</li>\n</ul>",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "type": "array",
          "description": "A comma-separated list of up to 5 issue properties to include in the results.",
          "items": {
            "type": "string"
          }
        },
        "fieldsByKeys": {
          "type": "boolean",
          "description": "Reference fields by their key (rather than ID). The default is <code>false</code>."
        }
      }
    },
    "JQLReferenceData": {
      "type": "object",
      "properties": {
        "visibleFieldNames": {
          "type": "array",
          "description": "List of fields usable in JQL queries.",
          "items": {
            "$ref": "#/definitions/FieldReferenceData"
          }
        },
        "visibleFunctionNames": {
          "type": "array",
          "description": "List of functions usable in JQL queries.",
          "items": {
            "$ref": "#/definitions/FunctionReferenceData"
          }
        },
        "jqlReservedWords": {
          "type": "array",
          "description": "List of JQL query reserved words.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Lists of JQL reference data."
    },
    "FieldReferenceData": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The field identifier."
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the field."
        },
        "orderable": {
          "type": "string",
          "description": "Indicates whether the field can be used in a query's <code>ORDER BY</code> clause."
        },
        "searchable": {
          "type": "string",
          "description": "Indicates whether the content of this field can be searched."
        },
        "auto": {
          "type": "string",
          "description": "Indicates whether the field provide auto-complete suggestions."
        },
        "cfid": {
          "type": "string",
          "description": "If the item is a custom field, the ID of the custom field."
        },
        "operators": {
          "type": "array",
          "description": "The valid search operators for the field.",
          "items": {
            "type": "string"
          }
        },
        "types": {
          "type": "array",
          "description": "The data types of items in the field.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Details of a field that can be used in advanced searches."
    },
    "FunctionReferenceData": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The function identifier."
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the function."
        },
        "isList": {
          "type": "string",
          "description": "Indicates whether the function can take a list of arguments."
        },
        "types": {
          "type": "array",
          "description": "The data types returned by the function.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Details of functions that can be used in advanced searches."
    },
    "AutoCompleteSuggestions": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "description": "The list of suggested item.",
          "items": {
            "$ref": "#/definitions/AutoCompleteSuggestion"
          }
        }
      },
      "description": "The results from a JQL query."
    },
    "AutoCompleteSuggestion": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of a suggested item."
        },
        "displayName": {
          "type": "string",
          "description": "The display name of a suggested item. If <code>fieldValue</code> or <code>predicateValue</code> are provided, the matching text is highlighted with the HTML bold tag."
        }
      },
      "description": "A field auto-complete suggestion."
    },
    "NotificationScheme": {
      "type": "object",
      "properties": {
        "expand": {
          "type": "string",
          "description": "Includes additional information in the response."
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the notification scheme."
        },
        "self": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the notification scheme."
        },
        "description": {
          "type": "string",
          "description": "The description of the notification scheme."
        },
        "notificationSchemeEvents": {
          "type": "array",
          "description": "The notification events and associated recipients.",
          "items": {
            "$ref": "#/definitions/NotificationSchemeEvent"
          }
        }
      },
      "description": "Details about a notification scheme."
    },
    "EventNotification": {
      "type": "object",
      "properties": {
        "expand": {
          "type": "string",
          "description": "Includes additional information in the response."
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the notification."
        },
        "notificationType": {
          "type": "string",
          "description": "Identifies the recipients of the notification.",
          "enum": [
            "CurrentAssignee",
            "Reporter",
            "CurrentUser",
            "ProjectLead",
            "ComponentLead",
            "User",
            "Group",
            "ProjectRole",
            "EmailAddress",
            "AllWatchers",
            "UserCustomField",
            "GroupCustomField"
          ]
        },
        "parameter": {
          "type": "string",
          "description": "The value of the <code>notificationType</code>: <ul><li><code>User</code> The <code>parameter</code> is the user key.</li> <li><code>Group</code> The <code>parameter</code> is the group name.</li> <li><code>ProjectRole</code> The <code>parameter</code> is the project role ID.</li> <li><code>UserCustomField</code> The <code>parameter</code> is the ID of the custom field.</li> <li><code>GroupCustomField</code> The <code>parameter</code> is the ID of the custom field.</li></ul>"
        },
        "group": {
          "type": "object",
          "description": "The specified group.",
          "allOf": [
            {
              "$ref": "#/definitions/GroupName"
            }
          ]
        },
        "field": {
          "type": "object",
          "description": "The custom user or group field.",
          "allOf": [
            {
              "$ref": "#/definitions/Field"
            }
          ]
        },
        "emailAddress": {
          "type": "string",
          "description": "The email address."
        },
        "projectRole": {
          "type": "object",
          "description": "The specified project role.",
          "allOf": [
            {
              "$ref": "#/definitions/ProjectRole"
            }
          ]
        },
        "user": {
          "type": "object",
          "description": "The specified user.",
          "allOf": [
            {
              "$ref": "#/definitions/UserDetails"
            }
          ]
        }
      },
      "description": "Details about a notification associated with an event."
    },
    "NotificationEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the event. The event can be \n<a href=\"https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents\">Jira system events</a> \n<a href=\"https://confluence.atlassian.com/x/AIlKLg\">custom events</a>."
        },
        "name": {
          "type": "string",
          "description": "The name of the event."
        },
        "description": {
          "type": "string",
          "description": "The description of the event."
        },
        "templateEvent": {
          "type": "object",
          "description": "The template of the event. Only custom events configured by Jira administrators have template.",
          "allOf": [
            {
              "$ref": "#/definitions/NotificationEvent"
            }
          ]
        }
      },
      "description": "Details about a notification event."
    },
    "NotificationSchemeEvent": {
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/NotificationEvent"
        },
        "notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventNotification"
          }
        }
      },
      "description": "Details about a notification scheme event."
    },
    "PageOfNotificationScheme": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the page.",
          "readOnly": true
        },
        "nextPage": {
          "type": "string",
          "format": "uri",
          "description": "If there is another page of results, the URL of the next page.",
          "readOnly": true
        },
        "maxResults": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of items that could be returned.",
          "readOnly": true
        },
        "startAt": {
          "type": "integer",
          "format": "int64",
          "description": "The index of the first item returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The number of items returned.",
          "readOnly": true
        },
        "isLast": {
          "type": "boolean",
          "description": "Indicates whether this is the last page.",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "description": "The list of items.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/NotificationScheme"
          }
        }
      },
      "description": "A page of items."
    },
    "ProjectIssueSecurityLevels": {
      "type": "object",
      "required": [
        "levels"
      ],
      "properties": {
        "levels": {
          "type": "array",
          "description": "Issue level security items list.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SecurityLevel"
          }
        }
      },
      "description": "List of issue level security items in a project."
    },
    "Configuration": {
      "type": "object",
      "properties": {
        "votingEnabled": {
          "type": "boolean",
          "description": "Whether the ability for users to vote on issues is enabled. See <a href=\"https://confluence.atlassian.com/x/uYXKM\">Configuring Jira application options</a> for details.",
          "readOnly": true
        },
        "watchingEnabled": {
          "type": "boolean",
          "description": "Whether the ability for users to watch issues is enabled. See <a href=\"https://confluence.atlassian.com/x/uYXKM\">Configuring Jira application options</a> for details.",
          "readOnly": true
        },
        "unassignedIssuesAllowed": {
          "type": "boolean",
          "description": "Whether the ability to create unassigned issues is enabled. See <a href=\"https://confluence.atlassian.com/x/uYXKM\">Configuring Jira application options</a> for details.",
          "readOnly": true
        },
        "subTasksEnabled": {
          "type": "boolean",
          "description": "Whether the ability to create sub-tasks for issues is enabled.",
          "readOnly": true
        },
        "issueLinkingEnabled": {
          "type": "boolean",
          "description": "Whether the ability to link issues is enabled.",
          "readOnly": true
        },
        "timeTrackingEnabled": {
          "type": "boolean",
          "description": "Whether the ability to track time is enabled.",
          "readOnly": true
        },
        "attachmentsEnabled": {
          "type": "boolean",
          "description": "Whether the ability to add attachments to issues is enabled.",
          "readOnly": true
        },
        "timeTrackingConfiguration": {
          "type": "object",
          "description": "The configuration of time tracking.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/TimeTrackingConfiguration"
            }
          ]
        }
      },
      "description": "Details about the configuration of Jira."
    },
    "TimeTrackingConfiguration": {
      "type": "object",
      "required": [
        "defaultUnit",
        "timeFormat",
        "workingDaysPerWeek",
        "workingHoursPerDay"
      ],
      "properties": {
        "workingHoursPerDay": {
          "type": "number",
          "format": "double",
          "description": "The number of hours in a working day."
        },
        "workingDaysPerWeek": {
          "type": "number",
          "format": "double",
          "description": "The number of days in a working week."
        },
        "timeFormat": {
          "type": "string",
          "description": "The format that will appear on an issue's <em>Time Spent</em> field.",
          "enum": [
            "pretty",
            "days",
            "hours"
          ]
        },
        "defaultUnit": {
          "type": "string",
          "description": "The unit of time that will be applied to logged time by default.",
          "enum": [
            "minute",
            "hour",
            "day",
            "week"
          ]
        }
      },
      "description": "Details of the time tracking configuration."
    },
    "ApplicationProperty": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the application property. The ID and key are the same."
        },
        "key": {
          "type": "string",
          "description": "The key of the application property. The ID and key are the same."
        },
        "value": {
          "type": "string",
          "description": "The new value."
        },
        "name": {
          "type": "string",
          "description": "The name of the application property."
        },
        "desc": {
          "type": "string",
          "description": "The description of the application property."
        },
        "type": {
          "type": "string",
          "description": "The data type of the application property."
        },
        "defaultValue": {
          "type": "string",
          "description": "The default value of the application property."
        },
        "example": {
          "type": "string"
        },
        "allowedValues": {
          "type": "array",
          "description": "The allowed values, if applicable.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Details of an application property."
    },
    "SimpleApplicationPropertyBean": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the application property."
        },
        "value": {
          "type": "string",
          "description": "The new value."
        }
      },
      "xml": {
        "name": "applicationProperty"
      }
    },
    "Workflow": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the workflow.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The description of the workflow.",
          "readOnly": true
        },
        "lastModifiedDate": {
          "type": "string",
          "description": "The datetime the workflow was last modified.",
          "readOnly": true
        },
        "lastModifiedUser": {
          "type": "string",
          "description": "The username of the user who last modified the workflow. Note that this property has been deprecated in favor of <code>lastModifiedUserAccountId</code> due to privacy changes. See the <a href=\"https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/\">migration guide</a> for details.",
          "readOnly": true
        },
        "lastModifiedUserAccountId": {
          "type": "string",
          "description": "The  account ID of the user and last modified the workflow.",
          "readOnly": true
        },
        "steps": {
          "type": "integer",
          "format": "int32",
          "description": "The number of steps included in the workflow.",
          "readOnly": true
        },
        "default": {
          "type": "boolean"
        }
      },
      "description": "Details about a workflow."
    },
    "WorkflowTransitionProperty": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the transition property. Also known as the name of the transition property.",
          "readOnly": true
        },
        "value": {
          "type": "string",
          "description": "The value of the transition property."
        },
        "id": {
          "type": "string",
          "description": "The ID of the transition property.",
          "readOnly": true
        }
      },
      "description": "Details about the server Jira is running on."
    },
    "TimeTrackingProvider": {
      "type": "object",
      "required": [
        "key"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "The key for the time tracking provider. For example, <em>JIRA</em>."
        },
        "name": {
          "type": "string",
          "description": "The name of the time tracking provider. For example, <em>JIRA provided time tracking</em>."
        },
        "url": {
          "type": "string",
          "description": "The URL of the configuration page for the time tracking provider app. For example, <em>/example/config/url</em>. This property is only returned if the <code>adminPageKey</code> property is set in the module descriptor of the time tracking provider app.",
          "readOnly": true
        }
      },
      "description": "Details about the time tracking provider."
    },
    "WorkflowScheme": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the workflow scheme.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme."
        },
        "description": {
          "type": "string",
          "description": "The description of the workflow scheme."
        },
        "defaultWorkflow": {
          "type": "string",
          "description": "The name of the default workflow for the workflow scheme. The default workflow has <em>All Unassigned Issue Types</em> assigned to it in Jira. If <code>defaultWorkflow</code> is not specified when creating a workflow scheme, it is set to <em>Jira Workflow (jira)</em>."
        },
        "issueTypeMappings": {
          "type": "object",
          "description": "The issue type-project mappings, where each mapping is an issue type ID and project name pair. Note that an issue type can only be mapped to one project in a workflow scheme.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "originalDefaultWorkflow": {
          "type": "string",
          "description": "For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has <em>All Unassigned Issue Types</em> assigned to it in Jira.",
          "readOnly": true
        },
        "originalIssueTypeMappings": {
          "type": "object",
          "description": "For draft workflow schemes, this property is the issue type-project mappings for the original workflow scheme, where each mapping is an issue type ID and project name pair. Note that an issue type can only be mapped to one project in a workflow scheme.",
          "readOnly": true,
          "additionalProperties": {
            "type": "string"
          }
        },
        "draft": {
          "type": "boolean",
          "description": "Indicates whether the workflow scheme is a draft or not.",
          "readOnly": true
        },
        "lastModifiedUser": {
          "type": "object",
          "description": "The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/User"
            }
          ]
        },
        "lastModified": {
          "type": "string",
          "description": "The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.",
          "readOnly": true
        },
        "self": {
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "updateDraftIfNeeded": {
          "type": "boolean",
          "description": "Indicates whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works: <ul><li>Update an active workflow scheme with <code>updateDraftIfNeeded</code> set to <code>true</code>: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.</li><li>Update an active workflow scheme with <code>updateDraftIfNeeded</code> set to <code>false</code>: An error is returned, as active workflow schemes cannot be updated.</li><li>Update an inactive workflow scheme with <code>updateDraftIfNeeded</code> set to <code>true</code>: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.</li></ul>Defaults to <code>false</code>."
        },
        "issueTypes": {
          "type": "object",
          "description": "The issue types available in Jira.",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "#/definitions/IssueType"
          }
        }
      },
      "description": "Details about a workflow scheme."
    },
    "IssueTypesWorkflowMapping": {
      "type": "object",
      "properties": {
        "workflow": {
          "type": "string",
          "description": "The name of the workflow. Optional if updating the workflow-issue types mapping."
        },
        "issueTypes": {
          "type": "array",
          "description": "The list of issue type IDs.",
          "items": {
            "type": "string"
          }
        },
        "defaultMapping": {
          "type": "boolean",
          "description": "Indicates whether the workflow is the default workflow for the workflow scheme."
        },
        "updateDraftIfNeeded": {
          "type": "boolean",
          "description": "Indicates whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new workflow-issue types mapping. Defaults to <code>false</code>."
        }
      },
      "description": "Details about the mapping between issue types and a workflow."
    },
    "IssueTypeWorkflowMapping": {
      "type": "object",
      "properties": {
        "issueType": {
          "type": "string",
          "description": "The ID of the issue type. Not required if updating the issue type-workflow mapping."
        },
        "workflow": {
          "type": "string",
          "description": "The name of the workflow."
        },
        "updateDraftIfNeeded": {
          "type": "boolean",
          "description": "Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to <code>false</code>. Only applicable when updating the workflow-issue types mapping."
        }
      },
      "description": "Details about the mapping between an issue type and a workflow."
    },
    "DefaultWorkflow": {
      "type": "object",
      "required": [
        "workflow"
      ],
      "properties": {
        "workflow": {
          "type": "string",
          "description": "The name of the workflow to set as the default workflow."
        },
        "updateDraftIfNeeded": {
          "type": "boolean",
          "description": "Indicates whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new default workflow. Defaults to <code>false</code>."
        }
      },
      "description": "Details about the default workflow."
    },
    "AuditRecords": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The number of audit items skipped before the first item in this list.",
          "readOnly": true
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "The requested or default limit on the number of audit items to be returned.",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of audit items returned.",
          "readOnly": true
        },
        "records": {
          "type": "array",
          "description": "The list of audit items.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AuditRecordBean"
          }
        }
      },
      "description": "Container for a list of audit records."
    },
    "AssociatedItemBean": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the associated record.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the associated record.",
          "readOnly": true
        },
        "typeName": {
          "type": "string",
          "description": "The type of the associated record.",
          "readOnly": true
        },
        "parentId": {
          "type": "string",
          "description": "The ID of the associated parent record.",
          "readOnly": true
        },
        "parentName": {
          "type": "string",
          "description": "The name of the associated parent record.",
          "readOnly": true
        }
      },
      "description": "Details of an item associated with the changed record."
    },
    "AuditRecordBean": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the audit record.",
          "readOnly": true
        },
        "summary": {
          "type": "string",
          "description": "The summary of the audit record.",
          "readOnly": true
        },
        "remoteAddress": {
          "type": "string",
          "description": "The URL of the computer where the creation of the audit record was initiated.",
          "readOnly": true
        },
        "authorKey": {
          "type": "string",
          "description": "The key of the user who created the audit record.",
          "readOnly": true
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time on which the audit record was created.",
          "readOnly": true
        },
        "category": {
          "type": "string",
          "description": "The category of the audit record. For a list of these categories, see the help article <a href=\"https://confluence.atlassian.com/x/noXKM\">Auditing in Jira applications</a>.",
          "readOnly": true
        },
        "eventSource": {
          "type": "string",
          "description": "The event the audit record originated from.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "The description of the audit record.",
          "readOnly": true
        },
        "objectItem": {
          "$ref": "#/definitions/AssociatedItemBean"
        },
        "changedValues": {
          "type": "array",
          "description": "The list of values changed in the record event.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ChangedValueBean"
          }
        },
        "associatedItems": {
          "type": "array",
          "description": "The list of items associated with the changed record.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AssociatedItemBean"
          }
        }
      },
      "description": "An audit record."
    },
    "ChangedValueBean": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string",
          "description": "The name of the field changed.",
          "readOnly": true
        },
        "changedFrom": {
          "type": "string",
          "description": "The value of the field before the change.",
          "readOnly": true
        },
        "changedTo": {
          "type": "string",
          "description": "The value of the field after the change.",
          "readOnly": true
        }
      },
      "description": "Details of values changed in the record event."
    },
    "PermissionSchemes": {
      "type": "object",
      "properties": {
        "permissionSchemes": {
          "type": "array",
          "description": "Permission schemes list.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PermissionScheme"
          }
        }
      },
      "description": "List of all permission schemes."
    },
    "PermissionGrants": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "description": "Permission grants list.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PermissionGrant"
          }
        },
        "expand": {
          "type": "string",
          "description": "Details of the expands available for the  permission grants items.",
          "readOnly": true
        }
      },
      "description": "List of permission grants."
    },
    "ServerInformation": {
      "type": "object",
      "properties": {
        "baseUrl": {
          "type": "string",
          "description": "The base URL of the Jira instance."
        },
        "version": {
          "type": "string",
          "description": "The version of Jira."
        },
        "versionNumbers": {
          "type": "array",
          "description": "The major, minor, and revision version numbers of the Jira version.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "deploymentType": {
          "type": "string",
          "description": "The type of server deployment. This is always returned as <em>Cloud</em>."
        },
        "buildNumber": {
          "type": "integer",
          "format": "int32",
          "description": "The build number of the Jira version."
        },
        "buildDate": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the Jira version was built."
        },
        "serverTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time in Jira when this request was responded to."
        },
        "scmInfo": {
          "type": "string",
          "description": "The unique identifier of the Jira version."
        },
        "serverTitle": {
          "type": "string",
          "description": "The name of the Jira instance"
        },
        "healthChecks": {
          "type": "array",
          "description": "Jira instance health check results. Deprecated and no longer returned.",
          "items": {
            "$ref": "#/definitions/HealthCheckResult"
          }
        }
      },
      "description": "Details about the Jira instance."
    },
    "HealthCheckResult": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the Jira health check item."
        },
        "description": {
          "type": "string",
          "description": "The description of the Jira health check item."
        },
        "passed": {
          "type": "boolean",
          "description": "Indicates whether the Jira health check item passed or failed."
        }
      },
      "description": "Jira instance health check results. Deprecated and no longer returned."
    },
    "UserMigrationBean": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        }
      },
      "description": "accountId with username or key."
    }
  },
  "externalDocs": {
    "description": "Find out more about Atlassian things",
    "url": "http://www.atlassian.com"
  },
  "x-atlassian-narrative": {
    "documents": [
      {
        "title": "About",
        "anchor": "about",
        "body": "The Jira REST API enables you to interact with Jira programatically. Use this API to \n[build apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/), script interactions with \nJira, or develop any other type of integration. This page documents the REST resources available in Jira Cloud, including \nthe HTTP response codes and example requests and responses."
      },
      {
        "title": "Version and URI",
        "anchor": "version",
        "body": "This documentation is for **version 2** of the Jira Cloud platform REST API, which is the current stable version. The URIs \nfor resources have the following structure:\n\n`https://<site-url>/rest/api/2/<resource-name>`\n\nFor example,\n`https://your-domain.atlassian.net/rest/api/2/issue/DEMO-1`\n\nNote that the latest version of the Jira Cloud platform REST API is [version 3](https://developer.atlassian.com/cloud/jira/platform/rest/v3/), \nwhich is in beta. While all endpoints from the version 2 API are available in version 3, they are under development and may change. "
      },
      {
        "title": "Authentication and authorization",
        "anchor": "authentication",
        "body": "### Connect apps\n\nFor Connect apps, authentication (JWT-based) is built into the Connect libraries. Authorization is implemented using either \nscopes (shown as _App scope required_ for operations on this page) or user impersonation. See \n[Security for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/) \nfor details.\n\n### Other integrations\n\nFor integrations that are not Connect apps, use OAuth 2.0 authorization code grants (3LO) for security \n(3LO scopes are shown as _OAuth scopes required_ for operations on this page). Basic authentication is also available, \nbut you should only use it for tools such as personal scripts or bots. See \n[Security for other integrations](https://developer.atlassian.com/cloud/jira/platform/security-for-other-integrations/) \nfor details."
      },
      {
        "title": "Permissions",
        "anchor": "permissions",
        "body": "Most operations in this API require permissions. The calling user must have the required permissions for an operation to \nuse it. Note that for Connect apps, the app user must have the required permissions for the operation and the app must \nhave scopes that permit the operation.\n\nA permission can be granted to a group, project role, or issue role that the user is a member of, or granted directly to a user. \nSee [Permissions overview](https://confluence.atlassian.com/x/FQiiLQ) for details. The most common permissions are:\n\n- **Administer the Cloud site**: Users in the _site-admins_ group have this \npermission. See [Manage groups](https://confluence.atlassian.com/x/24xjL) for details.\n- **Administer Jira**: Granted by the _Jira Administrators_ global permission. Users in the _administrators_ group have this \npermission. See [Manage groups](https://confluence.atlassian.com/x/24xjL) and \n[Managing global permissions](https://confluence.atlassian.com/x/x4dKLg) for details.\n- **Administer a project in Jira**: Granted by the _Administer projects_ project permission for a project. This can be \ngranted to a user, a group, a project role, and more. \nSee [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for details.\n- **Access a project in Jira**: Granted by the _Browse projects_ project permission for a project. This can be \ngranted to a user, a group, a project role, and more. \nSee [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for details.\n- **Access Jira**: Granted by the _Jira Users_ global permission. Users in the _\\[product]-users_ (for example, \n_jira-software-users_) group have this permission. \nSee [Manage groups](https://confluence.atlassian.com/x/24xjL) and \n[Managing global permissions](https://confluence.atlassian.com/x/x4dKLg) for details."
      },
      {
        "title": "Expansion, pagination, and ordering",
        "anchor": "expansion",
        "body": "### Expansion\n\nThe Jira REST API uses resource expansion, which means that some parts of a resource are not returned unless specified \nin the request. This simplifies responses and minimizes network traffic.\n\nTo expand part of a resource in a request, use the expand query parameter and specify the object(s) to be expanded. \nIf you need to expand nested objects, use the `.` dot notation. If you need to expand multiple objects, use a \ncomma-separated list. \n\nFor example, the following request expands the `names` and `renderedFields` properties for the _JRACLOUD-34423_ issue:\n\n`GET issue/JRACLOUD-34423?expand=names,renderedFields`\n\nTo discover which object can be expanded, refer to the `expand` property in the object. \nIn the JSON example below, the resource declares `widgets` as expandable.\n\n```json\n{\n  \"expand\": \"widgets\", \n  \"self\": \"https://your-domain.atlassian.net/rest/api/3/resource/KEY-1\", \n  \"widgets\": {\n    \"widgets\": [],\n    \"size\": 5\n   }\n}\n```\n\n### Pagination\n\nThe Jira REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large \ncollection of items. When you make a request to a paginated resource, the response wraps the returned array of values in \na JSON object with paging metadata. For example:\n\n```json\n{\n    \"startAt\" : 0,\n    \"maxResults\" : 10,\n    \"total\": 200,\n    \"isLast\": false,\n    \"values\": [\n        { /* result 0 */ },\n        { /* result 1 */ },\n        { /* result 2 */ }\n    ]\n}\n```\n\n*   `startAt` is the index of the first item returned in the page.\n*   `maxResults` is the maximum number of items that can be returned per page. Each API endpoint may have a different \nlimit for the number of items returned, and these limits may change without notice.\n*   `total` is the total number of items contained in all pages. This number **_may change_** as the client \nrequests the subsequent pages, therefore the client should always assume that the requested page can be empty. Note \nthat this property is not returned for all operations.\n*   `isLast` indicates whether the page returned is the last one. Note that this property is not returned for all operations.\n\n### Ordering\n\nSome operations support ordering the elements of a response by a field. Check the documentation for the operation to \nconfirm whether ordering of a response is supported and which fields can be used. Responses are listed in ascending order \nby default. You can change the order using the `orderby` query parameter with a `-` or `+` symbol. For example:\n\n*   `?orderBy=name` to order by `name` field ascending.\n*   `?orderBy=+name` to order by `name` field ascending.\n*   `?orderBy=-name` to order by `name` field descending.\n\n\n"
      },
      {
        "title": "Special headers",
        "anchor": "special-request-headers",
        "body": "The following request and response headers define important metadata for the Jira Cloud REST API resources.\n\n-   `X-Atlassian-Token` (request): Operations that accept multipart/form-data must include the `X-Atlassian-Token: no-check` \nheader in requests. Otherwise the request will be blocked by cross-site request forgery (CSRF/XSRF) protection.\n-   `x-atlassian-force-account-id` (request): Operations with the `x-atlassian-force-account-id: true` header will behave as if GDPR \nchanges are enforced (for example, deprecated fields removed). Use this header to test if your integration is GDPR-compliant. See the \n[migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/#testing-your-gdpr-changes) \nfor details.\n-   `X-AUSERNAME` (response): This response header contains either the username of the authenticated user or `anonymous`. \nNote that this header is not returned if the request includes the `x-atlassian-force-account-id: true` header.\n-   `X-AACCOUNTID` (response): This response header contains the Atlassian account ID of the authenticated user."
      },
      {
        "title": "Asynchronous operations",
        "anchor": "async-operations",
        "body": "Some Jira REST API operations may trigger long-running or computationally expensive tasks. In these cases, the operation \nwill schedule an asynchronous task and return a `303 (See Other)` response, indicating the location of the queued task \nin the `Location` header. You can query this task to get progress updates.\n\nWhen the task finishes, the response object will contain the `result` field. The content of the field is specific to the \noperation that created the task. Refer to the operation’s documentation for more information.\n\nNote that asynchronous tasks are not guaranteed to be run in order. In other words, if you need your tasks to execute \nin a certain order, you should start a task only after the prerequisite task(s) have finished."
      },
      {
        "title": "Experimental features",
        "anchor": "experimental",
        "body": "Features and methods marked as experimental may change without notice. Feedback on experimental functionality is welcome. \nReport your suggestions and bugs in the [ACJIRA project](https://ecosystem.atlassian.net/projects/ACJIRA) (preferred) or use the \n**Give docs feedback** link at the top of this page. \n"
      },
      {
        "title": "Status codes",
        "anchor": "status-codes",
        "body": "The Jira Cloud platform REST API uses the [standard HTTP status codes](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).\n\nOperations that return an error status code may also return a response body containing details of the error or errors. \nThe schema for the response body is shown below:\n\n\n```json\n{\n  \"id\": \"https://docs.atlassian.com/jira/REST/schema/error-collection#\",\n  \"title\": \"Error Collection\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"errorMessages\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"errors\": {\n      \"type\": \"object\",\n      \"patternProperties\": {\n        \".+\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"status\": { \n      \"type\": \"integer\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```"
      }
    ]
  }
}